"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BaseTemplate = void 0;

require("source-map-support/register");

var _asyncOra = require("@electron-forge/async-ora");

var _debug = _interopRequireDefault(require("debug"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _determineAuthor = _interopRequireDefault(require("./determine-author"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const currentForgeVersion = require('../package.json').version;

const d = (0, _debug.default)('electron-forge:template:base');

const tmplDir = _path.default.resolve(__dirname, '../tmpl');

class BaseTemplate {
  constructor() {
    _defineProperty(this, "templateDir", tmplDir);
  }

  get devDependencies() {
    const packageJSONPath = _path.default.join(this.templateDir, 'package.json');

    if (_fsExtra.default.pathExistsSync(packageJSONPath)) {
      const packageDevDeps = _fsExtra.default.readJsonSync(packageJSONPath).devDependencies;

      if (packageDevDeps) {
        return Object.entries(packageDevDeps).map(([packageName, version]) => {
          if (version === 'ELECTRON_FORGE/VERSION') {
            version = currentForgeVersion;
          }

          return `${packageName}@${version}`;
        });
      }
    }

    return [];
  }

  async initializeTemplate(directory, {
    copyCIFiles
  }) {
    await (0, _asyncOra.asyncOra)('Copying Starter Files', async () => {
      d('creating directory:', _path.default.resolve(directory, 'src'));
      await _fsExtra.default.mkdirs(_path.default.resolve(directory, 'src'));
      const rootFiles = ['_gitignore'];
      if (copyCIFiles) rootFiles.push(...['_travis.yml', '_appveyor.yml']);
      const srcFiles = ['index.css', 'index.js', 'index.html'];

      for (const file of rootFiles) {
        await this.copy(_path.default.resolve(tmplDir, file), _path.default.resolve(directory, file.replace(/^_/, '.')));
      }

      for (const file of srcFiles) {
        await this.copy(_path.default.resolve(tmplDir, file), _path.default.resolve(directory, 'src', file));
      }
    });
    await this.initializePackageJSON(directory);
  }

  async copy(source, target) {
    d(`copying "${source}" --> "${target}"`);
    await _fsExtra.default.copy(source, target);
  }

  async copyTemplateFile(destDir, basename) {
    await this.copy(_path.default.join(this.templateDir, basename), _path.default.resolve(destDir, basename));
  }

  async initializePackageJSON(directory) {
    await (0, _asyncOra.asyncOra)('Initializing NPM Module', async () => {
      const packageJSON = await _fsExtra.default.readJson(_path.default.resolve(__dirname, '../tmpl/package.json')); // eslint-disable-next-line no-multi-assign

      packageJSON.productName = packageJSON.name = _path.default.basename(directory).toLowerCase();
      packageJSON.author = await (0, _determineAuthor.default)(directory);
      packageJSON.scripts.lint = 'echo "No linting configured"';
      d('writing package.json to:', directory);
      await _fsExtra.default.writeJson(_path.default.resolve(directory, 'package.json'), packageJSON, {
        spaces: 2
      });
    });
  }

  async updateFileByLine(inputPath, lineHandler, outputPath) {
    const fileContents = (await _fsExtra.default.readFile(inputPath, 'utf8')).split('\n').map(lineHandler).join('\n');
    await _fsExtra.default.writeFile(outputPath || inputPath, fileContents);

    if (outputPath !== undefined) {
      await _fsExtra.default.remove(inputPath);
    }
  }

}

exports.BaseTemplate = BaseTemplate;

var _default = new BaseTemplate();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,