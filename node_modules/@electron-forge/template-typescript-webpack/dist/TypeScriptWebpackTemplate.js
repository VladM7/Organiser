"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _asyncOra = require("@electron-forge/async-ora");

var _templateBase = require("@electron-forge/template-base");

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class TypeScriptWebpackTemplate extends _templateBase.BaseTemplate {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "templateDir", _path.default.resolve(__dirname, '..', 'tmpl'));
  }

  async initializeTemplate(directory, options) {
    await super.initializeTemplate(directory, options);
    await (0, _asyncOra.asyncOra)('Setting up Forge configuration', async () => {
      const packageJSONPath = _path.default.resolve(directory, 'package.json');

      const packageJSON = await _fsExtra.default.readJson(packageJSONPath);
      packageJSON.main = '.webpack/main';
      packageJSON.config.forge.plugins = packageJSON.config.forge.plugins || [];
      packageJSON.config.forge.plugins.push(['@electron-forge/plugin-webpack', {
        mainConfig: './webpack.main.config.js',
        renderer: {
          config: './webpack.renderer.config.js',
          entryPoints: [{
            html: './src/index.html',
            js: './src/renderer.ts',
            name: 'main_window'
          }]
        }
      }]); // Configure scripts for TS template

      packageJSON.scripts.lint = 'eslint --ext .ts,.tsx .';
      await _fsExtra.default.writeJson(packageJSONPath, packageJSON, {
        spaces: 2
      });
    });
    await (0, _asyncOra.asyncOra)('Setting up TypeScript configuration', async () => {
      const filePath = fileName => _path.default.join(directory, 'src', fileName); // Copy Webpack files


      await this.copyTemplateFile(directory, 'webpack.main.config.js');
      await this.copyTemplateFile(directory, 'webpack.renderer.config.js');
      await this.copyTemplateFile(directory, 'webpack.rules.js');
      await this.copyTemplateFile(directory, 'webpack.plugins.js');
      await this.updateFileByLine(_path.default.resolve(directory, 'src', 'index.html'), line => {
        if (line.includes('link rel="stylesheet"')) return '';
        return line;
      }); // Copy tsconfig with a small set of presets

      await this.copyTemplateFile(directory, 'tsconfig.json'); // Copy eslint config with recommended settings

      await this.copyTemplateFile(directory, '.eslintrc.json'); // Remove index.js and replace with index.ts

      await _fsExtra.default.remove(filePath('index.js'));
      await this.copyTemplateFile(_path.default.join(directory, 'src'), 'index.ts');
      await this.copyTemplateFile(_path.default.join(directory, 'src'), 'renderer.ts');
    });
  }

}

var _default = new TypeScriptWebpackTemplate();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9UeXBlU2NyaXB0V2VicGFja1RlbXBsYXRlLnRzIl0sIm5hbWVzIjpbIlR5cGVTY3JpcHRXZWJwYWNrVGVtcGxhdGUiLCJCYXNlVGVtcGxhdGUiLCJwYXRoIiwicmVzb2x2ZSIsIl9fZGlybmFtZSIsImluaXRpYWxpemVUZW1wbGF0ZSIsImRpcmVjdG9yeSIsIm9wdGlvbnMiLCJwYWNrYWdlSlNPTlBhdGgiLCJwYWNrYWdlSlNPTiIsImZzIiwicmVhZEpzb24iLCJtYWluIiwiY29uZmlnIiwiZm9yZ2UiLCJwbHVnaW5zIiwicHVzaCIsIm1haW5Db25maWciLCJyZW5kZXJlciIsImVudHJ5UG9pbnRzIiwiaHRtbCIsImpzIiwibmFtZSIsInNjcmlwdHMiLCJsaW50Iiwid3JpdGVKc29uIiwic3BhY2VzIiwiZmlsZVBhdGgiLCJmaWxlTmFtZSIsImpvaW4iLCJjb3B5VGVtcGxhdGVGaWxlIiwidXBkYXRlRmlsZUJ5TGluZSIsImxpbmUiLCJpbmNsdWRlcyIsInJlbW92ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUE7Ozs7OztBQUVBLE1BQU1BLHlCQUFOLFNBQXdDQywwQkFBeEMsQ0FBcUQ7QUFBQTtBQUFBOztBQUFBLHlDQUM5QkMsY0FBS0MsT0FBTCxDQUFhQyxTQUFiLEVBQXdCLElBQXhCLEVBQThCLE1BQTlCLENBRDhCO0FBQUE7O0FBRzNCLFFBQWxCQyxrQkFBa0IsQ0FBQ0MsU0FBRCxFQUFvQkMsT0FBcEIsRUFBa0Q7QUFDeEUsVUFBTSxNQUFNRixrQkFBTixDQUF5QkMsU0FBekIsRUFBb0NDLE9BQXBDLENBQU47QUFDQSxVQUFNLHdCQUFTLGdDQUFULEVBQTJDLFlBQVk7QUFDM0QsWUFBTUMsZUFBZSxHQUFHTixjQUFLQyxPQUFMLENBQWFHLFNBQWIsRUFBd0IsY0FBeEIsQ0FBeEI7O0FBQ0EsWUFBTUcsV0FBVyxHQUFHLE1BQU1DLGlCQUFHQyxRQUFILENBQVlILGVBQVosQ0FBMUI7QUFFQUMsTUFBQUEsV0FBVyxDQUFDRyxJQUFaLEdBQW1CLGVBQW5CO0FBQ0FILE1BQUFBLFdBQVcsQ0FBQ0ksTUFBWixDQUFtQkMsS0FBbkIsQ0FBeUJDLE9BQXpCLEdBQW1DTixXQUFXLENBQUNJLE1BQVosQ0FBbUJDLEtBQW5CLENBQXlCQyxPQUF6QixJQUFvQyxFQUF2RTtBQUNBTixNQUFBQSxXQUFXLENBQUNJLE1BQVosQ0FBbUJDLEtBQW5CLENBQXlCQyxPQUF6QixDQUFpQ0MsSUFBakMsQ0FBc0MsQ0FDcEMsZ0NBRG9DLEVBRXBDO0FBQ0VDLFFBQUFBLFVBQVUsRUFBRSwwQkFEZDtBQUVFQyxRQUFBQSxRQUFRLEVBQUU7QUFDUkwsVUFBQUEsTUFBTSxFQUFFLDhCQURBO0FBRVJNLFVBQUFBLFdBQVcsRUFBRSxDQUNYO0FBQ0VDLFlBQUFBLElBQUksRUFBRSxrQkFEUjtBQUVFQyxZQUFBQSxFQUFFLEVBQUUsbUJBRk47QUFHRUMsWUFBQUEsSUFBSSxFQUFFO0FBSFIsV0FEVztBQUZMO0FBRlosT0FGb0MsQ0FBdEMsRUFOMkQsQ0F1QjNEOztBQUNBYixNQUFBQSxXQUFXLENBQUNjLE9BQVosQ0FBb0JDLElBQXBCLEdBQTJCLHlCQUEzQjtBQUVBLFlBQU1kLGlCQUFHZSxTQUFILENBQWFqQixlQUFiLEVBQThCQyxXQUE5QixFQUEyQztBQUFFaUIsUUFBQUEsTUFBTSxFQUFFO0FBQVYsT0FBM0MsQ0FBTjtBQUNELEtBM0JLLENBQU47QUE2QkEsVUFBTSx3QkFBUyxxQ0FBVCxFQUFnRCxZQUFZO0FBQ2hFLFlBQU1DLFFBQVEsR0FBSUMsUUFBRCxJQUFzQjFCLGNBQUsyQixJQUFMLENBQVV2QixTQUFWLEVBQXFCLEtBQXJCLEVBQTRCc0IsUUFBNUIsQ0FBdkMsQ0FEZ0UsQ0FHaEU7OztBQUNBLFlBQU0sS0FBS0UsZ0JBQUwsQ0FBc0J4QixTQUF0QixFQUFpQyx3QkFBakMsQ0FBTjtBQUNBLFlBQU0sS0FBS3dCLGdCQUFMLENBQXNCeEIsU0FBdEIsRUFBaUMsNEJBQWpDLENBQU47QUFDQSxZQUFNLEtBQUt3QixnQkFBTCxDQUFzQnhCLFNBQXRCLEVBQWlDLGtCQUFqQyxDQUFOO0FBQ0EsWUFBTSxLQUFLd0IsZ0JBQUwsQ0FBc0J4QixTQUF0QixFQUFpQyxvQkFBakMsQ0FBTjtBQUVBLFlBQU0sS0FBS3lCLGdCQUFMLENBQXNCN0IsY0FBS0MsT0FBTCxDQUFhRyxTQUFiLEVBQXdCLEtBQXhCLEVBQStCLFlBQS9CLENBQXRCLEVBQXFFMEIsSUFBRCxJQUFVO0FBQ2xGLFlBQUlBLElBQUksQ0FBQ0MsUUFBTCxDQUFjLHVCQUFkLENBQUosRUFBNEMsT0FBTyxFQUFQO0FBQzVDLGVBQU9ELElBQVA7QUFDRCxPQUhLLENBQU4sQ0FUZ0UsQ0FjaEU7O0FBQ0EsWUFBTSxLQUFLRixnQkFBTCxDQUFzQnhCLFNBQXRCLEVBQWlDLGVBQWpDLENBQU4sQ0FmZ0UsQ0FpQmhFOztBQUNBLFlBQU0sS0FBS3dCLGdCQUFMLENBQXNCeEIsU0FBdEIsRUFBaUMsZ0JBQWpDLENBQU4sQ0FsQmdFLENBb0JoRTs7QUFDQSxZQUFNSSxpQkFBR3dCLE1BQUgsQ0FBVVAsUUFBUSxDQUFDLFVBQUQsQ0FBbEIsQ0FBTjtBQUNBLFlBQU0sS0FBS0csZ0JBQUwsQ0FBc0I1QixjQUFLMkIsSUFBTCxDQUFVdkIsU0FBVixFQUFxQixLQUFyQixDQUF0QixFQUFtRCxVQUFuRCxDQUFOO0FBRUEsWUFBTSxLQUFLd0IsZ0JBQUwsQ0FBc0I1QixjQUFLMkIsSUFBTCxDQUFVdkIsU0FBVixFQUFxQixLQUFyQixDQUF0QixFQUFtRCxhQUFuRCxDQUFOO0FBQ0QsS0F6QkssQ0FBTjtBQTBCRDs7QUE1RGtEOztlQStEdEMsSUFBSU4seUJBQUosRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzeW5jT3JhIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2FzeW5jLW9yYSc7XG5pbXBvcnQgeyBCYXNlVGVtcGxhdGUgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2UvdGVtcGxhdGUtYmFzZSc7XG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHsgSW5pdFRlbXBsYXRlT3B0aW9ucyB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9zaGFyZWQtdHlwZXMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmNsYXNzIFR5cGVTY3JpcHRXZWJwYWNrVGVtcGxhdGUgZXh0ZW5kcyBCYXNlVGVtcGxhdGUge1xuICBwdWJsaWMgdGVtcGxhdGVEaXIgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAndG1wbCcpO1xuXG4gIGFzeW5jIGluaXRpYWxpemVUZW1wbGF0ZShkaXJlY3Rvcnk6IHN0cmluZywgb3B0aW9uczogSW5pdFRlbXBsYXRlT3B0aW9ucykge1xuICAgIGF3YWl0IHN1cGVyLmluaXRpYWxpemVUZW1wbGF0ZShkaXJlY3RvcnksIG9wdGlvbnMpO1xuICAgIGF3YWl0IGFzeW5jT3JhKCdTZXR0aW5nIHVwIEZvcmdlIGNvbmZpZ3VyYXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBwYWNrYWdlSlNPTlBhdGggPSBwYXRoLnJlc29sdmUoZGlyZWN0b3J5LCAncGFja2FnZS5qc29uJyk7XG4gICAgICBjb25zdCBwYWNrYWdlSlNPTiA9IGF3YWl0IGZzLnJlYWRKc29uKHBhY2thZ2VKU09OUGF0aCk7XG5cbiAgICAgIHBhY2thZ2VKU09OLm1haW4gPSAnLndlYnBhY2svbWFpbic7XG4gICAgICBwYWNrYWdlSlNPTi5jb25maWcuZm9yZ2UucGx1Z2lucyA9IHBhY2thZ2VKU09OLmNvbmZpZy5mb3JnZS5wbHVnaW5zIHx8IFtdO1xuICAgICAgcGFja2FnZUpTT04uY29uZmlnLmZvcmdlLnBsdWdpbnMucHVzaChbXG4gICAgICAgICdAZWxlY3Ryb24tZm9yZ2UvcGx1Z2luLXdlYnBhY2snLFxuICAgICAgICB7XG4gICAgICAgICAgbWFpbkNvbmZpZzogJy4vd2VicGFjay5tYWluLmNvbmZpZy5qcycsXG4gICAgICAgICAgcmVuZGVyZXI6IHtcbiAgICAgICAgICAgIGNvbmZpZzogJy4vd2VicGFjay5yZW5kZXJlci5jb25maWcuanMnLFxuICAgICAgICAgICAgZW50cnlQb2ludHM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGh0bWw6ICcuL3NyYy9pbmRleC5odG1sJyxcbiAgICAgICAgICAgICAgICBqczogJy4vc3JjL3JlbmRlcmVyLnRzJyxcbiAgICAgICAgICAgICAgICBuYW1lOiAnbWFpbl93aW5kb3cnLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSk7XG5cbiAgICAgIC8vIENvbmZpZ3VyZSBzY3JpcHRzIGZvciBUUyB0ZW1wbGF0ZVxuICAgICAgcGFja2FnZUpTT04uc2NyaXB0cy5saW50ID0gJ2VzbGludCAtLWV4dCAudHMsLnRzeCAuJztcblxuICAgICAgYXdhaXQgZnMud3JpdGVKc29uKHBhY2thZ2VKU09OUGF0aCwgcGFja2FnZUpTT04sIHsgc3BhY2VzOiAyIH0pO1xuICAgIH0pO1xuXG4gICAgYXdhaXQgYXN5bmNPcmEoJ1NldHRpbmcgdXAgVHlwZVNjcmlwdCBjb25maWd1cmF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZmlsZVBhdGggPSAoZmlsZU5hbWU6IHN0cmluZykgPT4gcGF0aC5qb2luKGRpcmVjdG9yeSwgJ3NyYycsIGZpbGVOYW1lKTtcblxuICAgICAgLy8gQ29weSBXZWJwYWNrIGZpbGVzXG4gICAgICBhd2FpdCB0aGlzLmNvcHlUZW1wbGF0ZUZpbGUoZGlyZWN0b3J5LCAnd2VicGFjay5tYWluLmNvbmZpZy5qcycpO1xuICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKGRpcmVjdG9yeSwgJ3dlYnBhY2sucmVuZGVyZXIuY29uZmlnLmpzJyk7XG4gICAgICBhd2FpdCB0aGlzLmNvcHlUZW1wbGF0ZUZpbGUoZGlyZWN0b3J5LCAnd2VicGFjay5ydWxlcy5qcycpO1xuICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKGRpcmVjdG9yeSwgJ3dlYnBhY2sucGx1Z2lucy5qcycpO1xuXG4gICAgICBhd2FpdCB0aGlzLnVwZGF0ZUZpbGVCeUxpbmUocGF0aC5yZXNvbHZlKGRpcmVjdG9yeSwgJ3NyYycsICdpbmRleC5odG1sJyksIChsaW5lKSA9PiB7XG4gICAgICAgIGlmIChsaW5lLmluY2x1ZGVzKCdsaW5rIHJlbD1cInN0eWxlc2hlZXRcIicpKSByZXR1cm4gJyc7XG4gICAgICAgIHJldHVybiBsaW5lO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIENvcHkgdHNjb25maWcgd2l0aCBhIHNtYWxsIHNldCBvZiBwcmVzZXRzXG4gICAgICBhd2FpdCB0aGlzLmNvcHlUZW1wbGF0ZUZpbGUoZGlyZWN0b3J5LCAndHNjb25maWcuanNvbicpO1xuXG4gICAgICAvLyBDb3B5IGVzbGludCBjb25maWcgd2l0aCByZWNvbW1lbmRlZCBzZXR0aW5nc1xuICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKGRpcmVjdG9yeSwgJy5lc2xpbnRyYy5qc29uJyk7XG5cbiAgICAgIC8vIFJlbW92ZSBpbmRleC5qcyBhbmQgcmVwbGFjZSB3aXRoIGluZGV4LnRzXG4gICAgICBhd2FpdCBmcy5yZW1vdmUoZmlsZVBhdGgoJ2luZGV4LmpzJykpO1xuICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKHBhdGguam9pbihkaXJlY3RvcnksICdzcmMnKSwgJ2luZGV4LnRzJyk7XG5cbiAgICAgIGF3YWl0IHRoaXMuY29weVRlbXBsYXRlRmlsZShwYXRoLmpvaW4oZGlyZWN0b3J5LCAnc3JjJyksICdyZW5kZXJlci50cycpO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBUeXBlU2NyaXB0V2VicGFja1RlbXBsYXRlKCk7XG4iXX0=