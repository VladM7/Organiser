"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "InstallerOptions", {
  enumerable: true,
  get: function () {
    return _installerBase.InstallerOptions;
  }
});
exports.default = void 0;

require("source-map-support/register");

var _installerBase = _interopRequireWildcard(require("@electron-forge/installer-base"));

var _child_process = require("child_process");

var _util = require("util");

var _sudoPrompt = _interopRequireDefault(require("sudo-prompt"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class InstallerLinux extends _installerBase.default {
  constructor(..._args) {
    super(..._args);

    _defineProperty(this, "which", async (type, prog, promise) => {
      if ((0, _child_process.spawnSync)('which', [prog]).status === 0) {
        await promise();
      } else {
        throw new Error(`${prog} is required to install ${type} packages`);
      }
    });

    _defineProperty(this, "sudo", (type, program, args) => this.which(type, program, () => (0, _util.promisify)(_sudoPrompt.default.exec)(`${program} ${args}`, {
      name: 'Electron Forge'
    })));
  }

}

exports.default = InstallerLinux;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9JbnN0YWxsZXJMaW51eC50cyJdLCJuYW1lcyI6WyJJbnN0YWxsZXJMaW51eCIsIkluc3RhbGxlckJhc2UiLCJ0eXBlIiwicHJvZyIsInByb21pc2UiLCJzdGF0dXMiLCJFcnJvciIsInByb2dyYW0iLCJhcmdzIiwid2hpY2giLCJzdWRvUHJvbXB0IiwiZXhlYyIsIm5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUVBOztBQUNBOztBQUNBOzs7Ozs7Ozs7O0FBSWUsTUFBZUEsY0FBZixTQUFzQ0Msc0JBQXRDLENBQW9EO0FBQUE7QUFBQTs7QUFBQSxtQ0FDekQsT0FBT0MsSUFBUCxFQUFxQkMsSUFBckIsRUFBbUNDLE9BQW5DLEtBQW1FO0FBQ3pFLFVBQUksOEJBQVUsT0FBVixFQUFtQixDQUFDRCxJQUFELENBQW5CLEVBQTJCRSxNQUEzQixLQUFzQyxDQUExQyxFQUE2QztBQUMzQyxjQUFNRCxPQUFPLEVBQWI7QUFDRCxPQUZELE1BRU87QUFDTCxjQUFNLElBQUlFLEtBQUosQ0FBVyxHQUFFSCxJQUFLLDJCQUEwQkQsSUFBSyxXQUFqRCxDQUFOO0FBQ0Q7QUFDRixLQVBnRTs7QUFBQSxrQ0FTMUQsQ0FBQ0EsSUFBRCxFQUFlSyxPQUFmLEVBQWdDQyxJQUFoQyxLQUFpRCxLQUFLQyxLQUFMLENBQ3REUCxJQURzRCxFQUV0REssT0FGc0QsRUFHdEQsTUFBTSxxQkFBVUcsb0JBQVdDLElBQXJCLEVBQTRCLEdBQUVKLE9BQVEsSUFBR0MsSUFBSyxFQUE5QyxFQUFpRDtBQUFFSSxNQUFBQSxJQUFJLEVBQUU7QUFBUixLQUFqRCxDQUhnRCxDQVRTO0FBQUE7O0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSW5zdGFsbGVyQmFzZSwgeyBJbnN0YWxsZXJPcHRpb25zIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2luc3RhbGxlci1iYXNlJztcblxuaW1wb3J0IHsgc3Bhd25TeW5jIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgeyBwcm9taXNpZnkgfSBmcm9tICd1dGlsJztcbmltcG9ydCBzdWRvUHJvbXB0IGZyb20gJ3N1ZG8tcHJvbXB0JztcblxuZXhwb3J0IHsgSW5zdGFsbGVyT3B0aW9ucyB9O1xuXG5leHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBJbnN0YWxsZXJMaW51eCBleHRlbmRzIEluc3RhbGxlckJhc2Uge1xuICB3aGljaCA9IGFzeW5jICh0eXBlOiBzdHJpbmcsIHByb2c6IHN0cmluZywgcHJvbWlzZTogKCkgPT4gUHJvbWlzZTxhbnk+KSA9PiB7XG4gICAgaWYgKHNwYXduU3luYygnd2hpY2gnLCBbcHJvZ10pLnN0YXR1cyA9PT0gMCkge1xuICAgICAgYXdhaXQgcHJvbWlzZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cHJvZ30gaXMgcmVxdWlyZWQgdG8gaW5zdGFsbCAke3R5cGV9IHBhY2thZ2VzYCk7XG4gICAgfVxuICB9XG5cbiAgc3VkbyA9ICh0eXBlOiBzdHJpbmcsIHByb2dyYW06IHN0cmluZywgYXJnczogc3RyaW5nKSA9PiB0aGlzLndoaWNoKFxuICAgIHR5cGUsXG4gICAgcHJvZ3JhbSxcbiAgICAoKSA9PiBwcm9taXNpZnkoc3Vkb1Byb21wdC5leGVjKShgJHtwcm9ncmFtfSAke2FyZ3N9YCwgeyBuYW1lOiAnRWxlY3Ryb24gRm9yZ2UnIH0pLFxuICApXG59XG4iXX0=