"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _asyncOra = require("@electron-forge/async-ora");

var _debug = _interopRequireDefault(require("debug"));

var _resolvePackage = _interopRequireDefault(require("resolve-package"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const d = (0, _debug.default)('electron-forge:init:find-template');

var _default = async (dir, template) => {
  let templateModulePath;
  await (0, _asyncOra.asyncOra)(`Locating custom template: "${template}"`, async () => {
    const resolveTemplateTypes = [['global', `electron-forge-template-${template}`], ['global', `@electron-forge/template-${template}`], ['local', `electron-forge-template-${template}`], ['local', `@electron-forge/template-${template}`], ['local', template]];
    let foundTemplate = false;

    for (const [templateType, moduleName] of resolveTemplateTypes) {
      try {
        d(`Trying ${templateType} template: ${moduleName}`);

        if (templateType === 'global') {
          templateModulePath = await (0, _resolvePackage.default)(moduleName);
        } else {
          // local
          templateModulePath = require.resolve(moduleName);
        }

        foundTemplate = true;
        break;
      } catch (err) {
        d(`Error: ${err.message || err}`);
      }
    }

    if (!foundTemplate) {
      throw new Error(`Failed to locate custom template: "${template}"\n\nTry \`npm install -g electron-forge-template-${template}\``);
    }
  }); // eslint-disable-next-line import/no-dynamic-require, global-require

  const templateModule = require(templateModulePath);

  return templateModule.default || templateModule;
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvaW5pdC1zY3JpcHRzL2ZpbmQtdGVtcGxhdGUudHMiXSwibmFtZXMiOlsiZCIsImRpciIsInRlbXBsYXRlIiwidGVtcGxhdGVNb2R1bGVQYXRoIiwicmVzb2x2ZVRlbXBsYXRlVHlwZXMiLCJmb3VuZFRlbXBsYXRlIiwidGVtcGxhdGVUeXBlIiwibW9kdWxlTmFtZSIsInJlcXVpcmUiLCJyZXNvbHZlIiwiZXJyIiwibWVzc2FnZSIsIkVycm9yIiwidGVtcGxhdGVNb2R1bGUiLCJkZWZhdWx0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7OztBQUtBLE1BQU1BLENBQUMsR0FBRyxvQkFBTSxtQ0FBTixDQUFWOztlQUVlLE9BQU9DLEdBQVAsRUFBb0JDLFFBQXBCLEtBQWlFO0FBQzlFLE1BQUlDLGtCQUFKO0FBQ0EsUUFBTSx3QkFBVSw4QkFBNkJELFFBQVMsR0FBaEQsRUFBb0QsWUFBWTtBQUNwRSxVQUFNRSxvQkFBb0IsR0FBRyxDQUMzQixDQUFDLFFBQUQsRUFBWSwyQkFBMEJGLFFBQVMsRUFBL0MsQ0FEMkIsRUFFM0IsQ0FBQyxRQUFELEVBQVksNEJBQTJCQSxRQUFTLEVBQWhELENBRjJCLEVBRzNCLENBQUMsT0FBRCxFQUFXLDJCQUEwQkEsUUFBUyxFQUE5QyxDQUgyQixFQUkzQixDQUFDLE9BQUQsRUFBVyw0QkFBMkJBLFFBQVMsRUFBL0MsQ0FKMkIsRUFLM0IsQ0FBQyxPQUFELEVBQVVBLFFBQVYsQ0FMMkIsQ0FBN0I7QUFPQSxRQUFJRyxhQUFhLEdBQUcsS0FBcEI7O0FBQ0EsU0FBSyxNQUFNLENBQUNDLFlBQUQsRUFBZUMsVUFBZixDQUFYLElBQXlDSCxvQkFBekMsRUFBK0Q7QUFDN0QsVUFBSTtBQUNGSixRQUFBQSxDQUFDLENBQUUsVUFBU00sWUFBYSxjQUFhQyxVQUFXLEVBQWhELENBQUQ7O0FBQ0EsWUFBSUQsWUFBWSxLQUFLLFFBQXJCLEVBQStCO0FBQzdCSCxVQUFBQSxrQkFBa0IsR0FBRyxNQUFNLDZCQUFlSSxVQUFmLENBQTNCO0FBQ0QsU0FGRCxNQUVPO0FBQUU7QUFDUEosVUFBQUEsa0JBQWtCLEdBQUdLLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQkYsVUFBaEIsQ0FBckI7QUFDRDs7QUFDREYsUUFBQUEsYUFBYSxHQUFHLElBQWhCO0FBQ0E7QUFDRCxPQVRELENBU0UsT0FBT0ssR0FBUCxFQUFZO0FBQ1pWLFFBQUFBLENBQUMsQ0FBRSxVQUFTVSxHQUFHLENBQUNDLE9BQUosSUFBZUQsR0FBSSxFQUE5QixDQUFEO0FBQ0Q7QUFDRjs7QUFDRCxRQUFJLENBQUNMLGFBQUwsRUFBb0I7QUFDbEIsWUFBTSxJQUFJTyxLQUFKLENBQVcsc0NBQXFDVixRQUFTLHFEQUFvREEsUUFBUyxJQUF0SCxDQUFOO0FBQ0Q7QUFDRixHQTFCSyxDQUFOLENBRjhFLENBOEI5RTs7QUFDQSxRQUFNVyxjQUE2QyxHQUFHTCxPQUFPLENBQUNMLGtCQUFELENBQTdEOztBQUVBLFNBQU9VLGNBQWMsQ0FBQ0MsT0FBZixJQUEwQkQsY0FBakM7QUFDRCxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXN5bmNPcmEgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2UvYXN5bmMtb3JhJztcbmltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgcmVzb2x2ZVBhY2thZ2UgZnJvbSAncmVzb2x2ZS1wYWNrYWdlJztcblxuaW1wb3J0IHsgRm9yZ2VUZW1wbGF0ZSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9zaGFyZWQtdHlwZXMnO1xuaW1wb3J0IHsgUG9zc2libGVNb2R1bGUgfSBmcm9tICcuLi8uLi91dGlsL3JlcXVpcmUtc2VhcmNoJztcblxuY29uc3QgZCA9IGRlYnVnKCdlbGVjdHJvbi1mb3JnZTppbml0OmZpbmQtdGVtcGxhdGUnKTtcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKGRpcjogc3RyaW5nLCB0ZW1wbGF0ZTogc3RyaW5nKTogUHJvbWlzZTxGb3JnZVRlbXBsYXRlPiA9PiB7XG4gIGxldCB0ZW1wbGF0ZU1vZHVsZVBhdGghOiBzdHJpbmc7XG4gIGF3YWl0IGFzeW5jT3JhKGBMb2NhdGluZyBjdXN0b20gdGVtcGxhdGU6IFwiJHt0ZW1wbGF0ZX1cImAsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXNvbHZlVGVtcGxhdGVUeXBlcyA9IFtcbiAgICAgIFsnZ2xvYmFsJywgYGVsZWN0cm9uLWZvcmdlLXRlbXBsYXRlLSR7dGVtcGxhdGV9YF0sXG4gICAgICBbJ2dsb2JhbCcsIGBAZWxlY3Ryb24tZm9yZ2UvdGVtcGxhdGUtJHt0ZW1wbGF0ZX1gXSxcbiAgICAgIFsnbG9jYWwnLCBgZWxlY3Ryb24tZm9yZ2UtdGVtcGxhdGUtJHt0ZW1wbGF0ZX1gXSxcbiAgICAgIFsnbG9jYWwnLCBgQGVsZWN0cm9uLWZvcmdlL3RlbXBsYXRlLSR7dGVtcGxhdGV9YF0sXG4gICAgICBbJ2xvY2FsJywgdGVtcGxhdGVdLFxuICAgIF07XG4gICAgbGV0IGZvdW5kVGVtcGxhdGUgPSBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IFt0ZW1wbGF0ZVR5cGUsIG1vZHVsZU5hbWVdIG9mIHJlc29sdmVUZW1wbGF0ZVR5cGVzKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkKGBUcnlpbmcgJHt0ZW1wbGF0ZVR5cGV9IHRlbXBsYXRlOiAke21vZHVsZU5hbWV9YCk7XG4gICAgICAgIGlmICh0ZW1wbGF0ZVR5cGUgPT09ICdnbG9iYWwnKSB7XG4gICAgICAgICAgdGVtcGxhdGVNb2R1bGVQYXRoID0gYXdhaXQgcmVzb2x2ZVBhY2thZ2UobW9kdWxlTmFtZSk7XG4gICAgICAgIH0gZWxzZSB7IC8vIGxvY2FsXG4gICAgICAgICAgdGVtcGxhdGVNb2R1bGVQYXRoID0gcmVxdWlyZS5yZXNvbHZlKG1vZHVsZU5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGZvdW5kVGVtcGxhdGUgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBkKGBFcnJvcjogJHtlcnIubWVzc2FnZSB8fCBlcnJ9YCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghZm91bmRUZW1wbGF0ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gbG9jYXRlIGN1c3RvbSB0ZW1wbGF0ZTogXCIke3RlbXBsYXRlfVwiXFxuXFxuVHJ5IFxcYG5wbSBpbnN0YWxsIC1nIGVsZWN0cm9uLWZvcmdlLXRlbXBsYXRlLSR7dGVtcGxhdGV9XFxgYCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWR5bmFtaWMtcmVxdWlyZSwgZ2xvYmFsLXJlcXVpcmVcbiAgY29uc3QgdGVtcGxhdGVNb2R1bGU6IFBvc3NpYmxlTW9kdWxlPEZvcmdlVGVtcGxhdGU+ID0gcmVxdWlyZSh0ZW1wbGF0ZU1vZHVsZVBhdGgpO1xuXG4gIHJldHVybiB0ZW1wbGF0ZU1vZHVsZS5kZWZhdWx0IHx8IHRlbXBsYXRlTW9kdWxlO1xufTtcbiJdfQ==