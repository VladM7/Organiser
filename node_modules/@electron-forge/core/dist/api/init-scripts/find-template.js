"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _asyncOra = require("@electron-forge/async-ora");

var _debug = _interopRequireDefault(require("debug"));

var _resolvePackage = _interopRequireDefault(require("resolve-package"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const d = (0, _debug.default)('electron-forge:init:find-template');

var _default = async (dir, template) => {
  let templateModulePath;
  await (0, _asyncOra.asyncOra)(`Locating custom template: "${template}"`, async () => {
    const resolveTemplateTypes = [['global', `electron-forge-template-${template}`], ['global', `@electron-forge/template-${template}`], ['local', `electron-forge-template-${template}`], ['local', `@electron-forge/template-${template}`], ['local', template]];
    let foundTemplate = false;

    for (const [templateType, moduleName] of resolveTemplateTypes) {
      try {
        d(`Trying ${templateType} template: ${moduleName}`);

        if (templateType === 'global') {
          templateModulePath = await (0, _resolvePackage.default)(moduleName);
        } else {
          // local
          templateModulePath = require.resolve(moduleName);
        }

        foundTemplate = true;
        break;
      } catch (err) {
        d(`Error: ${err instanceof Error ? err.message : err}`);
      }
    }

    if (!foundTemplate) {
      throw new Error(`Failed to locate custom template: "${template}"\n\nTry \`npm install -g electron-forge-template-${template}\``);
    }
  }); // eslint-disable-next-line import/no-dynamic-require, global-require

  const templateModule = require(templateModulePath);

  return templateModule.default || templateModule;
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvaW5pdC1zY3JpcHRzL2ZpbmQtdGVtcGxhdGUudHMiXSwibmFtZXMiOlsiZCIsImRpciIsInRlbXBsYXRlIiwidGVtcGxhdGVNb2R1bGVQYXRoIiwicmVzb2x2ZVRlbXBsYXRlVHlwZXMiLCJmb3VuZFRlbXBsYXRlIiwidGVtcGxhdGVUeXBlIiwibW9kdWxlTmFtZSIsInJlcXVpcmUiLCJyZXNvbHZlIiwiZXJyIiwiRXJyb3IiLCJtZXNzYWdlIiwidGVtcGxhdGVNb2R1bGUiLCJkZWZhdWx0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7OztBQUtBLE1BQU1BLENBQUMsR0FBRyxvQkFBTSxtQ0FBTixDQUFWOztlQUVlLE9BQU9DLEdBQVAsRUFBb0JDLFFBQXBCLEtBQWlFO0FBQzlFLE1BQUlDLGtCQUFKO0FBQ0EsUUFBTSx3QkFBVSw4QkFBNkJELFFBQVMsR0FBaEQsRUFBb0QsWUFBWTtBQUNwRSxVQUFNRSxvQkFBb0IsR0FBRyxDQUMzQixDQUFDLFFBQUQsRUFBWSwyQkFBMEJGLFFBQVMsRUFBL0MsQ0FEMkIsRUFFM0IsQ0FBQyxRQUFELEVBQVksNEJBQTJCQSxRQUFTLEVBQWhELENBRjJCLEVBRzNCLENBQUMsT0FBRCxFQUFXLDJCQUEwQkEsUUFBUyxFQUE5QyxDQUgyQixFQUkzQixDQUFDLE9BQUQsRUFBVyw0QkFBMkJBLFFBQVMsRUFBL0MsQ0FKMkIsRUFLM0IsQ0FBQyxPQUFELEVBQVVBLFFBQVYsQ0FMMkIsQ0FBN0I7QUFPQSxRQUFJRyxhQUFhLEdBQUcsS0FBcEI7O0FBQ0EsU0FBSyxNQUFNLENBQUNDLFlBQUQsRUFBZUMsVUFBZixDQUFYLElBQXlDSCxvQkFBekMsRUFBK0Q7QUFDN0QsVUFBSTtBQUNGSixRQUFBQSxDQUFDLENBQUUsVUFBU00sWUFBYSxjQUFhQyxVQUFXLEVBQWhELENBQUQ7O0FBQ0EsWUFBSUQsWUFBWSxLQUFLLFFBQXJCLEVBQStCO0FBQzdCSCxVQUFBQSxrQkFBa0IsR0FBRyxNQUFNLDZCQUFlSSxVQUFmLENBQTNCO0FBQ0QsU0FGRCxNQUVPO0FBQUU7QUFDUEosVUFBQUEsa0JBQWtCLEdBQUdLLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQkYsVUFBaEIsQ0FBckI7QUFDRDs7QUFDREYsUUFBQUEsYUFBYSxHQUFHLElBQWhCO0FBQ0E7QUFDRCxPQVRELENBU0UsT0FBT0ssR0FBUCxFQUFZO0FBQ1pWLFFBQUFBLENBQUMsQ0FBRSxVQUFTVSxHQUFHLFlBQVlDLEtBQWYsR0FBdUJELEdBQUcsQ0FBQ0UsT0FBM0IsR0FBcUNGLEdBQUksRUFBcEQsQ0FBRDtBQUNEO0FBQ0Y7O0FBQ0QsUUFBSSxDQUFDTCxhQUFMLEVBQW9CO0FBQ2xCLFlBQU0sSUFBSU0sS0FBSixDQUFXLHNDQUFxQ1QsUUFBUyxxREFBb0RBLFFBQVMsSUFBdEgsQ0FBTjtBQUNEO0FBQ0YsR0ExQkssQ0FBTixDQUY4RSxDQThCOUU7O0FBQ0EsUUFBTVcsY0FBNkMsR0FBR0wsT0FBTyxDQUFDTCxrQkFBRCxDQUE3RDs7QUFFQSxTQUFPVSxjQUFjLENBQUNDLE9BQWYsSUFBMEJELGNBQWpDO0FBQ0QsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzeW5jT3JhIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2FzeW5jLW9yYSc7XG5pbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IHJlc29sdmVQYWNrYWdlIGZyb20gJ3Jlc29sdmUtcGFja2FnZSc7XG5cbmltcG9ydCB7IEZvcmdlVGVtcGxhdGUgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2Uvc2hhcmVkLXR5cGVzJztcbmltcG9ydCB7IFBvc3NpYmxlTW9kdWxlIH0gZnJvbSAnLi4vLi4vdXRpbC9yZXF1aXJlLXNlYXJjaCc7XG5cbmNvbnN0IGQgPSBkZWJ1ZygnZWxlY3Ryb24tZm9yZ2U6aW5pdDpmaW5kLXRlbXBsYXRlJyk7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIChkaXI6IHN0cmluZywgdGVtcGxhdGU6IHN0cmluZyk6IFByb21pc2U8Rm9yZ2VUZW1wbGF0ZT4gPT4ge1xuICBsZXQgdGVtcGxhdGVNb2R1bGVQYXRoITogc3RyaW5nO1xuICBhd2FpdCBhc3luY09yYShgTG9jYXRpbmcgY3VzdG9tIHRlbXBsYXRlOiBcIiR7dGVtcGxhdGV9XCJgLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcmVzb2x2ZVRlbXBsYXRlVHlwZXMgPSBbXG4gICAgICBbJ2dsb2JhbCcsIGBlbGVjdHJvbi1mb3JnZS10ZW1wbGF0ZS0ke3RlbXBsYXRlfWBdLFxuICAgICAgWydnbG9iYWwnLCBgQGVsZWN0cm9uLWZvcmdlL3RlbXBsYXRlLSR7dGVtcGxhdGV9YF0sXG4gICAgICBbJ2xvY2FsJywgYGVsZWN0cm9uLWZvcmdlLXRlbXBsYXRlLSR7dGVtcGxhdGV9YF0sXG4gICAgICBbJ2xvY2FsJywgYEBlbGVjdHJvbi1mb3JnZS90ZW1wbGF0ZS0ke3RlbXBsYXRlfWBdLFxuICAgICAgWydsb2NhbCcsIHRlbXBsYXRlXSxcbiAgICBdO1xuICAgIGxldCBmb3VuZFRlbXBsYXRlID0gZmFsc2U7XG4gICAgZm9yIChjb25zdCBbdGVtcGxhdGVUeXBlLCBtb2R1bGVOYW1lXSBvZiByZXNvbHZlVGVtcGxhdGVUeXBlcykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZChgVHJ5aW5nICR7dGVtcGxhdGVUeXBlfSB0ZW1wbGF0ZTogJHttb2R1bGVOYW1lfWApO1xuICAgICAgICBpZiAodGVtcGxhdGVUeXBlID09PSAnZ2xvYmFsJykge1xuICAgICAgICAgIHRlbXBsYXRlTW9kdWxlUGF0aCA9IGF3YWl0IHJlc29sdmVQYWNrYWdlKG1vZHVsZU5hbWUpO1xuICAgICAgICB9IGVsc2UgeyAvLyBsb2NhbFxuICAgICAgICAgIHRlbXBsYXRlTW9kdWxlUGF0aCA9IHJlcXVpcmUucmVzb2x2ZShtb2R1bGVOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBmb3VuZFRlbXBsYXRlID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgZChgRXJyb3I6ICR7ZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIubWVzc2FnZSA6IGVycn1gKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFmb3VuZFRlbXBsYXRlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBsb2NhdGUgY3VzdG9tIHRlbXBsYXRlOiBcIiR7dGVtcGxhdGV9XCJcXG5cXG5UcnkgXFxgbnBtIGluc3RhbGwgLWcgZWxlY3Ryb24tZm9yZ2UtdGVtcGxhdGUtJHt0ZW1wbGF0ZX1cXGBgKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZHluYW1pYy1yZXF1aXJlLCBnbG9iYWwtcmVxdWlyZVxuICBjb25zdCB0ZW1wbGF0ZU1vZHVsZTogUG9zc2libGVNb2R1bGU8Rm9yZ2VUZW1wbGF0ZT4gPSByZXF1aXJlKHRlbXBsYXRlTW9kdWxlUGF0aCk7XG5cbiAgcmV0dXJuIHRlbXBsYXRlTW9kdWxlLmRlZmF1bHQgfHwgdGVtcGxhdGVNb2R1bGU7XG59O1xuIl19