"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

require("colors");

var _asyncOra = require("@electron-forge/async-ora");

var _installerBase = _interopRequireDefault(require("@electron-forge/installer-base"));

var _debug = _interopRequireDefault(require("debug"));

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _util = require("util");

var _semver = _interopRequireDefault(require("semver"));

var _installerDmg = _interopRequireDefault(require("@electron-forge/installer-dmg"));

var _installerZip = _interopRequireDefault(require("@electron-forge/installer-zip"));

var _installerDeb = _interopRequireDefault(require("@electron-forge/installer-deb"));

var _installerRpm = _interopRequireDefault(require("@electron-forge/installer-rpm"));

var _installerExe = _interopRequireDefault(require("@electron-forge/installer-exe"));

var _messages = require("../util/messages");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const nugget = require('nugget');

const d = (0, _debug.default)('electron-forge:install');
const GITHUB_API = 'https://api.github.com';

class InstallerImpl extends _installerBase.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", 'impl');
  }

}

var _default = async ({
  interactive = false,
  prerelease = false,
  repo,
  chooseAsset
}) => {
  _asyncOra.asyncOra.interactive = interactive;

  if (typeof chooseAsset !== 'function') {
    throw new Error('Expected chooseAsset to be a function in install call');
  }

  let latestRelease;
  let possibleAssets = [];
  await (0, _asyncOra.asyncOra)('Searching for Application', async searchSpinner => {
    if (!repo || !repo.includes('/')) {
      throw new Error('Invalid repository name, must be in the format owner/name');
    }

    d('searching for repo:', repo);
    let releases;

    try {
      releases = await (await (0, _nodeFetch.default)(`${GITHUB_API}/repos/${repo}/releases`)).json();
    } catch (err) {// Ignore error
    }

    if (!releases || releases.message === 'Not Found' || !Array.isArray(releases)) {
      throw new Error(`Failed to find releases for repository "${repo}".  Please check the name and try again.`);
    }

    if (releases.length === 0) {
      throw new Error(`Repository "${repo}" has no releases`);
    }

    releases = releases.filter(release => !release.prerelease || prerelease);
    const sortedReleases = releases.sort((releaseA, releaseB) => {
      let tagA = releaseA.tag_name;
      if (tagA.substr(0, 1) === 'v') tagA = tagA.substr(1);
      let tagB = releaseB.tag_name;
      if (tagB.substr(0, 1) === 'v') tagB = tagB.substr(1);
      return _semver.default.gt(tagB, tagA) ? 1 : -1;
    }); // eslint-disable-next-line prefer-destructuring

    latestRelease = sortedReleases[0];
    searchSpinner.text = 'Searching for Releases';
    const {
      assets
    } = latestRelease;

    if (!assets || !Array.isArray(assets) || assets.length === 0) {
      throw new Error('Could not find any assets for the latest release');
    }

    const installTargets = {
      win32: [/\.exe$/],
      darwin: [/OSX.*\.zip$/, /darwin.*\.zip$/, /macOS.*\.zip$/, /mac.*\.zip$/, /\.dmg$/],
      linux: [/\.rpm$/, /\.deb$/]
    };
    possibleAssets = assets.filter(asset => {
      const targetSuffixes = installTargets[process.platform];

      for (const suffix of targetSuffixes) {
        if (suffix.test(asset.name)) return true;
      }

      return false;
    });

    if (possibleAssets.length === 0) {
      throw new Error(`Failed to find any installable assets for target platform: ${`${process.platform}`.cyan}`);
    }
  });
  (0, _messages.info)(interactive, `Found latest release${prerelease ? ' (including prereleases)' : ''}: ${latestRelease.tag_name.cyan}`);
  let targetAsset = possibleAssets[0];

  if (possibleAssets.length > 1) {
    targetAsset = await Promise.resolve(chooseAsset(possibleAssets));
  }

  const tmpdir = _path.default.resolve(_os.default.tmpdir(), 'forge-install');

  const pathSafeRepo = repo.replace(/[/\\]/g, '-');
  const filename = `${pathSafeRepo}-${latestRelease.tag_name}-${targetAsset.name}`;

  const fullFilePath = _path.default.resolve(tmpdir, filename);

  if (!(await _fsExtra.default.pathExists(fullFilePath)) || (await _fsExtra.default.stat(fullFilePath)).size !== targetAsset.size) {
    await _fsExtra.default.mkdirs(tmpdir);
    const nuggetOpts = {
      target: filename,
      dir: tmpdir,
      resume: true,
      strictSSL: true
    };
    await (0, _util.promisify)(nugget)(targetAsset.browser_download_url, nuggetOpts);
  }

  await (0, _asyncOra.asyncOra)('Installing Application', async installSpinner => {
    const installActions = {
      win32: {
        '.exe': _installerExe.default
      },
      darwin: {
        '.zip': _installerZip.default,
        '.dmg': _installerDmg.default
      },
      linux: {
        '.deb': _installerDeb.default,
        '.rpm': _installerRpm.default
      }
    };
    const suffixFnIdent = Object.keys(installActions[process.platform]).find(suffix => targetAsset.name.endsWith(suffix));

    if (!suffixFnIdent) {
      throw new Error(`No installer to handle "${targetAsset.name}"`);
    }

    const InstallerClass = installActions[process.platform][suffixFnIdent];
    const installer = new InstallerClass();
    await installer.install({
      installSpinner,
      filePath: fullFilePath
    });
  });
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,