"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _asyncOra = require("@electron-forge/async-ora");

var _chalk = _interopRequireDefault(require("chalk"));

var _debug = _interopRequireDefault(require("debug"));

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _util = require("util");

var _semver = _interopRequireDefault(require("semver"));

var _installerBase = _interopRequireDefault(require("@electron-forge/installer-base"));

var _installerDmg = _interopRequireDefault(require("@electron-forge/installer-dmg"));

var _installerZip = _interopRequireDefault(require("@electron-forge/installer-zip"));

var _installerDeb = _interopRequireDefault(require("@electron-forge/installer-deb"));

var _installerRpm = _interopRequireDefault(require("@electron-forge/installer-rpm"));

var _installerExe = _interopRequireDefault(require("@electron-forge/installer-exe"));

var _messages = require("../util/messages");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// TODO: replace with a got-based module
// eslint-disable-next-line @typescript-eslint/no-var-requires
const nugget = require('nugget');

const d = (0, _debug.default)('electron-forge:install');
const GITHUB_API = 'https://api.github.com';

class InstallerImpl extends _installerBase.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", 'impl');
  }

}

var _default = async ({
  interactive = false,
  prerelease = false,
  repo,
  chooseAsset
}) => {
  _asyncOra.asyncOra.interactive = interactive;

  if (typeof chooseAsset !== 'function') {
    throw new Error('Expected chooseAsset to be a function in install call');
  }

  let latestRelease;
  let possibleAssets = [];
  await (0, _asyncOra.asyncOra)('Searching for Application', async searchSpinner => {
    if (!repo || !repo.includes('/')) {
      throw new Error('Invalid repository name, must be in the format owner/name');
    }

    d('searching for repo:', repo);
    let releases;

    try {
      releases = await (await (0, _nodeFetch.default)(`${GITHUB_API}/repos/${repo}/releases`)).json();
    } catch (err) {// Ignore error
    } // TODO: fix up the type so that errors are handled correctly
    // eslint-disable-next-line @typescript-eslint/no-explicit-any


    if (!releases || releases.message === 'Not Found' || !Array.isArray(releases)) {
      throw new Error(`Failed to find releases for repository "${repo}".  Please check the name and try again.`);
    }

    if (releases.length === 0) {
      throw new Error(`Repository "${repo}" has no releases`);
    }

    releases = releases.filter(release => !release.prerelease || prerelease);
    const sortedReleases = releases.sort((releaseA, releaseB) => {
      let tagA = releaseA.tag_name;
      if (tagA.substr(0, 1) === 'v') tagA = tagA.substr(1);
      let tagB = releaseB.tag_name;
      if (tagB.substr(0, 1) === 'v') tagB = tagB.substr(1);
      return _semver.default.gt(tagB, tagA) ? 1 : -1;
    }); // eslint-disable-next-line prefer-destructuring

    latestRelease = sortedReleases[0];
    searchSpinner.text = 'Searching for Releases';
    const {
      assets
    } = latestRelease;

    if (!assets || !Array.isArray(assets) || assets.length === 0) {
      throw new Error('Could not find any assets for the latest release');
    }

    const installTargets = {
      win32: [/\.exe$/],
      darwin: [/OSX.*\.zip$/, /darwin.*\.zip$/, /macOS.*\.zip$/, /mac.*\.zip$/, /\.dmg$/],
      linux: [/\.rpm$/, /\.deb$/]
    };
    possibleAssets = assets.filter(asset => {
      const targetSuffixes = installTargets[process.platform];

      for (const suffix of targetSuffixes) {
        if (suffix.test(asset.name)) return true;
      }

      return false;
    });

    if (possibleAssets.length === 0) {
      throw new Error(`Failed to find any installable assets for target platform: ${_chalk.default.cyan(`${process.platform}`)}`);
    }
  });
  (0, _messages.info)(interactive, `Found latest release${prerelease ? ' (including prereleases)' : ''}: ${_chalk.default.cyan(latestRelease.tag_name)}`);
  let targetAsset = possibleAssets[0];

  if (possibleAssets.length > 1) {
    targetAsset = await Promise.resolve(chooseAsset(possibleAssets));
  }

  const tmpdir = _path.default.resolve(_os.default.tmpdir(), 'forge-install');

  const pathSafeRepo = repo.replace(/[/\\]/g, '-');
  const filename = `${pathSafeRepo}-${latestRelease.tag_name}-${targetAsset.name}`;

  const fullFilePath = _path.default.resolve(tmpdir, filename);

  if (!(await _fsExtra.default.pathExists(fullFilePath)) || (await _fsExtra.default.stat(fullFilePath)).size !== targetAsset.size) {
    await _fsExtra.default.mkdirs(tmpdir);
    const nuggetOpts = {
      target: filename,
      dir: tmpdir,
      resume: true,
      strictSSL: true
    };
    await (0, _util.promisify)(nugget)(targetAsset.browser_download_url, nuggetOpts);
  }

  await (0, _asyncOra.asyncOra)('Installing Application', async installSpinner => {
    const installActions = {
      win32: {
        '.exe': _installerExe.default
      },
      darwin: {
        '.zip': _installerZip.default,
        '.dmg': _installerDmg.default
      },
      linux: {
        '.deb': _installerDeb.default,
        '.rpm': _installerRpm.default
      }
    };
    const suffixFnIdent = Object.keys(installActions[process.platform]).find(suffix => targetAsset.name.endsWith(suffix));

    if (!suffixFnIdent) {
      throw new Error(`No installer to handle "${targetAsset.name}"`);
    }

    const InstallerClass = installActions[process.platform][suffixFnIdent];
    const installer = new InstallerClass();
    await installer.install({
      installSpinner,
      filePath: fullFilePath
    });
  });
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvaW5zdGFsbC50cyJdLCJuYW1lcyI6WyJudWdnZXQiLCJyZXF1aXJlIiwiZCIsIkdJVEhVQl9BUEkiLCJJbnN0YWxsZXJJbXBsIiwiSW5zdGFsbGVyQmFzZSIsImludGVyYWN0aXZlIiwicHJlcmVsZWFzZSIsInJlcG8iLCJjaG9vc2VBc3NldCIsImFzeW5jT3JhIiwiRXJyb3IiLCJsYXRlc3RSZWxlYXNlIiwicG9zc2libGVBc3NldHMiLCJzZWFyY2hTcGlubmVyIiwiaW5jbHVkZXMiLCJyZWxlYXNlcyIsImpzb24iLCJlcnIiLCJtZXNzYWdlIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwiZmlsdGVyIiwicmVsZWFzZSIsInNvcnRlZFJlbGVhc2VzIiwic29ydCIsInJlbGVhc2VBIiwicmVsZWFzZUIiLCJ0YWdBIiwidGFnX25hbWUiLCJzdWJzdHIiLCJ0YWdCIiwic2VtdmVyIiwiZ3QiLCJ0ZXh0IiwiYXNzZXRzIiwiaW5zdGFsbFRhcmdldHMiLCJ3aW4zMiIsImRhcndpbiIsImxpbnV4IiwiYXNzZXQiLCJ0YXJnZXRTdWZmaXhlcyIsInByb2Nlc3MiLCJwbGF0Zm9ybSIsInN1ZmZpeCIsInRlc3QiLCJuYW1lIiwiY2hhbGsiLCJjeWFuIiwidGFyZ2V0QXNzZXQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRtcGRpciIsInBhdGgiLCJvcyIsInBhdGhTYWZlUmVwbyIsInJlcGxhY2UiLCJmaWxlbmFtZSIsImZ1bGxGaWxlUGF0aCIsImZzIiwicGF0aEV4aXN0cyIsInN0YXQiLCJzaXplIiwibWtkaXJzIiwibnVnZ2V0T3B0cyIsInRhcmdldCIsImRpciIsInJlc3VtZSIsInN0cmljdFNTTCIsImJyb3dzZXJfZG93bmxvYWRfdXJsIiwiaW5zdGFsbFNwaW5uZXIiLCJpbnN0YWxsQWN0aW9ucyIsIkV4ZUluc3RhbGxlciIsIlppcEluc3RhbGxlciIsIkRNR0luc3RhbGxlciIsIkRlYkluc3RhbGxlciIsIlJQTUluc3RhbGxlciIsInN1ZmZpeEZuSWRlbnQiLCJPYmplY3QiLCJrZXlzIiwiZmluZCIsImVuZHNXaXRoIiwiSW5zdGFsbGVyQ2xhc3MiLCJpbnN0YWxsZXIiLCJpbnN0YWxsIiwiZmlsZVBhdGgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOzs7Ozs7QUFFQTtBQUNBO0FBQ0EsTUFBTUEsTUFBTSxHQUFHQyxPQUFPLENBQUMsUUFBRCxDQUF0Qjs7QUFFQSxNQUFNQyxDQUFDLEdBQUcsb0JBQU0sd0JBQU4sQ0FBVjtBQUVBLE1BQU1DLFVBQVUsR0FBRyx3QkFBbkI7O0FBRUEsTUFBTUMsYUFBTixTQUE0QkMsc0JBQTVCLENBQTBDO0FBQUE7QUFBQTs7QUFBQSxrQ0FDakMsTUFEaUM7QUFBQTs7QUFBQTs7ZUF1QzNCLE9BQU87QUFBRUMsRUFBQUEsV0FBVyxHQUFHLEtBQWhCO0FBQXVCQyxFQUFBQSxVQUFVLEdBQUcsS0FBcEM7QUFBMkNDLEVBQUFBLElBQTNDO0FBQWlEQyxFQUFBQTtBQUFqRCxDQUFQLEtBQXlHO0FBQ3RIQyxxQkFBU0osV0FBVCxHQUF1QkEsV0FBdkI7O0FBRUEsTUFBSSxPQUFPRyxXQUFQLEtBQXVCLFVBQTNCLEVBQXVDO0FBQ3JDLFVBQU0sSUFBSUUsS0FBSixDQUFVLHVEQUFWLENBQU47QUFDRDs7QUFFRCxNQUFJQyxhQUFKO0FBQ0EsTUFBSUMsY0FBdUIsR0FBRyxFQUE5QjtBQUVBLFFBQU0sd0JBQVMsMkJBQVQsRUFBc0MsTUFBT0MsYUFBUCxJQUF5QjtBQUNuRSxRQUFJLENBQUNOLElBQUQsSUFBUyxDQUFDQSxJQUFJLENBQUNPLFFBQUwsQ0FBYyxHQUFkLENBQWQsRUFBa0M7QUFDaEMsWUFBTSxJQUFJSixLQUFKLENBQVUsMkRBQVYsQ0FBTjtBQUNEOztBQUVEVCxJQUFBQSxDQUFDLENBQUMscUJBQUQsRUFBd0JNLElBQXhCLENB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LFFBQVEsRUFBRTNCO0FBQTVCLEtBQWxCLENBQU47QUFDRCxHQTFCSyxDQUFOO0FBMkJELEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3luY09yYSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9hc3luYy1vcmEnO1xuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgZmV0Y2ggZnJvbSAnbm9kZS1mZXRjaCc7XG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IG9zIGZyb20gJ29zJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgcHJvbWlzaWZ5IH0gZnJvbSAndXRpbCc7XG5pbXBvcnQgc2VtdmVyIGZyb20gJ3NlbXZlcic7XG5cbmltcG9ydCBJbnN0YWxsZXJCYXNlIGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9pbnN0YWxsZXItYmFzZSc7XG5pbXBvcnQgRE1HSW5zdGFsbGVyIGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9pbnN0YWxsZXItZG1nJztcbmltcG9ydCBaaXBJbnN0YWxsZXIgZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2luc3RhbGxlci16aXAnO1xuaW1wb3J0IERlYkluc3RhbGxlciBmcm9tICdAZWxlY3Ryb24tZm9yZ2UvaW5zdGFsbGVyLWRlYic7XG5pbXBvcnQgUlBNSW5zdGFsbGVyIGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9pbnN0YWxsZXItcnBtJztcbmltcG9ydCBFeGVJbnN0YWxsZXIgZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2luc3RhbGxlci1leGUnO1xuXG5pbXBvcnQgeyBpbmZvIH0gZnJvbSAnLi4vdXRpbC9tZXNzYWdlcyc7XG5cbi8vIFRPRE86IHJlcGxhY2Ugd2l0aCBhIGdvdC1iYXNlZCBtb2R1bGVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzXG5jb25zdCBudWdnZXQgPSByZXF1aXJlKCdudWdnZXQnKTtcblxuY29uc3QgZCA9IGRlYnVnKCdlbGVjdHJvbi1mb3JnZTppbnN0YWxsJyk7XG5cbmNvbnN0IEdJVEhVQl9BUEkgPSAnaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbSc7XG5cbmNsYXNzIEluc3RhbGxlckltcGwgZXh0ZW5kcyBJbnN0YWxsZXJCYXNlIHtcbiAgbmFtZSA9ICdpbXBsJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBc3NldCB7XG4gIGlkOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgc2l6ZTogbnVtYmVyO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG4gIGJyb3dzZXJfZG93bmxvYWRfdXJsOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBSZWxlYXNlIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuICB0YWdfbmFtZTogc3RyaW5nO1xuICBwcmVyZWxlYXNlOiBib29sZWFuO1xuICBhc3NldHM6IEFzc2V0W107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5zdGFsbE9wdGlvbnMge1xuICAvKipcbiAgICogV2hldGhlciB0byB1c2Ugc2Vuc2libGUgZGVmYXVsdHMgb3IgcHJvbXB0IHRoZSB1c2VyIHZpc3VhbGx5XG4gICAqL1xuICBpbnRlcmFjdGl2ZT86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGluc3RhbGwgcHJlcmVsZWFzZSB2ZXJzaW9uc1xuICAgKi9cbiAgcHJlcmVsZWFzZT86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBUaGUgR2l0SHViIHJlcG9zaXRvcnkgdG8gaW5zdGFsbCBmcm9tLCBpbiB0aGUgZm9ybWF0IG93bmVyL25hbWVcbiAgICovXG4gIHJlcG86IHN0cmluZztcbiAgLyoqXG4gICAqIEEgZnVuY3Rpb24gdGhhdCBtdXN0IHJldHVybiB0aGUgYXNzZXQgdG8gdXNlL2luc3RhbGwgZnJvbSBhIHByb3ZpZGVkIGFycmF5IG9mIGNvbXBhdGlibGVcbiAgICogR2l0SHViIGFzc2V0cy5cbiAgICovXG4gIGNob29zZUFzc2V0OiAoYXNzZXRzOiBBc3NldFtdKSA9PiBQcm9taXNlPEFzc2V0PiB8IEFzc2V0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoeyBpbnRlcmFjdGl2ZSA9IGZhbHNlLCBwcmVyZWxlYXNlID0gZmFsc2UsIHJlcG8sIGNob29zZUFzc2V0IH06IEluc3RhbGxPcHRpb25zKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGFzeW5jT3JhLmludGVyYWN0aXZlID0gaW50ZXJhY3RpdmU7XG5cbiAgaWYgKHR5cGVvZiBjaG9vc2VBc3NldCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgY2hvb3NlQXNzZXQgdG8gYmUgYSBmdW5jdGlvbiBpbiBpbnN0YWxsIGNhbGwnKTtcbiAgfVxuXG4gIGxldCBsYXRlc3RSZWxlYXNlITogUmVsZWFzZTtcbiAgbGV0IHBvc3NpYmxlQXNzZXRzOiBBc3NldFtdID0gW107XG5cbiAgYXdhaXQgYXN5bmNPcmEoJ1NlYXJjaGluZyBmb3IgQXBwbGljYXRpb24nLCBhc3luYyAoc2VhcmNoU3Bpbm5lcikgPT4ge1xuICAgIGlmICghcmVwbyB8fCAhcmVwby5pbmNsdWRlcygnLycpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcmVwb3NpdG9yeSBuYW1lLCBtdXN0IGJlIGluIHRoZSBmb3JtYXQgb3duZXIvbmFtZScpO1xuICAgIH1cblxuICAgIGQoJ3NlYXJjaGluZyBmb3IgcmVwbzonLCByZXBvKTtcbiAgICBsZXQgcmVsZWFzZXMhOiBSZWxlYXNlW107XG4gICAgdHJ5IHtcbiAgICAgIHJlbGVhc2VzID0gYXdhaXQgKGF3YWl0IGZldGNoKGAke0dJVEhVQl9BUEl9L3JlcG9zLyR7cmVwb30vcmVsZWFzZXNgKSkuanNvbigpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy8gSWdub3JlIGVycm9yXG4gICAgfVxuXG4gICAgLy8gVE9ETzogZml4IHVwIHRoZSB0eXBlIHNvIHRoYXQgZXJyb3JzIGFyZSBoYW5kbGVkIGNvcnJlY3RseVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgaWYgKCFyZWxlYXNlcyB8fCAocmVsZWFzZXMgYXMgYW55KS5tZXNzYWdlID09PSAnTm90IEZvdW5kJyB8fCAhQXJyYXkuaXNBcnJheShyZWxlYXNlcykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGZpbmQgcmVsZWFzZXMgZm9yIHJlcG9zaXRvcnkgXCIke3JlcG99XCIuICBQbGVhc2UgY2hlY2sgdGhlIG5hbWUgYW5kIHRyeSBhZ2Fpbi5gKTtcbiAgICB9XG5cbiAgICBpZiAocmVsZWFzZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFJlcG9zaXRvcnkgXCIke3JlcG99XCIgaGFzIG5vIHJlbGVhc2VzYCk7XG4gICAgfVxuXG4gICAgcmVsZWFzZXMgPSByZWxlYXNlcy5maWx0ZXIoKHJlbGVhc2UpID0+ICFyZWxlYXNlLnByZXJlbGVhc2UgfHwgcHJlcmVsZWFzZSk7XG5cbiAgICBjb25zdCBzb3J0ZWRSZWxlYXNlcyA9IHJlbGVhc2VzLnNvcnQoKHJlbGVhc2VBLCByZWxlYXNlQikgPT4ge1xuICAgICAgbGV0IHRhZ0EgPSByZWxlYXNlQS50YWdfbmFtZTtcbiAgICAgIGlmICh0YWdBLnN1YnN0cigwLCAxKSA9PT0gJ3YnKSB0YWdBID0gdGFnQS5zdWJzdHIoMSk7XG4gICAgICBsZXQgdGFnQiA9IHJlbGVhc2VCLnRhZ19uYW1lO1xuICAgICAgaWYgKHRhZ0Iuc3Vic3RyKDAsIDEpID09PSAndicpIHRhZ0IgPSB0YWdCLnN1YnN0cigxKTtcbiAgICAgIHJldHVybiBzZW12ZXIuZ3QodGFnQiwgdGFnQSkgPyAxIDogLTE7XG4gICAgfSk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgbGF0ZXN0UmVsZWFzZSA9IHNvcnRlZFJlbGVhc2VzWzBdO1xuXG4gICAgc2VhcmNoU3Bpbm5lci50ZXh0ID0gJ1NlYXJjaGluZyBmb3IgUmVsZWFzZXMnO1xuXG4gICAgY29uc3QgeyBhc3NldHMgfSA9IGxhdGVzdFJlbGVhc2U7XG4gICAgaWYgKCFhc3NldHMgfHwgIUFycmF5LmlzQXJyYXkoYXNzZXRzKSB8fCBhc3NldHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIGFueSBhc3NldHMgZm9yIHRoZSBsYXRlc3QgcmVsZWFzZScpO1xuICAgIH1cblxuICAgIGNvbnN0IGluc3RhbGxUYXJnZXRzOiB7XG4gICAgICBba2V5OiBzdHJpbmddOiBSZWdFeHBbXTtcbiAgICB9ID0ge1xuICAgICAgd2luMzI6IFsvXFwuZXhlJC9dLFxuICAgICAgZGFyd2luOiBbL09TWC4qXFwuemlwJC8sIC9kYXJ3aW4uKlxcLnppcCQvLCAvbWFjT1MuKlxcLnppcCQvLCAvbWFjLipcXC56aXAkLywgL1xcLmRtZyQvXSxcbiAgICAgIGxpbnV4OiBbL1xcLnJwbSQvLCAvXFwuZGViJC9dLFxuICAgIH07XG5cbiAgICBwb3NzaWJsZUFzc2V0cyA9IGFzc2V0cy5maWx0ZXIoKGFzc2V0KSA9PiB7XG4gICAgICBjb25zdCB0YXJnZXRTdWZmaXhlcyA9IGluc3RhbGxUYXJnZXRzW3Byb2Nlc3MucGxhdGZvcm1dO1xuICAgICAgZm9yIChjb25zdCBzdWZmaXggb2YgdGFyZ2V0U3VmZml4ZXMpIHtcbiAgICAgICAgaWYgKHN1ZmZpeC50ZXN0KGFzc2V0Lm5hbWUpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcblxuICAgIGlmIChwb3NzaWJsZUFzc2V0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGZpbmQgYW55IGluc3RhbGxhYmxlIGFzc2V0cyBmb3IgdGFyZ2V0IHBsYXRmb3JtOiAke2NoYWxrLmN5YW4oYCR7cHJvY2Vzcy5wbGF0Zm9ybX1gKX1gKTtcbiAgICB9XG4gIH0pO1xuXG4gIGluZm8oaW50ZXJhY3RpdmUsIGBGb3VuZCBsYXRlc3QgcmVsZWFzZSR7cHJlcmVsZWFzZSA/ICcgKGluY2x1ZGluZyBwcmVyZWxlYXNlcyknIDogJyd9OiAke2NoYWxrLmN5YW4obGF0ZXN0UmVsZWFzZS50YWdfbmFtZSl9YCk7XG5cbiAgbGV0IHRhcmdldEFzc2V0ID0gcG9zc2libGVBc3NldHNbMF07XG4gIGlmIChwb3NzaWJsZUFzc2V0cy5sZW5ndGggPiAxKSB7XG4gICAgdGFyZ2V0QXNzZXQgPSBhd2FpdCBQcm9taXNlLnJlc29sdmUoY2hvb3NlQXNzZXQocG9zc2libGVBc3NldHMpKTtcbiAgfVxuXG4gIGNvbnN0IHRtcGRpciA9IHBhdGgucmVzb2x2ZShvcy50bXBkaXIoKSwgJ2ZvcmdlLWluc3RhbGwnKTtcbiAgY29uc3QgcGF0aFNhZmVSZXBvID0gcmVwby5yZXBsYWNlKC9bL1xcXFxdL2csICctJyk7XG4gIGNvbnN0IGZpbGVuYW1lID0gYCR7cGF0aFNhZmVSZXBvfS0ke2xhdGVzdFJlbGVhc2UudGFnX25hbWV9LSR7dGFyZ2V0QXNzZXQubmFtZX1gO1xuXG4gIGNvbnN0IGZ1bGxGaWxlUGF0aCA9IHBhdGgucmVzb2x2ZSh0bXBkaXIsIGZpbGVuYW1lKTtcbiAgaWYgKCEoYXdhaXQgZnMucGF0aEV4aXN0cyhmdWxsRmlsZVBhdGgpKSB8fCAoYXdhaXQgZnMuc3RhdChmdWxsRmlsZVBhdGgpKS5zaXplICE9PSB0YXJnZXRBc3NldC5zaXplKSB7XG4gICAgYXdhaXQgZnMubWtkaXJzKHRtcGRpcik7XG5cbiAgICBjb25zdCBudWdnZXRPcHRzID0ge1xuICAgICAgdGFyZ2V0OiBmaWxlbmFtZSxcbiAgICAgIGRpcjogdG1wZGlyLFxuICAgICAgcmVzdW1lOiB0cnVlLFxuICAgICAgc3RyaWN0U1NMOiB0cnVlLFxuICAgIH07XG4gICAgYXdhaXQgcHJvbWlzaWZ5KG51Z2dldCkodGFyZ2V0QXNzZXQuYnJvd3Nlcl9kb3dubG9hZF91cmwsIG51Z2dldE9wdHMpO1xuICB9XG5cbiAgYXdhaXQgYXN5bmNPcmEoJ0luc3RhbGxpbmcgQXBwbGljYXRpb24nLCBhc3luYyAoaW5zdGFsbFNwaW5uZXIpID0+IHtcbiAgICBjb25zdCBpbnN0YWxsQWN0aW9uczoge1xuICAgICAgW2tleTogc3RyaW5nXToge1xuICAgICAgICBba2V5OiBzdHJpbmddOiB0eXBlb2YgSW5zdGFsbGVySW1wbDtcbiAgICAgIH07XG4gICAgfSA9IHtcbiAgICAgIHdpbjMyOiB7XG4gICAgICAgICcuZXhlJzogRXhlSW5zdGFsbGVyLFxuICAgICAgfSxcbiAgICAgIGRhcndpbjoge1xuICAgICAgICAnLnppcCc6IFppcEluc3RhbGxlcixcbiAgICAgICAgJy5kbWcnOiBETUdJbnN0YWxsZXIsXG4gICAgICB9LFxuICAgICAgbGludXg6IHtcbiAgICAgICAgJy5kZWInOiBEZWJJbnN0YWxsZXIsXG4gICAgICAgICcucnBtJzogUlBNSW5zdGFsbGVyLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgY29uc3Qgc3VmZml4Rm5JZGVudCA9IE9iamVjdC5rZXlzKGluc3RhbGxBY3Rpb25zW3Byb2Nlc3MucGxhdGZvcm1dKS5maW5kKChzdWZmaXgpID0+IHRhcmdldEFzc2V0Lm5hbWUuZW5kc1dpdGgoc3VmZml4KSk7XG4gICAgaWYgKCFzdWZmaXhGbklkZW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIGluc3RhbGxlciB0byBoYW5kbGUgXCIke3RhcmdldEFzc2V0Lm5hbWV9XCJgKTtcbiAgICB9XG4gICAgY29uc3QgSW5zdGFsbGVyQ2xhc3MgPSBpbnN0YWxsQWN0aW9uc1twcm9jZXNzLnBsYXRmb3JtXVtzdWZmaXhGbklkZW50XTtcbiAgICBjb25zdCBpbnN0YWxsZXIgPSBuZXcgSW5zdGFsbGVyQ2xhc3MoKTtcbiAgICBhd2FpdCBpbnN0YWxsZXIuaW5zdGFsbCh7IGluc3RhbGxTcGlubmVyLCBmaWxlUGF0aDogZnVsbEZpbGVQYXRoIH0pO1xuICB9KTtcbn07XG4iXX0=