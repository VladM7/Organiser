"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "StartOptions", {
  enumerable: true,
  get: function () {
    return _sharedTypes.StartOptions;
  }
});
exports.default = void 0;

require("source-map-support/register");

require("colors");

var _asyncOra = require("@electron-forge/async-ora");

var _sharedTypes = require("@electron-forge/shared-types");

var _path = _interopRequireDefault(require("path"));

var _child_process = require("child_process");

var _readPackageJson = require("../util/read-package-json");

var _rebuild = _interopRequireDefault(require("../util/rebuild"));

var _resolveDir = _interopRequireDefault(require("../util/resolve-dir"));

var _forgeConfig = _interopRequireDefault(require("../util/forge-config"));

var _hook = require("../util/hook");

var _electronVersion = require("../util/electron-version");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = async ({
  dir = process.cwd(),
  appPath = '.',
  interactive = false,
  enableLogging = false,
  args = [],
  runAsNode = false,
  inspect = false
}) => {
  _asyncOra.asyncOra.interactive = interactive;
  await (0, _asyncOra.asyncOra)('Locating Application', async () => {
    const resolvedDir = await (0, _resolveDir.default)(dir);

    if (!resolvedDir) {
      throw new Error('Failed to locate startable Electron application');
    }

    dir = resolvedDir;
  });
  const forgeConfig = await (0, _forgeConfig.default)(dir);
  const packageJSON = await (0, _readPackageJson.readMutatedPackageJson)(dir, forgeConfig);

  if (!packageJSON.version) {
    throw new Error(`Please set your application's 'version' in '${dir}/package.json'.`);
  }

  await (0, _rebuild.default)(dir, await (0, _electronVersion.getElectronVersion)(dir, packageJSON), process.platform, process.arch, forgeConfig.electronRebuildConfig);
  await (0, _hook.runHook)(forgeConfig, 'generateAssets');
  let lastSpawned = null;

  const forgeSpawn = async () => {
    let electronExecPath = null; // If a plugin has taken over the start command let's stop here

    const spawnedPluginChild = await forgeConfig.pluginInterface.overrideStartLogic({
      dir,
      appPath,
      interactive,
      enableLogging,
      args,
      runAsNode,
      inspect
    });
    let prefixArgs = [];

    if (typeof spawnedPluginChild === 'string') {
      electronExecPath = spawnedPluginChild;
    } else if (Array.isArray(spawnedPluginChild)) {
      [electronExecPath, ...prefixArgs] = spawnedPluginChild;
    } else if (spawnedPluginChild) {
      await (0, _hook.runHook)(forgeConfig, 'postStart', spawnedPluginChild);
      return spawnedPluginChild;
    }

    if (!electronExecPath) {
      // eslint-disable-next-line import/no-dynamic-require, global-require
      electronExecPath = require((await (0, _electronVersion.getElectronModulePath)(dir, packageJSON)) || _path.default.resolve(dir, 'node_modules/electron'));
    }

    const spawnOpts = {
      cwd: dir,
      stdio: 'inherit',
      env: { ...process.env,
        ...(enableLogging ? {
          ELECTRON_ENABLE_LOGGING: 'true',
          ELECTRON_ENABLE_STACK_DUMPING: 'true'
        } : {})
      }
    };

    if (runAsNode) {
      spawnOpts.env.ELECTRON_RUN_AS_NODE = 'true';
    } else {
      delete spawnOpts.env.ELECTRON_RUN_AS_NODE;
    }

    if (inspect) {
      args = ['--inspect'].concat(args);
    }

    let spawned;
    await (0, _asyncOra.asyncOra)('Launching Application', async () => {
      spawned = (0, _child_process.spawn)(electronExecPath, prefixArgs.concat([appPath]).concat(args), spawnOpts);
    });
    await (0, _hook.runHook)(forgeConfig, 'postStart', spawned);
    return spawned;
  };

  const forgeSpawnWrapper = async () => {
    const spawned = await forgeSpawn(); // When the child app is closed we should stop listening for stdin

    if (spawned) {
      if (interactive && process.stdin.isPaused()) {
        process.stdin.resume();
      }

      spawned.on('exit', () => {
        if (spawned.restarted) return;
        if (!process.stdin.isPaused()) process.stdin.pause();
      });
    } else if (interactive && !process.stdin.isPaused()) {
      process.stdin.pause();
    }

    lastSpawned = spawned;
    return lastSpawned;
  };

  if (interactive) {
    process.stdin.on('data', async data => {
      if (data.toString().trim() === 'rs' && lastSpawned) {
        // eslint-disable-next-line no-console
        console.info('\nRestarting App\n'.cyan);
        lastSpawned.restarted = true;
        lastSpawned.kill('SIGTERM');
        lastSpawned.emit('restarted', await forgeSpawnWrapper());
      }
    });
  }

  return forgeSpawnWrapper();
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,