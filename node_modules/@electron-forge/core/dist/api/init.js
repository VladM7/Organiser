"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _asyncOra = require("@electron-forge/async-ora");

var _debug = _interopRequireDefault(require("debug"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _semver = _interopRequireDefault(require("semver"));

var _findTemplate = _interopRequireDefault(require("./init-scripts/find-template"));

var _initDirectory = _interopRequireDefault(require("./init-scripts/init-directory"));

var _initGit = _interopRequireDefault(require("./init-scripts/init-git"));

var _initNpm = _interopRequireDefault(require("./init-scripts/init-npm"));

var _installDependencies = _interopRequireWildcard(require("../util/install-dependencies"));

var _readPackageJson = require("../util/read-package-json");

var _forgeConfig = require("../util/forge-config");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const d = (0, _debug.default)('electron-forge:init');

async function validateTemplate(template, templateModule) {
  if (!templateModule.requiredForgeVersion) {
    throw new Error(`Cannot use a template (${template}) with this version of Electron Forge, as it does not specify its required Forge version.`);
  }

  const forgeVersion = (await (0, _readPackageJson.readRawPackageJson)(_path.default.join(__dirname, '..', '..'))).version;

  if (!_semver.default.satisfies(forgeVersion, templateModule.requiredForgeVersion)) {
    throw new Error(`Template (${template}) is not compatible with this version of Electron Forge (${forgeVersion}), it requires ${templateModule.requiredForgeVersion}`);
  }
}

var _default = async ({
  dir = process.cwd(),
  interactive = false,
  copyCIFiles = false,
  force = false,
  template = 'base'
}) => {
  _asyncOra.asyncOra.interactive = interactive;
  d(`Initializing in: ${dir}`);
  await (0, _initDirectory.default)(dir, force);
  await (0, _initGit.default)(dir);
  const templateModule = await (0, _findTemplate.default)(dir, template);
  await validateTemplate(template, templateModule);

  if (typeof templateModule.initializeTemplate === 'function') {
    await templateModule.initializeTemplate(dir, {
      copyCIFiles
    });
    const packageJSON = await (0, _readPackageJson.readRawPackageJson)(dir);
    (0, _forgeConfig.setInitialForgeConfig)(packageJSON);
    await _fsExtra.default.writeJson(_path.default.join(dir, 'package.json'), packageJSON, {
      spaces: 2
    });
  }

  await (0, _asyncOra.asyncOra)('Installing Template Dependencies', async () => {
    d('installing dependencies');
    await (0, _installDependencies.default)(dir, templateModule.dependencies || []);
    d('installing devDependencies');
    await (0, _installDependencies.default)(dir, templateModule.devDependencies || [], _installDependencies.DepType.DEV);
  });
  await (0, _initNpm.default)(dir);
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvaW5pdC50cyJdLCJuYW1lcyI6WyJkIiwidmFsaWRhdGVUZW1wbGF0ZSIsInRlbXBsYXRlIiwidGVtcGxhdGVNb2R1bGUiLCJyZXF1aXJlZEZvcmdlVmVyc2lvbiIsIkVycm9yIiwiZm9yZ2VWZXJzaW9uIiwicGF0aCIsImpvaW4iLCJfX2Rpcm5hbWUiLCJ2ZXJzaW9uIiwic2VtdmVyIiwic2F0aXNmaWVzIiwiZGlyIiwicHJvY2VzcyIsImN3ZCIsImludGVyYWN0aXZlIiwiY29weUNJRmlsZXMiLCJmb3JjZSIsImFzeW5jT3JhIiwiaW5pdGlhbGl6ZVRlbXBsYXRlIiwicGFja2FnZUpTT04iLCJmcyIsIndyaXRlSnNvbiIsInNwYWNlcyIsImRlcGVuZGVuY2llcyIsImRldkRlcGVuZGVuY2llcyIsIkRlcFR5cGUiLCJERVYiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7OztBQUVBLE1BQU1BLENBQUMsR0FBRyxvQkFBTSxxQkFBTixDQUFWOztBQXlCQSxlQUFlQyxnQkFBZixDQUFnQ0MsUUFBaEMsRUFBa0RDLGNBQWxELEVBQWdHO0FBQzlGLE1BQUksQ0FBQ0EsY0FBYyxDQUFDQyxvQkFBcEIsRUFBMEM7QUFDeEMsVUFBTSxJQUFJQyxLQUFKLENBQVcsMEJBQXlCSCxRQUFTLDJGQUE3QyxDQUFOO0FBQ0Q7O0FBRUQsUUFBTUksWUFBWSxHQUFHLENBQUMsTUFBTSx5Q0FBbUJDLGNBQUtDLElBQUwsQ0FBVUMsU0FBVixFQUFxQixJQUFyQixFQUEyQixJQUEzQixDQUFuQixDQUFQLEVBQTZEQyxPQUFsRjs7QUFDQSxNQUFJLENBQUNDLGdCQUFPQyxTQUFQLENBQWlCTixZQUFqQixFQUErQkgsY0FBYyxDQUFDQyxvQkFBOUMsQ0FBTCxFQUEwRTtBQUN4RSxVQUFNLElBQUlDLEtBQUosQ0FBVyxhQUFZSCxRQUFTLDREQUEyREksWUFBYSxrQkFBaUJILGNBQWMsQ0FBQ0Msb0JBQXFCLEVBQTdKLENBQU47QUFDRDtBQUNGOztlQUVjLE9BQU87QUFDcEJTLEVBQUFBLEdBQUcsR0FBR0MsT0FBTyxDQUFDQyxHQUFSLEVBRGM7QUFFcEJDLEVBQUFBLFdBQVcsR0FBRyxLQUZNO0FBR3BCQyxFQUFBQSxXQUFXLEdBQUcsS0FITTtBQUlwQkMsRUFBQUEsS0FBSyxHQUFHLEtBSlk7QUFLcEJoQixFQUFBQSxRQUFRLEdBQUc7QUFMUyxDQUFQLEtBTUk7QUFDakJpQixxQkFBU0gsV0FBVCxHQUF1QkEsV0FBdkI7QUFFQWhCLEVBQUFBLENBQUMsQ0FBRSxvQkFBbUJhLEdBQUksRUFBekIsQ0FBRDtBQUVBLFFBQU0sNEJBQWNBLEdBQWQsRUFBbUJLLEtBQW5CLENBQU47QUFDQSxRQUFNLHNCQUFRTCxHQUFSLENBQU47QUFDQSxRQUFNVixjQUFjLEdBQUcsTUFBTSwyQkFBYVUsR0FBYixFQUFrQlgsUUFBbEIsQ0FBN0I7QUFFQSxRQUFNRCxnQkFBZ0IsQ0FBQ0MsUUFBRCxFQUFXQyxjQUFYLENBQXRCOztBQUVBLE1BQUksT0FBT0EsY0FBYyxDQUFDaUIsa0JBQXRCLEtBQTZDLFVBQWpELEVBQTZEO0FBQzNELFVBQU1qQixjQUFjLENBQUNpQixrQkFBZixDQUFrQ1AsR0FBbEMsRUFBdUM7QUFBRUksTUFBQUE7QUFBRixLQUF2QyxDQUFOO0FBQ0EsVUFBTUksV0FBVyxHQUFHLE1BQU0seUNBQW1CUixHQUFuQixDQUExQjtBQUNBLDRDQUFzQlEsV0FBdEI7QUFDQSxVQUFNQyxpQkFBR0MsU0FBSCxDQUFhaEIsY0FBS0MsSUFBTCxDQUFVSyxHQUFWLEVBQWUsY0FBZixDQUFiLEVBQTZDUSxXQUE3QyxFQUEwRDtBQUFFRyxNQUFBQSxNQUFNLEVBQUU7QUFBVixLQUExRCxDQUFOO0FBQ0Q7O0FBRUQsUUFBTSx3QkFBUyxrQ0FBVCxFQUE2QyxZQUFZO0FBQzdEeEIsSUFBQUEsQ0FBQyxDQUFDLHlCQUFELENBQUQ7QUFDQSxVQUFNLGtDQUFlYSxHQUFmLEVBQW9CVixjQUFjLENBQUNzQixZQUFmLElBQStCLEVBQW5ELENBQU47QUFDQXpCLElBQUFBLENBQUMsQ0FBQyw0QkFBRCxDQUFEO0FBQ0EsVUFBTSxrQ0FBZWEsR0FBZixFQUFvQlYsY0FBYyxDQUFDdUIsZUFBZixJQUFrQyxFQUF0RCxFQUEwREMsNkJBQVFDLEdBQWxFLENBQU47QUFDRCxHQUxLLENBQU47QUFPQSxRQUFNLHNCQUFRZixHQUFSLENBQU47QUFDRCxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXN5bmNPcmEgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2UvYXN5bmMtb3JhJztcbmltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgeyBGb3JnZVRlbXBsYXRlIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL3NoYXJlZC10eXBlcyc7XG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgc2VtdmVyIGZyb20gJ3NlbXZlcic7XG5cbmltcG9ydCBmaW5kVGVtcGxhdGUgZnJvbSAnLi9pbml0LXNjcmlwdHMvZmluZC10ZW1wbGF0ZSc7XG5pbXBvcnQgaW5pdERpcmVjdG9yeSBmcm9tICcuL2luaXQtc2NyaXB0cy9pbml0LWRpcmVjdG9yeSc7XG5pbXBvcnQgaW5pdEdpdCBmcm9tICcuL2luaXQtc2NyaXB0cy9pbml0LWdpdCc7XG5pbXBvcnQgaW5pdE5QTSBmcm9tICcuL2luaXQtc2NyaXB0cy9pbml0LW5wbSc7XG5pbXBvcnQgaW5zdGFsbERlcExpc3QsIHsgRGVwVHlwZSB9IGZyb20gJy4uL3V0aWwvaW5zdGFsbC1kZXBlbmRlbmNpZXMnO1xuaW1wb3J0IHsgcmVhZFJhd1BhY2thZ2VKc29uIH0gZnJvbSAnLi4vdXRpbC9yZWFkLXBhY2thZ2UtanNvbic7XG5pbXBvcnQgeyBzZXRJbml0aWFsRm9yZ2VDb25maWcgfSBmcm9tICcuLi91dGlsL2ZvcmdlLWNvbmZpZyc7XG5cbmNvbnN0IGQgPSBkZWJ1ZygnZWxlY3Ryb24tZm9yZ2U6aW5pdCcpO1xuXG5leHBvcnQgaW50ZXJmYWNlIEluaXRPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSBwYXRoIHRvIHRoZSBhcHAgdG8gYmUgaW5pdGlhbGl6ZWRcbiAgICovXG4gIGRpcj86IHN0cmluZztcbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gdXNlIHNlbnNpYmxlIGRlZmF1bHRzIG9yIHByb21wdCB0aGUgdXNlciB2aXN1YWxseVxuICAgKi9cbiAgaW50ZXJhY3RpdmU/OiBib29sZWFuO1xuICAvKipcbiAgICogV2hldGhlciB0byBjb3B5IFRyYXZpcyBhbmQgQXBwVmV5b3IgQ0kgZmlsZXNcbiAgICovXG4gIGNvcHlDSUZpbGVzPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gb3ZlcndyaXRlIGFuIGV4aXN0aW5nIGRpcmVjdG9yeVxuICAgKi9cbiAgZm9yY2U/OiBib29sZWFuO1xuICAvKipcbiAgICogVGhlIGN1c3RvbSB0ZW1wbGF0ZSB0byB1c2UuIElmIGxlZnQgZW1wdHksIHRoZSBkZWZhdWx0IHRlbXBsYXRlIGlzIHVzZWRcbiAgICovXG4gIHRlbXBsYXRlPzogc3RyaW5nO1xufVxuXG5hc3luYyBmdW5jdGlvbiB2YWxpZGF0ZVRlbXBsYXRlKHRlbXBsYXRlOiBzdHJpbmcsIHRlbXBsYXRlTW9kdWxlOiBGb3JnZVRlbXBsYXRlKTogUHJvbWlzZTx2b2lkPiB7XG4gIGlmICghdGVtcGxhdGVNb2R1bGUucmVxdWlyZWRGb3JnZVZlcnNpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCB1c2UgYSB0ZW1wbGF0ZSAoJHt0ZW1wbGF0ZX0pIHdpdGggdGhpcyB2ZXJzaW9uIG9mIEVsZWN0cm9uIEZvcmdlLCBhcyBpdCBkb2VzIG5vdCBzcGVjaWZ5IGl0cyByZXF1aXJlZCBGb3JnZSB2ZXJzaW9uLmApO1xuICB9XG5cbiAgY29uc3QgZm9yZ2VWZXJzaW9uID0gKGF3YWl0IHJlYWRSYXdQYWNrYWdlSnNvbihwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4nLCAnLi4nKSkpLnZlcnNpb247XG4gIGlmICghc2VtdmVyLnNhdGlzZmllcyhmb3JnZVZlcnNpb24sIHRlbXBsYXRlTW9kdWxlLnJlcXVpcmVkRm9yZ2VWZXJzaW9uKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVGVtcGxhdGUgKCR7dGVtcGxhdGV9KSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIHRoaXMgdmVyc2lvbiBvZiBFbGVjdHJvbiBGb3JnZSAoJHtmb3JnZVZlcnNpb259KSwgaXQgcmVxdWlyZXMgJHt0ZW1wbGF0ZU1vZHVsZS5yZXF1aXJlZEZvcmdlVmVyc2lvbn1gKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoe1xuICBkaXIgPSBwcm9jZXNzLmN3ZCgpLFxuICBpbnRlcmFjdGl2ZSA9IGZhbHNlLFxuICBjb3B5Q0lGaWxlcyA9IGZhbHNlLFxuICBmb3JjZSA9IGZhbHNlLFxuICB0ZW1wbGF0ZSA9ICdiYXNlJyxcbn06IEluaXRPcHRpb25zKSA9PiB7XG4gIGFzeW5jT3JhLmludGVyYWN0aXZlID0gaW50ZXJhY3RpdmU7XG5cbiAgZChgSW5pdGlhbGl6aW5nIGluOiAke2Rpcn1gKTtcblxuICBhd2FpdCBpbml0RGlyZWN0b3J5KGRpciwgZm9yY2UpO1xuICBhd2FpdCBpbml0R2l0KGRpcik7XG4gIGNvbnN0IHRlbXBsYXRlTW9kdWxlID0gYXdhaXQgZmluZFRlbXBsYXRlKGRpciwgdGVtcGxhdGUpO1xuXG4gIGF3YWl0IHZhbGlkYXRlVGVtcGxhdGUodGVtcGxhdGUsIHRlbXBsYXRlTW9kdWxlKTtcblxuICBpZiAodHlwZW9mIHRlbXBsYXRlTW9kdWxlLmluaXRpYWxpemVUZW1wbGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGF3YWl0IHRlbXBsYXRlTW9kdWxlLmluaXRpYWxpemVUZW1wbGF0ZShkaXIsIHsgY29weUNJRmlsZXMgfSk7XG4gICAgY29uc3QgcGFja2FnZUpTT04gPSBhd2FpdCByZWFkUmF3UGFja2FnZUpzb24oZGlyKTtcbiAgICBzZXRJbml0aWFsRm9yZ2VDb25maWcocGFja2FnZUpTT04pO1xuICAgIGF3YWl0IGZzLndyaXRlSnNvbihwYXRoLmpvaW4oZGlyLCAncGFja2FnZS5qc29uJyksIHBhY2thZ2VKU09OLCB7IHNwYWNlczogMiB9KTtcbiAgfVxuXG4gIGF3YWl0IGFzeW5jT3JhKCdJbnN0YWxsaW5nIFRlbXBsYXRlIERlcGVuZGVuY2llcycsIGFzeW5jICgpID0+IHtcbiAgICBkKCdpbnN0YWxsaW5nIGRlcGVuZGVuY2llcycpO1xuICAgIGF3YWl0IGluc3RhbGxEZXBMaXN0KGRpciwgdGVtcGxhdGVNb2R1bGUuZGVwZW5kZW5jaWVzIHx8IFtdKTtcbiAgICBkKCdpbnN0YWxsaW5nIGRldkRlcGVuZGVuY2llcycpO1xuICAgIGF3YWl0IGluc3RhbGxEZXBMaXN0KGRpciwgdGVtcGxhdGVNb2R1bGUuZGV2RGVwZW5kZW5jaWVzIHx8IFtdLCBEZXBUeXBlLkRFVik7XG4gIH0pO1xuXG4gIGF3YWl0IGluaXROUE0oZGlyKTtcbn07XG4iXX0=