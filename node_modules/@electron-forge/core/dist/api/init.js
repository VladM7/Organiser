"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _asyncOra = require("@electron-forge/async-ora");

var _debug = _interopRequireDefault(require("debug"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _findTemplate = _interopRequireDefault(require("./init-scripts/find-template"));

var _initDirectory = _interopRequireDefault(require("./init-scripts/init-directory"));

var _initGit = _interopRequireDefault(require("./init-scripts/init-git"));

var _initNpm = _interopRequireDefault(require("./init-scripts/init-npm"));

var _installDependencies = _interopRequireWildcard(require("../util/install-dependencies"));

var _readPackageJson = require("../util/read-package-json");

var _forgeConfig = require("../util/forge-config");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const d = (0, _debug.default)('electron-forge:init');

var _default = async ({
  dir = process.cwd(),
  interactive = false,
  copyCIFiles = false,
  force = false,
  template = 'base'
}) => {
  _asyncOra.asyncOra.interactive = interactive;
  d(`Initializing in: ${dir}`);
  await (0, _initDirectory.default)(dir, force);
  await (0, _initGit.default)(dir);
  const templateModule = await (0, _findTemplate.default)(dir, template);

  if (typeof templateModule.initializeTemplate === 'function') {
    await templateModule.initializeTemplate(dir, {
      copyCIFiles
    });
    const packageJSON = await (0, _readPackageJson.readRawPackageJson)(dir);
    (0, _forgeConfig.setInitialForgeConfig)(packageJSON);
    await _fsExtra.default.writeJson(_path.default.join(dir, 'package.json'), packageJSON, {
      spaces: 2
    });
  }

  await (0, _asyncOra.asyncOra)('Installing Template Dependencies', async () => {
    d('installing dependencies');
    await (0, _installDependencies.default)(dir, templateModule.dependencies || []);
    d('installing devDependencies');
    await (0, _installDependencies.default)(dir, templateModule.devDependencies || [], _installDependencies.DepType.DEV);
  });
  await (0, _initNpm.default)(dir);
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvaW5pdC50cyJdLCJuYW1lcyI6WyJkIiwiZGlyIiwicHJvY2VzcyIsImN3ZCIsImludGVyYWN0aXZlIiwiY29weUNJRmlsZXMiLCJmb3JjZSIsInRlbXBsYXRlIiwiYXN5bmNPcmEiLCJ0ZW1wbGF0ZU1vZHVsZSIsImluaXRpYWxpemVUZW1wbGF0ZSIsInBhY2thZ2VKU09OIiwiZnMiLCJ3cml0ZUpzb24iLCJwYXRoIiwiam9pbiIsInNwYWNlcyIsImRlcGVuZGVuY2llcyIsImRldkRlcGVuZGVuY2llcyIsIkRlcFR5cGUiLCJERVYiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7OztBQUVBLE1BQU1BLENBQUMsR0FBRyxvQkFBTSxxQkFBTixDQUFWOztlQXlCZSxPQUFPO0FBQ3BCQyxFQUFBQSxHQUFHLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBUixFQURjO0FBRXBCQyxFQUFBQSxXQUFXLEdBQUcsS0FGTTtBQUdwQkMsRUFBQUEsV0FBVyxHQUFHLEtBSE07QUFJcEJDLEVBQUFBLEtBQUssR0FBRyxLQUpZO0FBS3BCQyxFQUFBQSxRQUFRLEdBQUc7QUFMUyxDQUFQLEtBTUk7QUFDakJDLHFCQUFTSixXQUFULEdBQXVCQSxXQUF2QjtBQUVBSixFQUFBQSxDQUFDLENBQUUsb0JBQW1CQyxHQUFJLEVBQXpCLENBQUQ7QUFFQSxRQUFNLDRCQUFjQSxHQUFkLEVBQW1CSyxLQUFuQixDQUFOO0FBQ0EsUUFBTSxzQkFBUUwsR0FBUixDQUFOO0FBQ0EsUUFBTVEsY0FBYyxHQUFHLE1BQU0sMkJBQWFSLEdBQWIsRUFBa0JNLFFBQWxCLENBQTdCOztBQUVBLE1BQUksT0FBT0UsY0FBYyxDQUFDQyxrQkFBdEIsS0FBNkMsVUFBakQsRUFBNkQ7QUFDM0QsVUFBTUQsY0FBYyxDQUFDQyxrQkFBZixDQUFrQ1QsR0FBbEMsRUFBdUM7QUFBRUksTUFBQUE7QUFBRixLQUF2QyxDQUFOO0FBQ0EsVUFBTU0sV0FBVyxHQUFHLE1BQU0seUNBQW1CVixHQUFuQixDQUExQjtBQUNBLDRDQUFzQlUsV0FBdEI7QUFDQSxVQUFNQyxpQkFBR0MsU0FBSCxDQUFhQyxjQUFLQyxJQUFMLENBQVVkLEdBQVYsRUFBZSxjQUFmLENBQWIsRUFBNkNVLFdBQTdDLEVBQTBEO0FBQUVLLE1BQUFBLE1BQU0sRUFBRTtBQUFWLEtBQTFELENBQU47QUFDRDs7QUFFRCxRQUFNLHdCQUFTLGtDQUFULEVBQTZDLFlBQVk7QUFDN0RoQixJQUFBQSxDQUFDLENBQUMseUJBQUQsQ0FBRDtBQUNBLFVBQU0sa0NBQWVDLEdBQWYsRUFBb0JRLGNBQWMsQ0FBQ1EsWUFBZixJQUErQixFQUFuRCxDQUFOO0FBQ0FqQixJQUFBQSxDQUFDLENBQUMsNEJBQUQsQ0FBRDtBQUNBLFVBQU0sa0NBQWVDLEdBQWYsRUFBb0JRLGNBQWMsQ0FBQ1MsZUFBZixJQUFrQyxFQUF0RCxFQUEwREMsNkJBQVFDLEdBQWxFLENBQU47QUFDRCxHQUxLLENBQU47QUFPQSxRQUFNLHNCQUFRbkIsR0FBUixDQUFOO0FBQ0QsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzeW5jT3JhIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2FzeW5jLW9yYSc7XG5pbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgZmluZFRlbXBsYXRlIGZyb20gJy4vaW5pdC1zY3JpcHRzL2ZpbmQtdGVtcGxhdGUnO1xuaW1wb3J0IGluaXREaXJlY3RvcnkgZnJvbSAnLi9pbml0LXNjcmlwdHMvaW5pdC1kaXJlY3RvcnknO1xuaW1wb3J0IGluaXRHaXQgZnJvbSAnLi9pbml0LXNjcmlwdHMvaW5pdC1naXQnO1xuaW1wb3J0IGluaXROUE0gZnJvbSAnLi9pbml0LXNjcmlwdHMvaW5pdC1ucG0nO1xuaW1wb3J0IGluc3RhbGxEZXBMaXN0LCB7IERlcFR5cGUgfSBmcm9tICcuLi91dGlsL2luc3RhbGwtZGVwZW5kZW5jaWVzJztcbmltcG9ydCB7IHJlYWRSYXdQYWNrYWdlSnNvbiB9IGZyb20gJy4uL3V0aWwvcmVhZC1wYWNrYWdlLWpzb24nO1xuaW1wb3J0IHsgc2V0SW5pdGlhbEZvcmdlQ29uZmlnIH0gZnJvbSAnLi4vdXRpbC9mb3JnZS1jb25maWcnO1xuXG5jb25zdCBkID0gZGVidWcoJ2VsZWN0cm9uLWZvcmdlOmluaXQnKTtcblxuZXhwb3J0IGludGVyZmFjZSBJbml0T3B0aW9ucyB7XG4gIC8qKlxuICAgKiBUaGUgcGF0aCB0byB0aGUgYXBwIHRvIGJlIGluaXRpYWxpemVkXG4gICAqL1xuICBkaXI/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHVzZSBzZW5zaWJsZSBkZWZhdWx0cyBvciBwcm9tcHQgdGhlIHVzZXIgdmlzdWFsbHlcbiAgICovXG4gIGludGVyYWN0aXZlPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gY29weSBUcmF2aXMgYW5kIEFwcFZleW9yIENJIGZpbGVzXG4gICAqL1xuICBjb3B5Q0lGaWxlcz86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIG92ZXJ3cml0ZSBhbiBleGlzdGluZyBkaXJlY3RvcnlcbiAgICovXG4gIGZvcmNlPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFRoZSBjdXN0b20gdGVtcGxhdGUgdG8gdXNlLiBJZiBsZWZ0IGVtcHR5LCB0aGUgZGVmYXVsdCB0ZW1wbGF0ZSBpcyB1c2VkXG4gICAqL1xuICB0ZW1wbGF0ZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKHtcbiAgZGlyID0gcHJvY2Vzcy5jd2QoKSxcbiAgaW50ZXJhY3RpdmUgPSBmYWxzZSxcbiAgY29weUNJRmlsZXMgPSBmYWxzZSxcbiAgZm9yY2UgPSBmYWxzZSxcbiAgdGVtcGxhdGUgPSAnYmFzZScsXG59OiBJbml0T3B0aW9ucykgPT4ge1xuICBhc3luY09yYS5pbnRlcmFjdGl2ZSA9IGludGVyYWN0aXZlO1xuXG4gIGQoYEluaXRpYWxpemluZyBpbjogJHtkaXJ9YCk7XG5cbiAgYXdhaXQgaW5pdERpcmVjdG9yeShkaXIsIGZvcmNlKTtcbiAgYXdhaXQgaW5pdEdpdChkaXIpO1xuICBjb25zdCB0ZW1wbGF0ZU1vZHVsZSA9IGF3YWl0IGZpbmRUZW1wbGF0ZShkaXIsIHRlbXBsYXRlKTtcblxuICBpZiAodHlwZW9mIHRlbXBsYXRlTW9kdWxlLmluaXRpYWxpemVUZW1wbGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGF3YWl0IHRlbXBsYXRlTW9kdWxlLmluaXRpYWxpemVUZW1wbGF0ZShkaXIsIHsgY29weUNJRmlsZXMgfSk7XG4gICAgY29uc3QgcGFja2FnZUpTT04gPSBhd2FpdCByZWFkUmF3UGFja2FnZUpzb24oZGlyKTtcbiAgICBzZXRJbml0aWFsRm9yZ2VDb25maWcocGFja2FnZUpTT04pO1xuICAgIGF3YWl0IGZzLndyaXRlSnNvbihwYXRoLmpvaW4oZGlyLCAncGFja2FnZS5qc29uJyksIHBhY2thZ2VKU09OLCB7IHNwYWNlczogMiB9KTtcbiAgfVxuXG4gIGF3YWl0IGFzeW5jT3JhKCdJbnN0YWxsaW5nIFRlbXBsYXRlIERlcGVuZGVuY2llcycsIGFzeW5jICgpID0+IHtcbiAgICBkKCdpbnN0YWxsaW5nIGRlcGVuZGVuY2llcycpO1xuICAgIGF3YWl0IGluc3RhbGxEZXBMaXN0KGRpciwgdGVtcGxhdGVNb2R1bGUuZGVwZW5kZW5jaWVzIHx8IFtdKTtcbiAgICBkKCdpbnN0YWxsaW5nIGRldkRlcGVuZGVuY2llcycpO1xuICAgIGF3YWl0IGluc3RhbGxEZXBMaXN0KGRpciwgdGVtcGxhdGVNb2R1bGUuZGV2RGVwZW5kZW5jaWVzIHx8IFtdLCBEZXBUeXBlLkRFVik7XG4gIH0pO1xuXG4gIGF3YWl0IGluaXROUE0oZGlyKTtcbn07XG4iXX0=