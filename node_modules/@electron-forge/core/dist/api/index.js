"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ForgeMakeResult", {
  enumerable: true,
  get: function () {
    return _sharedTypes.ForgeMakeResult;
  }
});
Object.defineProperty(exports, "ImportOptions", {
  enumerable: true,
  get: function () {
    return _import2.ImportOptions;
  }
});
Object.defineProperty(exports, "InitOptions", {
  enumerable: true,
  get: function () {
    return _init.InitOptions;
  }
});
Object.defineProperty(exports, "InstallOptions", {
  enumerable: true,
  get: function () {
    return _install.InstallOptions;
  }
});
Object.defineProperty(exports, "InstallAsset", {
  enumerable: true,
  get: function () {
    return _install.Asset;
  }
});
Object.defineProperty(exports, "LintOptions", {
  enumerable: true,
  get: function () {
    return _lint.LintOptions;
  }
});
Object.defineProperty(exports, "MakeOptions", {
  enumerable: true,
  get: function () {
    return _make.MakeOptions;
  }
});
Object.defineProperty(exports, "PackageOptions", {
  enumerable: true,
  get: function () {
    return _package2.PackageOptions;
  }
});
Object.defineProperty(exports, "PublishOptions", {
  enumerable: true,
  get: function () {
    return _publish.PublishOptions;
  }
});
Object.defineProperty(exports, "StartOptions", {
  enumerable: true,
  get: function () {
    return _start.StartOptions;
  }
});
exports.utils = exports.api = exports.ForgeAPI = void 0;

require("source-map-support/register");

require("colors");

var _sharedTypes = require("@electron-forge/shared-types");

var _import2 = _interopRequireWildcard(require("./import"));

var _init = _interopRequireWildcard(require("./init"));

var _install = _interopRequireWildcard(require("./install"));

var _lint = _interopRequireWildcard(require("./lint"));

var _make = _interopRequireWildcard(require("./make"));

var _package2 = _interopRequireWildcard(require("./package"));

var _publish = _interopRequireWildcard(require("./publish"));

var _start = _interopRequireWildcard(require("./start"));

var _util = _interopRequireDefault(require("../util"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class ForgeAPI {
  /**
   * Attempt to import a given module directory to the Electron Forge standard.
   *
   * * Sets up `git` and the correct NPM dependencies
   * * Adds a template forge config to `package.json`
   */
  import(opts) {
    return (0, _import2.default)(opts);
  }
  /**
   * Initialize a new Electron Forge template project in the given directory.
   */


  init(opts) {
    return (0, _init.default)(opts);
  }
  /**
   * Install an Electron application from GitHub.
   *
   * Works on all three platforms for all major distributable types.
   */


  install(opts) {
    return (0, _install.default)(opts);
  }
  /**
   * Lint a local Electron application.
   *
   * The promise will be rejected with the stdout+stderr of the linting process
   * if linting fails or will be resolved if it succeeds.
   */


  lint(opts) {
    return (0, _lint.default)(opts);
  }
  /**
   * Make distributables for an Electron application
   */


  make(opts) {
    return (0, _make.default)(opts);
  }
  /**
   * Resolves hooks if they are a path to a file (instead of a `Function`)
   */


  package(opts) {
    return (0, _package2.default)(opts);
  }
  /**
   * Publish an Electron application into the given target service
   */


  publish(opts) {
    return (0, _publish.default)(opts);
  }
  /**
   * Start an Electron application.
   *
   * Handles things like native module rebuilding for you on the fly
   */


  start(opts) {
    return (0, _start.default)(opts);
  }

}

exports.ForgeAPI = ForgeAPI;
const api = new ForgeAPI();
exports.api = api;
const utils = new _util.default();
exports.utils = utils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvaW5kZXgudHMiXSwibmFtZXMiOlsiRm9yZ2VBUEkiLCJpbXBvcnQiLCJvcHRzIiwiaW5pdCIsImluc3RhbGwiLCJsaW50IiwibWFrZSIsInBhY2thZ2UiLCJwdWJsaXNoIiwic3RhcnQiLCJhcGkiLCJ1dGlscyIsIkZvcmdlVXRpbHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOzs7Ozs7OztBQUVPLE1BQU1BLFFBQU4sQ0FBZTtBQUNwQjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRUMsRUFBQUEsTUFBTSxDQUFDQyxJQUFELEVBQXNCO0FBQzFCLFdBQU8sc0JBQVFBLElBQVIsQ0FBUDtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7QUFDRUMsRUFBQUEsSUFBSSxDQUFDRCxJQUFELEVBQW9CO0FBQ3RCLFdBQU8sbUJBQUtBLElBQUwsQ0FBUDtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0VFLEVBQUFBLE9BQU8sQ0FBQ0YsSUFBRCxFQUF1QjtBQUM1QixXQUFPLHNCQUFRQSxJQUFSLENBQVA7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0VHLEVBQUFBLElBQUksQ0FBQ0gsSUFBRCxFQUFvQjtBQUN0QixXQUFPLG1CQUFLQSxJQUFMLENBQVA7QUFDRDtBQUVEO0FBQ0Y7QUFDQTs7O0FBQ0VJLEVBQUFBLElBQUksQ0FBQ0osSUFBRCxFQUFvQjtBQUN0QixXQUFPLG1CQUFLQSxJQUFMLENBQVA7QUFDRDtBQUVEO0FBQ0Y7QUFDQTs7O0FBQ0VLLEVBQUFBLE9BQU8sQ0FBQ0wsSUFBRCxFQUF1QjtBQUM1QixXQUFPLHVCQUFTQSxJQUFULENBQVA7QUFDRDtBQUVEO0FBQ0Y7QUFDQTs7O0FBQ0VNLEVBQUFBLE9BQU8sQ0FBQ04sSUFBRCxFQUF1QjtBQUM1QixXQUFPLHNCQUFRQSxJQUFSLENBQVA7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7OztBQUNFTyxFQUFBQSxLQUFLLENBQUNQLElBQUQsRUFBcUI7QUFDeEIsV0FBTyxvQkFBTUEsSUFBTixDQUFQO0FBQ0Q7O0FBakVtQjs7O0FBb0V0QixNQUFNUSxHQUFHLEdBQUcsSUFBSVYsUUFBSixFQUFaOztBQUNBLE1BQU1XLEtBQUssR0FBRyxJQUFJQyxhQUFKLEVBQWQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ2NvbG9ycyc7XG5pbXBvcnQgeyBGb3JnZU1ha2VSZXN1bHQgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2Uvc2hhcmVkLXR5cGVzJztcblxuaW1wb3J0IF9pbXBvcnQsIHsgSW1wb3J0T3B0aW9ucyB9IGZyb20gJy4vaW1wb3J0JztcbmltcG9ydCBpbml0LCB7IEluaXRPcHRpb25zIH0gZnJvbSAnLi9pbml0JztcbmltcG9ydCBpbnN0YWxsLCB7IEluc3RhbGxPcHRpb25zLCBBc3NldCBhcyBJbnN0YWxsQXNzZXQgfSBmcm9tICcuL2luc3RhbGwnO1xuaW1wb3J0IGxpbnQsIHsgTGludE9wdGlvbnMgfSBmcm9tICcuL2xpbnQnO1xuaW1wb3J0IG1ha2UsIHsgTWFrZU9wdGlvbnMgfSBmcm9tICcuL21ha2UnO1xuaW1wb3J0IF9wYWNrYWdlLCB7IFBhY2thZ2VPcHRpb25zIH0gZnJvbSAnLi9wYWNrYWdlJztcbmltcG9ydCBwdWJsaXNoLCB7IFB1Ymxpc2hPcHRpb25zIH0gZnJvbSAnLi9wdWJsaXNoJztcbmltcG9ydCBzdGFydCwgeyBTdGFydE9wdGlvbnMgfSBmcm9tICcuL3N0YXJ0JztcblxuaW1wb3J0IEZvcmdlVXRpbHMgZnJvbSAnLi4vdXRpbCc7XG5cbmV4cG9ydCBjbGFzcyBGb3JnZUFQSSB7XG4gIC8qKlxuICAgKiBBdHRlbXB0IHRvIGltcG9ydCBhIGdpdmVuIG1vZHVsZSBkaXJlY3RvcnkgdG8gdGhlIEVsZWN0cm9uIEZvcmdlIHN0YW5kYXJkLlxuICAgKlxuICAgKiAqIFNldHMgdXAgYGdpdGAgYW5kIHRoZSBjb3JyZWN0IE5QTSBkZXBlbmRlbmNpZXNcbiAgICogKiBBZGRzIGEgdGVtcGxhdGUgZm9yZ2UgY29uZmlnIHRvIGBwYWNrYWdlLmpzb25gXG4gICAqL1xuICBpbXBvcnQob3B0czogSW1wb3J0T3B0aW9ucykge1xuICAgIHJldHVybiBfaW1wb3J0KG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgYSBuZXcgRWxlY3Ryb24gRm9yZ2UgdGVtcGxhdGUgcHJvamVjdCBpbiB0aGUgZ2l2ZW4gZGlyZWN0b3J5LlxuICAgKi9cbiAgaW5pdChvcHRzOiBJbml0T3B0aW9ucykge1xuICAgIHJldHVybiBpbml0KG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluc3RhbGwgYW4gRWxlY3Ryb24gYXBwbGljYXRpb24gZnJvbSBHaXRIdWIuXG4gICAqXG4gICAqIFdvcmtzIG9uIGFsbCB0aHJlZSBwbGF0Zm9ybXMgZm9yIGFsbCBtYWpvciBkaXN0cmlidXRhYmxlIHR5cGVzLlxuICAgKi9cbiAgaW5zdGFsbChvcHRzOiBJbnN0YWxsT3B0aW9ucykge1xuICAgIHJldHVybiBpbnN0YWxsKG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIExpbnQgYSBsb2NhbCBFbGVjdHJvbiBhcHBsaWNhdGlvbi5cbiAgICpcbiAgICogVGhlIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSBzdGRvdXQrc3RkZXJyIG9mIHRoZSBsaW50aW5nIHByb2Nlc3NcbiAgICogaWYgbGludGluZyBmYWlscyBvciB3aWxsIGJlIHJlc29sdmVkIGlmIGl0IHN1Y2NlZWRzLlxuICAgKi9cbiAgbGludChvcHRzOiBMaW50T3B0aW9ucykge1xuICAgIHJldHVybiBsaW50KG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1ha2UgZGlzdHJpYnV0YWJsZXMgZm9yIGFuIEVsZWN0cm9uIGFwcGxpY2F0aW9uXG4gICAqL1xuICBtYWtlKG9wdHM6IE1ha2VPcHRpb25zKSB7XG4gICAgcmV0dXJuIG1ha2Uob3B0cyk7XG4gIH1cblxuICAvKipcbiAgICogUmVzb2x2ZXMgaG9va3MgaWYgdGhleSBhcmUgYSBwYXRoIHRvIGEgZmlsZSAoaW5zdGVhZCBvZiBhIGBGdW5jdGlvbmApXG4gICAqL1xuICBwYWNrYWdlKG9wdHM6IFBhY2thZ2VPcHRpb25zKSB7XG4gICAgcmV0dXJuIF9wYWNrYWdlKG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1Ymxpc2ggYW4gRWxlY3Ryb24gYXBwbGljYXRpb24gaW50byB0aGUgZ2l2ZW4gdGFyZ2V0IHNlcnZpY2VcbiAgICovXG4gIHB1Ymxpc2gob3B0czogUHVibGlzaE9wdGlvbnMpIHtcbiAgICByZXR1cm4gcHVibGlzaChvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydCBhbiBFbGVjdHJvbiBhcHBsaWNhdGlvbi5cbiAgICpcbiAgICogSGFuZGxlcyB0aGluZ3MgbGlrZSBuYXRpdmUgbW9kdWxlIHJlYnVpbGRpbmcgZm9yIHlvdSBvbiB0aGUgZmx5XG4gICAqL1xuICBzdGFydChvcHRzOiBTdGFydE9wdGlvbnMpIHtcbiAgICByZXR1cm4gc3RhcnQob3B0cyk7XG4gIH1cbn1cblxuY29uc3QgYXBpID0gbmV3IEZvcmdlQVBJKCk7XG5jb25zdCB1dGlscyA9IG5ldyBGb3JnZVV0aWxzKCk7XG5cbmV4cG9ydCB7XG4gIEZvcmdlTWFrZVJlc3VsdCxcbiAgSW1wb3J0T3B0aW9ucyxcbiAgSW5pdE9wdGlvbnMsXG4gIEluc3RhbGxBc3NldCxcbiAgSW5zdGFsbE9wdGlvbnMsXG4gIExpbnRPcHRpb25zLFxuICBNYWtlT3B0aW9ucyxcbiAgUGFja2FnZU9wdGlvbnMsXG4gIFB1Ymxpc2hPcHRpb25zLFxuICBTdGFydE9wdGlvbnMsXG4gIGFwaSxcbiAgdXRpbHMsXG59O1xuIl19