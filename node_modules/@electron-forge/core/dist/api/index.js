"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ForgeAPI = void 0;
Object.defineProperty(exports, "ForgeMakeResult", {
  enumerable: true,
  get: function () {
    return _sharedTypes.ForgeMakeResult;
  }
});
Object.defineProperty(exports, "ImportOptions", {
  enumerable: true,
  get: function () {
    return _import2.ImportOptions;
  }
});
Object.defineProperty(exports, "InitOptions", {
  enumerable: true,
  get: function () {
    return _init.InitOptions;
  }
});
Object.defineProperty(exports, "InstallAsset", {
  enumerable: true,
  get: function () {
    return _install.Asset;
  }
});
Object.defineProperty(exports, "InstallOptions", {
  enumerable: true,
  get: function () {
    return _install.InstallOptions;
  }
});
Object.defineProperty(exports, "LintOptions", {
  enumerable: true,
  get: function () {
    return _lint.LintOptions;
  }
});
Object.defineProperty(exports, "MakeOptions", {
  enumerable: true,
  get: function () {
    return _make.MakeOptions;
  }
});
Object.defineProperty(exports, "PackageOptions", {
  enumerable: true,
  get: function () {
    return _package2.PackageOptions;
  }
});
Object.defineProperty(exports, "PublishOptions", {
  enumerable: true,
  get: function () {
    return _publish.PublishOptions;
  }
});
Object.defineProperty(exports, "StartOptions", {
  enumerable: true,
  get: function () {
    return _start.StartOptions;
  }
});
exports.utils = exports.api = void 0;

require("source-map-support/register");

var _sharedTypes = require("@electron-forge/shared-types");

var _import2 = _interopRequireWildcard(require("./import"));

var _init = _interopRequireWildcard(require("./init"));

var _install = _interopRequireWildcard(require("./install"));

var _lint = _interopRequireWildcard(require("./lint"));

var _make = _interopRequireWildcard(require("./make"));

var _package2 = _interopRequireWildcard(require("./package"));

var _publish = _interopRequireWildcard(require("./publish"));

var _start = _interopRequireWildcard(require("./start"));

var _util = _interopRequireDefault(require("../util"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class ForgeAPI {
  /**
   * Attempt to import a given module directory to the Electron Forge standard.
   *
   * * Sets up `git` and the correct NPM dependencies
   * * Adds a template forge config to `package.json`
   */
  import(opts) {
    return (0, _import2.default)(opts);
  }
  /**
   * Initialize a new Electron Forge template project in the given directory.
   */


  init(opts) {
    return (0, _init.default)(opts);
  }
  /**
   * Install an Electron application from GitHub.
   *
   * Works on all three platforms for all major distributable types.
   */


  install(opts) {
    return (0, _install.default)(opts);
  }
  /**
   * Lint a local Electron application.
   *
   * The promise will be rejected with the stdout+stderr of the linting process
   * if linting fails or will be resolved if it succeeds.
   */


  lint(opts) {
    return (0, _lint.default)(opts);
  }
  /**
   * Make distributables for an Electron application
   */


  make(opts) {
    return (0, _make.default)(opts);
  }
  /**
   * Resolves hooks if they are a path to a file (instead of a `Function`)
   */


  package(opts) {
    return (0, _package2.default)(opts);
  }
  /**
   * Publish an Electron application into the given target service
   */


  publish(opts) {
    return (0, _publish.default)(opts);
  }
  /**
   * Start an Electron application.
   *
   * Handles things like native module rebuilding for you on the fly
   */


  start(opts) {
    return (0, _start.default)(opts);
  }

}

exports.ForgeAPI = ForgeAPI;
const api = new ForgeAPI();
exports.api = api;
const utils = new _util.default();
exports.utils = utils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvaW5kZXgudHMiXSwibmFtZXMiOlsiRm9yZ2VBUEkiLCJpbXBvcnQiLCJvcHRzIiwiaW5pdCIsImluc3RhbGwiLCJsaW50IiwibWFrZSIsInBhY2thZ2UiLCJwdWJsaXNoIiwic3RhcnQiLCJhcGkiLCJ1dGlscyIsIkZvcmdlVXRpbHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7Ozs7Ozs7QUFFTyxNQUFNQSxRQUFOLENBQWU7QUFDcEI7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0VDLEVBQUFBLE1BQU0sQ0FBQ0MsSUFBRCxFQUFxQztBQUN6QyxXQUFPLHNCQUFRQSxJQUFSLENBQVA7QUFDRDtBQUVEO0FBQ0Y7QUFDQTs7O0FBQ0VDLEVBQUFBLElBQUksQ0FBQ0QsSUFBRCxFQUFtQztBQUNyQyxXQUFPLG1CQUFLQSxJQUFMLENBQVA7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7OztBQUNFRSxFQUFBQSxPQUFPLENBQUNGLElBQUQsRUFBc0M7QUFDM0MsV0FBTyxzQkFBUUEsSUFBUixDQUFQO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNFRyxFQUFBQSxJQUFJLENBQUNILElBQUQsRUFBbUM7QUFDckMsV0FBTyxtQkFBS0EsSUFBTCxDQUFQO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7OztBQUNFSSxFQUFBQSxJQUFJLENBQUNKLElBQUQsRUFBZ0Q7QUFDbEQsV0FBTyxtQkFBS0EsSUFBTCxDQUFQO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7OztBQUNFSyxFQUFBQSxPQUFPLENBQUNMLElBQUQsRUFBc0M7QUFDM0MsV0FBTyx1QkFBU0EsSUFBVCxDQUFQO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7OztBQUNFTSxFQUFBQSxPQUFPLENBQUNOLElBQUQsRUFBc0M7QUFDM0MsV0FBTyxzQkFBUUEsSUFBUixDQUFQO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7QUFDRU8sRUFBQUEsS0FBSyxDQUFDUCxJQUFELEVBQStDO0FBQ2xELFdBQU8sb0JBQU1BLElBQU4sQ0FBUDtBQUNEOztBQWpFbUI7OztBQW9FdEIsTUFBTVEsR0FBRyxHQUFHLElBQUlWLFFBQUosRUFBWjs7QUFDQSxNQUFNVyxLQUFLLEdBQUcsSUFBSUMsYUFBSixFQUFkIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlY3Ryb25Qcm9jZXNzLCBGb3JnZU1ha2VSZXN1bHQgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2Uvc2hhcmVkLXR5cGVzJztcblxuaW1wb3J0IF9pbXBvcnQsIHsgSW1wb3J0T3B0aW9ucyB9IGZyb20gJy4vaW1wb3J0JztcbmltcG9ydCBpbml0LCB7IEluaXRPcHRpb25zIH0gZnJvbSAnLi9pbml0JztcbmltcG9ydCBpbnN0YWxsLCB7IEluc3RhbGxPcHRpb25zLCBBc3NldCBhcyBJbnN0YWxsQXNzZXQgfSBmcm9tICcuL2luc3RhbGwnO1xuaW1wb3J0IGxpbnQsIHsgTGludE9wdGlvbnMgfSBmcm9tICcuL2xpbnQnO1xuaW1wb3J0IG1ha2UsIHsgTWFrZU9wdGlvbnMgfSBmcm9tICcuL21ha2UnO1xuaW1wb3J0IF9wYWNrYWdlLCB7IFBhY2thZ2VPcHRpb25zIH0gZnJvbSAnLi9wYWNrYWdlJztcbmltcG9ydCBwdWJsaXNoLCB7IFB1Ymxpc2hPcHRpb25zIH0gZnJvbSAnLi9wdWJsaXNoJztcbmltcG9ydCBzdGFydCwgeyBTdGFydE9wdGlvbnMgfSBmcm9tICcuL3N0YXJ0JztcblxuaW1wb3J0IEZvcmdlVXRpbHMgZnJvbSAnLi4vdXRpbCc7XG5cbmV4cG9ydCBjbGFzcyBGb3JnZUFQSSB7XG4gIC8qKlxuICAgKiBBdHRlbXB0IHRvIGltcG9ydCBhIGdpdmVuIG1vZHVsZSBkaXJlY3RvcnkgdG8gdGhlIEVsZWN0cm9uIEZvcmdlIHN0YW5kYXJkLlxuICAgKlxuICAgKiAqIFNldHMgdXAgYGdpdGAgYW5kIHRoZSBjb3JyZWN0IE5QTSBkZXBlbmRlbmNpZXNcbiAgICogKiBBZGRzIGEgdGVtcGxhdGUgZm9yZ2UgY29uZmlnIHRvIGBwYWNrYWdlLmpzb25gXG4gICAqL1xuICBpbXBvcnQob3B0czogSW1wb3J0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBfaW1wb3J0KG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgYSBuZXcgRWxlY3Ryb24gRm9yZ2UgdGVtcGxhdGUgcHJvamVjdCBpbiB0aGUgZ2l2ZW4gZGlyZWN0b3J5LlxuICAgKi9cbiAgaW5pdChvcHRzOiBJbml0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBpbml0KG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluc3RhbGwgYW4gRWxlY3Ryb24gYXBwbGljYXRpb24gZnJvbSBHaXRIdWIuXG4gICAqXG4gICAqIFdvcmtzIG9uIGFsbCB0aHJlZSBwbGF0Zm9ybXMgZm9yIGFsbCBtYWpvciBkaXN0cmlidXRhYmxlIHR5cGVzLlxuICAgKi9cbiAgaW5zdGFsbChvcHRzOiBJbnN0YWxsT3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBpbnN0YWxsKG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIExpbnQgYSBsb2NhbCBFbGVjdHJvbiBhcHBsaWNhdGlvbi5cbiAgICpcbiAgICogVGhlIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSBzdGRvdXQrc3RkZXJyIG9mIHRoZSBsaW50aW5nIHByb2Nlc3NcbiAgICogaWYgbGludGluZyBmYWlscyBvciB3aWxsIGJlIHJlc29sdmVkIGlmIGl0IHN1Y2NlZWRzLlxuICAgKi9cbiAgbGludChvcHRzOiBMaW50T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBsaW50KG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1ha2UgZGlzdHJpYnV0YWJsZXMgZm9yIGFuIEVsZWN0cm9uIGFwcGxpY2F0aW9uXG4gICAqL1xuICBtYWtlKG9wdHM6IE1ha2VPcHRpb25zKTogUHJvbWlzZTxGb3JnZU1ha2VSZXN1bHRbXT4ge1xuICAgIHJldHVybiBtYWtlKG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc29sdmVzIGhvb2tzIGlmIHRoZXkgYXJlIGEgcGF0aCB0byBhIGZpbGUgKGluc3RlYWQgb2YgYSBgRnVuY3Rpb25gKVxuICAgKi9cbiAgcGFja2FnZShvcHRzOiBQYWNrYWdlT3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBfcGFja2FnZShvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaXNoIGFuIEVsZWN0cm9uIGFwcGxpY2F0aW9uIGludG8gdGhlIGdpdmVuIHRhcmdldCBzZXJ2aWNlXG4gICAqL1xuICBwdWJsaXNoKG9wdHM6IFB1Ymxpc2hPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHB1Ymxpc2gob3B0cyk7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgYW4gRWxlY3Ryb24gYXBwbGljYXRpb24uXG4gICAqXG4gICAqIEhhbmRsZXMgdGhpbmdzIGxpa2UgbmF0aXZlIG1vZHVsZSByZWJ1aWxkaW5nIGZvciB5b3Ugb24gdGhlIGZseVxuICAgKi9cbiAgc3RhcnQob3B0czogU3RhcnRPcHRpb25zKTogUHJvbWlzZTxFbGVjdHJvblByb2Nlc3M+IHtcbiAgICByZXR1cm4gc3RhcnQob3B0cyk7XG4gIH1cbn1cblxuY29uc3QgYXBpID0gbmV3IEZvcmdlQVBJKCk7XG5jb25zdCB1dGlscyA9IG5ldyBGb3JnZVV0aWxzKCk7XG5cbmV4cG9ydCB7XG4gIEZvcmdlTWFrZVJlc3VsdCxcbiAgSW1wb3J0T3B0aW9ucyxcbiAgSW5pdE9wdGlvbnMsXG4gIEluc3RhbGxBc3NldCxcbiAgSW5zdGFsbE9wdGlvbnMsXG4gIExpbnRPcHRpb25zLFxuICBNYWtlT3B0aW9ucyxcbiAgUGFja2FnZU9wdGlvbnMsXG4gIFB1Ymxpc2hPcHRpb25zLFxuICBTdGFydE9wdGlvbnMsXG4gIGFwaSxcbiAgdXRpbHMsXG59O1xuIl19