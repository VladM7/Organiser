"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runHook = void 0;
exports.runMutatingHook = runMutatingHook;

require("source-map-support/register");

var _debug = _interopRequireDefault(require("debug"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const d = (0, _debug.default)('electron-forge:hook'); // eslint-disable-next-line @typescript-eslint/no-explicit-any

const runHook = async (forgeConfig, hookName, ...hookArgs) => {
  const {
    hooks
  } = forgeConfig;

  if (hooks) {
    d(`hook triggered: ${hookName}`);

    if (typeof hooks[hookName] === 'function') {
      d('calling hook:', hookName, 'with args:', hookArgs);
      await hooks[hookName](forgeConfig, ...hookArgs);
    }
  }

  await forgeConfig.pluginInterface.triggerHook(hookName, hookArgs);
};

exports.runHook = runHook;

async function runMutatingHook(forgeConfig, hookName, item) {
  const {
    hooks
  } = forgeConfig;

  if (hooks) {
    d(`hook triggered: ${hookName}`);

    if (typeof hooks[hookName] === 'function') {
      d('calling mutating hook:', hookName, 'with item:', item);
      const result = await hooks[hookName](forgeConfig, item);

      if (typeof result !== 'undefined') {
        item = result;
      }
    }
  }

  return forgeConfig.pluginInterface.triggerMutatingHook(hookName, item);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2hvb2sudHMiXSwibmFtZXMiOlsiZCIsInJ1bkhvb2siLCJmb3JnZUNvbmZpZyIsImhvb2tOYW1lIiwiaG9va0FyZ3MiLCJob29rcyIsInBsdWdpbkludGVyZmFjZSIsInRyaWdnZXJIb29rIiwicnVuTXV0YXRpbmdIb29rIiwiaXRlbSIsInJlc3VsdCIsInRyaWdnZXJNdXRhdGluZ0hvb2siXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFDQTs7OztBQUVBLE1BQU1BLENBQUMsR0FBRyxvQkFBTSxxQkFBTixDQUFWLEMsQ0FFQTs7QUFDTyxNQUFNQyxPQUFPLEdBQUcsT0FBT0MsV0FBUCxFQUFpQ0MsUUFBakMsRUFBbUQsR0FBR0MsUUFBdEQsS0FBeUY7QUFDOUcsUUFBTTtBQUFFQyxJQUFBQTtBQUFGLE1BQVlILFdBQWxCOztBQUNBLE1BQUlHLEtBQUosRUFBVztBQUNUTCxJQUFBQSxDQUFDLENBQUUsbUJBQWtCRyxRQUFTLEVBQTdCLENBQUQ7O0FBQ0EsUUFBSSxPQUFPRSxLQUFLLENBQUNGLFFBQUQsQ0FBWixLQUEyQixVQUEvQixFQUEyQztBQUN6Q0gsTUFBQUEsQ0FBQyxDQUFDLGVBQUQsRUFBa0JHLFFBQWxCLEVBQTRCLFlBQTVCLEVBQTBDQyxRQUExQyxDQUFEO0FBQ0EsWUFBTUMsS0FBSyxDQUFDRixRQUFELENBQUwsQ0FBZ0JELFdBQWhCLEVBQTZCLEdBQUdFLFFBQWhDLENBQU47QUFDRDtBQUNGOztBQUNELFFBQU1GLFdBQVcsQ0FBQ0ksZUFBWixDQUE0QkMsV0FBNUIsQ0FBd0NKLFFBQXhDLEVBQWtEQyxRQUFsRCxDQUFOO0FBQ0QsQ0FWTTs7OztBQVlBLGVBQWVJLGVBQWYsQ0FBa0NOLFdBQWxDLEVBQTREQyxRQUE1RCxFQUE4RU0sSUFBOUUsRUFBbUc7QUFDeEcsUUFBTTtBQUFFSixJQUFBQTtBQUFGLE1BQVlILFdBQWxCOztBQUNBLE1BQUlHLEtBQUosRUFBVztBQUNUTCxJQUFBQSxDQUFDLENBQUUsbUJBQWtCRyxRQUFTLEVBQTdCLENBQUQ7O0FBQ0EsUUFBSSxPQUFPRSxLQUFLLENBQUNGLFFBQUQsQ0FBWixLQUEyQixVQUEvQixFQUEyQztBQUN6Q0gsTUFBQUEsQ0FBQyxDQUFDLHdCQUFELEVBQTJCRyxRQUEzQixFQUFxQyxZQUFyQyxFQUFtRE0sSUFBbkQsQ0FBRDtBQUNBLFlBQU1DLE1BQU0sR0FBRyxNQUFNTCxLQUFLLENBQUNGLFFBQUQsQ0FBTCxDQUFnQkQsV0FBaEIsRUFBNkJPLElBQTdCLENBQXJCOztBQUNBLFVBQUksT0FBT0MsTUFBUCxLQUFrQixXQUF0QixFQUFtQztBQUNqQ0QsUUFBQUEsSUFBSSxHQUFHQyxNQUFQO0FBQ0Q7QUFDRjtBQUNGOztBQUNELFNBQU9SLFdBQVcsQ0FBQ0ksZUFBWixDQUE0QkssbUJBQTVCLENBQWdEUixRQUFoRCxFQUEwRE0sSUFBMUQsQ0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9yZ2VDb25maWcgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2Uvc2hhcmVkLXR5cGVzJztcbmltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5cbmNvbnN0IGQgPSBkZWJ1ZygnZWxlY3Ryb24tZm9yZ2U6aG9vaycpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGNvbnN0IHJ1bkhvb2sgPSBhc3luYyAoZm9yZ2VDb25maWc6IEZvcmdlQ29uZmlnLCBob29rTmFtZTogc3RyaW5nLCAuLi5ob29rQXJnczogYW55W10pOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgY29uc3QgeyBob29rcyB9ID0gZm9yZ2VDb25maWc7XG4gIGlmIChob29rcykge1xuICAgIGQoYGhvb2sgdHJpZ2dlcmVkOiAke2hvb2tOYW1lfWApO1xuICAgIGlmICh0eXBlb2YgaG9va3NbaG9va05hbWVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBkKCdjYWxsaW5nIGhvb2s6JywgaG9va05hbWUsICd3aXRoIGFyZ3M6JywgaG9va0FyZ3MpO1xuICAgICAgYXdhaXQgaG9va3NbaG9va05hbWVdKGZvcmdlQ29uZmlnLCAuLi5ob29rQXJncyk7XG4gICAgfVxuICB9XG4gIGF3YWl0IGZvcmdlQ29uZmlnLnBsdWdpbkludGVyZmFjZS50cmlnZ2VySG9vayhob29rTmFtZSwgaG9va0FyZ3MpO1xufTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJ1bk11dGF0aW5nSG9vazxUPihmb3JnZUNvbmZpZzogRm9yZ2VDb25maWcsIGhvb2tOYW1lOiBzdHJpbmcsIGl0ZW06IFQpOiBQcm9taXNlPFQ+IHtcbiAgY29uc3QgeyBob29rcyB9ID0gZm9yZ2VDb25maWc7XG4gIGlmIChob29rcykge1xuICAgIGQoYGhvb2sgdHJpZ2dlcmVkOiAke2hvb2tOYW1lfWApO1xuICAgIGlmICh0eXBlb2YgaG9va3NbaG9va05hbWVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBkKCdjYWxsaW5nIG11dGF0aW5nIGhvb2s6JywgaG9va05hbWUsICd3aXRoIGl0ZW06JywgaXRlbSk7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBob29rc1tob29rTmFtZV0oZm9yZ2VDb25maWcsIGl0ZW0pO1xuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGl0ZW0gPSByZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBmb3JnZUNvbmZpZy5wbHVnaW5JbnRlcmZhY2UudHJpZ2dlck11dGF0aW5nSG9vayhob29rTmFtZSwgaXRlbSk7XG59XG4iXX0=