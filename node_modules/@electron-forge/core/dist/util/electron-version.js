"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PackageNotFoundError = void 0;
exports.getElectronModulePath = getElectronModulePath;
exports.getElectronVersion = getElectronVersion;
exports.updateElectronDependency = updateElectronDependency;

require("source-map-support/register");

var _debug = _interopRequireDefault(require("debug"));

var _findUp = _interopRequireDefault(require("find-up"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _semver = _interopRequireDefault(require("semver"));

var _yarnOrNpm = _interopRequireDefault(require("./yarn-or-npm"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const d = (0, _debug.default)('electron-forge:electron-version');
const electronPackageNames = ['electron-prebuilt-compile', 'electron-prebuilt', 'electron-nightly', 'electron'];

function findElectronDep(dep) {
  return electronPackageNames.includes(dep);
}

async function findAncestorNodeModulesPath(dir, packageName) {
  d('Looking for a lock file to indicate the root of the repo');
  const lockPath = await (0, _findUp.default)(['package-lock.json', 'yarn.lock', 'pnpm-lock.yaml'], {
    cwd: dir,
    type: 'file'
  });

  if (lockPath) {
    d(`Found lock file: ${lockPath}`);

    const nodeModulesPath = _path.default.join(_path.default.dirname(lockPath), 'node_modules', packageName);

    if (await _fsExtra.default.pathExists(nodeModulesPath)) {
      return nodeModulesPath;
    }
  }

  return Promise.resolve(undefined);
}

async function determineNodeModulesPath(dir, packageName) {
  const nodeModulesPath = _path.default.join(dir, 'node_modules', packageName);

  if (await _fsExtra.default.pathExists(nodeModulesPath)) {
    return nodeModulesPath;
  }

  return findAncestorNodeModulesPath(dir, packageName);
}

class PackageNotFoundError extends Error {
  constructor(packageName, dir) {
    super(`Cannot find the package "${packageName}". Perhaps you need to run "${(0, _yarnOrNpm.default)()} install" in "${dir}"?`);
  }

}

exports.PackageNotFoundError = PackageNotFoundError;

function getElectronModuleName(packageJSON) {
  if (!packageJSON.devDependencies) {
    throw new Error('package.json for app does not have any devDependencies');
  } // Why: checked above
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion


  const packageName = electronPackageNames.find(pkg => packageJSON.devDependencies[pkg]);

  if (packageName === undefined) {
    throw new Error('Could not find any Electron packages in devDependencies');
  }

  return packageName;
}

async function getElectronPackageJSONPath(dir, packageName) {
  const nodeModulesPath = await determineNodeModulesPath(dir, packageName);

  if (!nodeModulesPath) {
    throw new PackageNotFoundError(packageName, dir);
  }

  const electronPackageJSONPath = _path.default.join(nodeModulesPath, 'package.json');

  if (await _fsExtra.default.pathExists(electronPackageJSONPath)) {
    return electronPackageJSONPath;
  }

  return undefined;
}

async function getElectronModulePath(dir, packageJSON) {
  const moduleName = getElectronModuleName(packageJSON);
  const packageJSONPath = await getElectronPackageJSONPath(dir, moduleName);

  if (packageJSONPath) {
    return _path.default.dirname(packageJSONPath);
  }

  return undefined;
}

async function getElectronVersion(dir, packageJSON) {
  const packageName = getElectronModuleName(packageJSON); // Why: checked in getElectronModuleName
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

  let version = packageJSON.devDependencies[packageName];

  if (!_semver.default.valid(version)) {
    // It's not an exact version, find it in the actual module
    const electronPackageJSONPath = await getElectronPackageJSONPath(dir, packageName);

    if (electronPackageJSONPath) {
      const electronPackageJSON = await _fsExtra.default.readJson(electronPackageJSONPath); // eslint-disable-next-line prefer-destructuring

      version = electronPackageJSON.version;
    } else {
      throw new PackageNotFoundError(packageName, dir);
    }
  }

  return version;
}

function updateElectronDependency(packageJSON, dev, exact) {
  const alteredDev = [].concat(dev);
  let alteredExact = [].concat(exact); // Why: checked in getElectronModuleName
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

  if (Object.keys(packageJSON.devDependencies).find(findElectronDep)) {
    alteredExact = alteredExact.filter(dep => dep !== 'electron');
  } else if (packageJSON.dependencies) {
    const electronKey = Object.keys(packageJSON.dependencies).find(findElectronDep);

    if (electronKey) {
      alteredExact = alteredExact.filter(dep => dep !== 'electron');
      d(`Moving ${electronKey} from dependencies to devDependencies`);
      alteredDev.push(`${electronKey}@${packageJSON.dependencies[electronKey]}`);
      delete packageJSON.dependencies[electronKey];
    }
  }

  return [alteredDev, alteredExact];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,