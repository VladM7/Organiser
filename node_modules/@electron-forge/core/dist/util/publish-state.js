"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _crypto = _interopRequireDefault(require("crypto"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const EXTENSION = '.forge.publish';

class PublishState {
  static async loadFromDirectory(directory, rootDir) {
    if (!(await _fsExtra.default.pathExists(directory))) {
      throw new Error(`Attempted to load publish state from a missing directory: ${directory}`);
    }

    const publishes = [];

    for (const dirName of await _fsExtra.default.readdir(directory)) {
      const subDir = _path.default.resolve(directory, dirName);

      const states = [];

      if ((await _fsExtra.default.stat(subDir)).isDirectory()) {
        const filePaths = (await _fsExtra.default.readdir(subDir)).filter(fileName => fileName.endsWith(EXTENSION)).map(fileName => _path.default.resolve(subDir, fileName));

        for (const filePath of filePaths) {
          const state = new PublishState(filePath);
          await state.load();
          state.state.artifacts = state.state.artifacts.map(artifactPath => _path.default.resolve(rootDir, artifactPath));
          states.push(state);
        }
      }

      publishes.push(states);
    }

    return publishes;
  }

  static async saveToDirectory(directory, artifacts, rootDir) {
    const id = _crypto.default.createHash('SHA256').update(JSON.stringify(artifacts)).digest('hex');

    for (const artifact of artifacts) {
      artifact.artifacts = artifact.artifacts.map(artifactPath => _path.default.relative(rootDir, artifactPath));
      const publishState = new PublishState(_path.default.resolve(directory, id, 'null'), false);
      publishState.state = artifact;
      await publishState.saveToDisk();
    }
  }

  constructor(filePath, hasHash = true) {
    _defineProperty(this, "dir", void 0);

    _defineProperty(this, "path", void 0);

    _defineProperty(this, "hasHash", void 0);

    _defineProperty(this, "state", {});

    this.dir = _path.default.dirname(filePath);
    this.path = filePath;
    this.hasHash = hasHash;
  }

  generateHash() {
    const content = JSON.stringify(this.state || {});
    return _crypto.default.createHash('SHA256').update(content).digest('hex');
  }

  async load() {
    this.state = await _fsExtra.default.readJson(this.path);
  }

  async saveToDisk() {
    if (!this.hasHash) {
      this.path = _path.default.resolve(this.dir, `${this.generateHash()}${EXTENSION}`);
      this.hasHash = true;
    }

    await _fsExtra.default.mkdirs(_path.default.dirname(this.path));
    await _fsExtra.default.writeJson(this.path, this.state);
  }

}

exports.default = PublishState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL3B1Ymxpc2gtc3RhdGUudHMiXSwibmFtZXMiOlsiRVhURU5TSU9OIiwiUHVibGlzaFN0YXRlIiwibG9hZEZyb21EaXJlY3RvcnkiLCJkaXJlY3RvcnkiLCJyb290RGlyIiwiZnMiLCJwYXRoRXhpc3RzIiwiRXJyb3IiLCJwdWJsaXNoZXMiLCJkaXJOYW1lIiwicmVhZGRpciIsInN1YkRpciIsInBhdGgiLCJyZXNvbHZlIiwic3RhdGVzIiwic3RhdCIsImlzRGlyZWN0b3J5IiwiZmlsZVBhdGhzIiwiZmlsdGVyIiwiZmlsZU5hbWUiLCJlbmRzV2l0aCIsIm1hcCIsImZpbGVQYXRoIiwic3RhdGUiLCJsb2FkIiwiYXJ0aWZhY3RzIiwiYXJ0aWZhY3RQYXRoIiwicHVzaCIsInNhdmVUb0RpcmVjdG9yeSIsImlkIiwiY3J5cHRvIiwiY3JlYXRlSGFzaCIsInVwZGF0ZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJkaWdlc3QiLCJhcnRpZmFjdCIsInJlbGF0aXZlIiwicHVibGlzaFN0YXRlIiwic2F2ZVRvRGlzayIsImNvbnN0cnVjdG9yIiwiaGFzSGFzaCIsImRpciIsImRpcm5hbWUiLCJnZW5lcmF0ZUhhc2giLCJjb250ZW50IiwicmVhZEpzb24iLCJta2RpcnMiLCJ3cml0ZUpzb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUNBOztBQUNBOztBQUNBOzs7Ozs7QUFFQSxNQUFNQSxTQUFTLEdBQUcsZ0JBQWxCOztBQUVlLE1BQU1DLFlBQU4sQ0FBbUI7QUFDRixlQUFqQkMsaUJBQWlCLENBQUNDLFNBQUQsRUFBb0JDLE9BQXBCLEVBQWdFO0FBQzVGLFFBQUksRUFBRSxNQUFNQyxpQkFBR0MsVUFBSCxDQUFjSCxTQUFkLENBQVIsQ0FBSixFQUF1QztBQUNyQyxZQUFNLElBQUlJLEtBQUosQ0FBVyw2REFBNERKLFNBQVUsRUFBakYsQ0FBTjtBQUNEOztBQUVELFVBQU1LLFNBQTJCLEdBQUcsRUFBcEM7O0FBQ0EsU0FBSyxNQUFNQyxPQUFY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LEdBQWtCO0FBQzFCLFNBQUtELEtBQUwsR0FBYSxNQUFNbEIsaUJBQUd5QyxRQUFILENBQVksS0FBS2xDLElBQWpCLENBQW5CO0FBQ0Q7O0FBRWUsUUFBVjJCLFVBQVUsR0FBa0I7QUFDaEMsUUFBSSxDQUFDLEtBQUtFLE9BQVYsRUFBbUI7QUFDakIsV0FBSzdCLElBQUwsR0FBWUEsY0FBS0MsT0FBTCxDQUFhLEtBQUs2QixHQUFsQixFQUF3QixHQUFFLEtBQUtFLFlBQUwsRUFBb0IsR0FBRTVDLFNBQVUsRUFBMUQsQ0FBWjtBQUNBLFdBQUt5QyxPQUFMLEdBQWUsSUFBZjtBQUNEOztBQUVELFVBQU1wQyxpQkFBRzBDLE1BQUgsQ0FBVW5DLGNBQUsrQixPQUFMLENBQWEsS0FBSy9CLElBQWxCLENBQVYsQ0FBTjtBQUNBLFVBQU1QLGlCQUFHMkMsU0FBSCxDQUFhLEtBQUtwQyxJQUFsQixFQUF3QixLQUFLVyxLQUE3QixDQUFOO0FBQ0Q7O0FBbkUrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZvcmdlTWFrZVJlc3VsdCB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9zaGFyZWQtdHlwZXMnO1xuaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5jb25zdCBFWFRFTlNJT04gPSAnLmZvcmdlLnB1Ymxpc2gnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQdWJsaXNoU3RhdGUge1xuICBzdGF0aWMgYXN5bmMgbG9hZEZyb21EaXJlY3RvcnkoZGlyZWN0b3J5OiBzdHJpbmcsIHJvb3REaXI6IHN0cmluZyk6IFByb21pc2U8UHVibGlzaFN0YXRlW11bXT4ge1xuICAgIGlmICghKGF3YWl0IGZzLnBhdGhFeGlzdHMoZGlyZWN0b3J5KSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQXR0ZW1wdGVkIHRvIGxvYWQgcHVibGlzaCBzdGF0ZSBmcm9tIGEgbWlzc2luZyBkaXJlY3Rvcnk6ICR7ZGlyZWN0b3J5fWApO1xuICAgIH1cblxuICAgIGNvbnN0IHB1Ymxpc2hlczogUHVibGlzaFN0YXRlW11bXSA9IFtdO1xuICAgIGZvciAoY29uc3QgZGlyTmFtZSBvZiBhd2FpdCBmcy5yZWFkZGlyKGRpcmVjdG9yeSkpIHtcbiAgICAgIGNvbnN0IHN1YkRpciA9IHBhdGgucmVzb2x2ZShkaXJlY3RvcnksIGRpck5hbWUpO1xuICAgICAgY29uc3Qgc3RhdGVzOiBQdWJsaXNoU3RhdGVbXSA9IFtdO1xuXG4gICAgICBpZiAoKGF3YWl0IGZzLnN0YXQoc3ViRGlyKSkuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgICBjb25zdCBmaWxlUGF0aHMgPSAoYXdhaXQgZnMucmVhZGRpcihzdWJEaXIpKS5maWx0ZXIoKGZpbGVOYW1lKSA9PiBmaWxlTmFtZS5lbmRzV2l0aChFWFRFTlNJT04pKS5tYXAoKGZpbGVOYW1lKSA9PiBwYXRoLnJlc29sdmUoc3ViRGlyLCBmaWxlTmFtZSkpO1xuXG4gICAgICAgIGZvciAoY29uc3QgZmlsZVBhdGggb2YgZmlsZVBhdGhzKSB7XG4gICAgICAgICAgY29uc3Qgc3RhdGUgPSBuZXcgUHVibGlzaFN0YXRlKGZpbGVQYXRoKTtcbiAgICAgICAgICBhd2FpdCBzdGF0ZS5sb2FkKCk7XG4gICAgICAgICAgc3RhdGUuc3RhdGUuYXJ0aWZhY3RzID0gc3RhdGUuc3RhdGUuYXJ0aWZhY3RzLm1hcCgoYXJ0aWZhY3RQYXRoKSA9PiBwYXRoLnJlc29sdmUocm9vdERpciwgYXJ0aWZhY3RQYXRoKSk7XG4gICAgICAgICAgc3RhdGVzLnB1c2goc3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwdWJsaXNoZXMucHVzaChzdGF0ZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcHVibGlzaGVzO1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIHNhdmVUb0RpcmVjdG9yeShkaXJlY3Rvcnk6IHN0cmluZywgYXJ0aWZhY3RzOiBGb3JnZU1ha2VSZXN1bHRbXSwgcm9vdERpcjogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgaWQgPSBjcnlwdG8uY3JlYXRlSGFzaCgnU0hBMjU2JykudXBkYXRlKEpTT04uc3RyaW5naWZ5KGFydGlmYWN0cykpLmRpZ2VzdCgnaGV4Jyk7XG4gICAgZm9yIChjb25zdCBhcnRpZmFjdCBvZiBhcnRpZmFjdHMpIHtcbiAgICAgIGFydGlmYWN0LmFydGlmYWN0cyA9IGFydGlmYWN0LmFydGlmYWN0cy5tYXAoKGFydGlmYWN0UGF0aCkgPT4gcGF0aC5yZWxhdGl2ZShyb290RGlyLCBhcnRpZmFjdFBhdGgpKTtcbiAgICAgIGNvbnN0IHB1Ymxpc2hTdGF0ZSA9IG5ldyBQdWJsaXNoU3RhdGUocGF0aC5yZXNvbHZlKGRpcmVjdG9yeSwgaWQsICdudWxsJyksIGZhbHNlKTtcbiAgICAgIHB1Ymxpc2hTdGF0ZS5zdGF0ZSA9IGFydGlmYWN0O1xuICAgICAgYXdhaXQgcHVibGlzaFN0YXRlLnNhdmVUb0Rpc2soKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGRpcjogc3RyaW5nO1xuXG4gIHByaXZhdGUgcGF0aDogc3RyaW5nO1xuXG4gIHByaXZhdGUgaGFzSGFzaDogYm9vbGVhbjtcblxuICBwdWJsaWMgc3RhdGU6IEZvcmdlTWFrZVJlc3VsdCA9IHt9IGFzIEZvcmdlTWFrZVJlc3VsdDtcblxuICBjb25zdHJ1Y3RvcihmaWxlUGF0aDogc3RyaW5nLCBoYXNIYXNoID0gdHJ1ZSkge1xuICAgIHRoaXMuZGlyID0gcGF0aC5kaXJuYW1lKGZpbGVQYXRoKTtcbiAgICB0aGlzLnBhdGggPSBmaWxlUGF0aDtcbiAgICB0aGlzLmhhc0hhc2ggPSBoYXNIYXNoO1xuICB9XG5cbiAgZ2VuZXJhdGVIYXNoKCk6IHN0cmluZyB7XG4gICAgY29uc3QgY29udGVudCA9IEpTT04uc3RyaW5naWZ5KHRoaXMuc3RhdGUgfHwge30pO1xuICAgIHJldHVybiBjcnlwdG8uY3JlYXRlSGFzaCgnU0hBMjU2JykudXBkYXRlKGNvbnRlbnQpLmRpZ2VzdCgnaGV4Jyk7XG4gIH1cblxuICBhc3luYyBsb2FkKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMuc3RhdGUgPSBhd2FpdCBmcy5yZWFkSnNvbih0aGlzLnBhdGgpO1xuICB9XG5cbiAgYXN5bmMgc2F2ZVRvRGlzaygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAoIXRoaXMuaGFzSGFzaCkge1xuICAgICAgdGhpcy5wYXRoID0gcGF0aC5yZXNvbHZlKHRoaXMuZGlyLCBgJHt0aGlzLmdlbmVyYXRlSGFzaCgpfSR7RVhURU5TSU9OfWApO1xuICAgICAgdGhpcy5oYXNIYXNoID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBhd2FpdCBmcy5ta2RpcnMocGF0aC5kaXJuYW1lKHRoaXMucGF0aCkpO1xuICAgIGF3YWl0IGZzLndyaXRlSnNvbih0aGlzLnBhdGgsIHRoaXMuc3RhdGUpO1xuICB9XG59XG4iXX0=