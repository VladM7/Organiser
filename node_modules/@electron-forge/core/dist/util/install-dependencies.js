"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DepVersionRestriction = exports.DepType = void 0;

require("source-map-support/register");

var _debug = _interopRequireDefault(require("debug"));

var _crossSpawnPromise = require("@malept/cross-spawn-promise");

var _yarnOrNpm = require("./yarn-or-npm");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const d = (0, _debug.default)('electron-forge:dependency-installer');
let DepType;
exports.DepType = DepType;

(function (DepType) {
  DepType["PROD"] = "PROD";
  DepType["DEV"] = "DEV";
})(DepType || (exports.DepType = DepType = {}));

let DepVersionRestriction;
exports.DepVersionRestriction = DepVersionRestriction;

(function (DepVersionRestriction) {
  DepVersionRestriction["EXACT"] = "EXACT";
  DepVersionRestriction["RANGE"] = "RANGE";
})(DepVersionRestriction || (exports.DepVersionRestriction = DepVersionRestriction = {}));

var _default = async (dir, deps, depType = DepType.PROD, versionRestriction = DepVersionRestriction.RANGE) => {
  // eslint-disable-line consistent-return
  d('installing', JSON.stringify(deps), 'in:', dir, `depType=${depType},versionRestriction=${versionRestriction},withYarn=${(0, _yarnOrNpm.hasYarn)()}`);

  if (deps.length === 0) {
    d('nothing to install, stopping immediately');
    return Promise.resolve();
  }

  let cmd = ['install'].concat(deps);

  if ((0, _yarnOrNpm.hasYarn)()) {
    cmd = ['add'].concat(deps);
    if (depType === DepType.DEV) cmd.push('--dev');
    if (versionRestriction === DepVersionRestriction.EXACT) cmd.push('--exact');
  } else {
    if (versionRestriction === DepVersionRestriction.EXACT) cmd.push('--save-exact');
    if (depType === DepType.DEV) cmd.push('--save-dev');
    if (depType === DepType.PROD) cmd.push('--save');
  }

  d('executing', JSON.stringify(cmd), 'in:', dir);

  try {
    await (0, _yarnOrNpm.yarnOrNpmSpawn)(cmd, {
      cwd: dir,
      stdio: 'pipe'
    });
  } catch (err) {
    if (err instanceof _crossSpawnPromise.ExitError) {
      throw new Error(`Failed to install modules: ${JSON.stringify(deps)}\n\nWith output: ${err.message}\n${err.stderr ? err.stderr.toString() : ''}`);
    } else {
      throw err;
    }
  }
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2luc3RhbGwtZGVwZW5kZW5jaWVzLnRzIl0sIm5hbWVzIjpbImQiLCJEZXBUeXBlIiwiRGVwVmVyc2lvblJlc3RyaWN0aW9uIiwiZGlyIiwiZGVwcyIsImRlcFR5cGUiLCJQUk9EIiwidmVyc2lvblJlc3RyaWN0aW9uIiwiUkFOR0UiLCJKU09OIiwic3RyaW5naWZ5IiwibGVuZ3RoIiwiUHJvbWlzZSIsInJlc29sdmUiLCJjbWQiLCJjb25jYXQiLCJERVYiLCJwdXNoIiwiRVhBQ1QiLCJjd2QiLCJzdGRpbyIsImVyciIsIkV4aXRFcnJvciIsIkVycm9yIiwibWVzc2FnZSIsInN0ZGVyciIsInRvU3RyaW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7OztBQUVBLE1BQU1BLENBQUMsR0FBRyxvQkFBTSxxQ0FBTixDQUFWO0lBRVlDLE87OztXQUFBQSxPO0FBQUFBLEVBQUFBLE87QUFBQUEsRUFBQUEsTztHQUFBQSxPLHVCQUFBQSxPOztJQUtBQyxxQjs7O1dBQUFBLHFCO0FBQUFBLEVBQUFBLHFCO0FBQUFBLEVBQUFBLHFCO0dBQUFBLHFCLHFDQUFBQSxxQjs7ZUFLRyxPQUNiQyxHQURhLEVBRWJDLElBRmEsRUFHYkMsT0FBTyxHQUFHSixPQUFPLENBQUNLLElBSEwsRUFJYkMsa0JBQWtCLEdBQUdMLHFCQUFxQixDQUFDTSxLQUo5QixLQUtWO0FBQUU7QUFDTFIsRUFBQUEsQ0FBQyxDQUFDLFlBQUQsRUFBZVMsSUFBSSxDQUFDQyxTQUFMLENBQWVOLElBQWYsQ0FBZixFQUFxQyxLQUFyQyxFQUE0Q0QsR0FBNUMsRUFBa0QsV0FBVUUsT0FBUSx1QkFBc0JFLGtCQUFtQixhQUFZLHlCQUFVLEVBQW5JLENBQUQ7O0FBQ0EsTUFBSUgsSUFBSSxDQUFDTyxNQUFMLEtBQWdCLENBQXBCLEVBQXVCO0FBQ3JCWCxJQUFBQSxDQUFDLENBQUMsMENBQUQsQ0FBRDtBQUNBLFdBQU9ZLE9BQU8sQ0FBQ0MsT0FBUixFQUFQO0FBQ0Q7O0FBQ0QsTUFBSUMsR0FBRyxHQUFHLENBQUMsU0FBRCxFQUFZQyxNQUFaLENBQW1CWCxJQUFuQixDQUFWOztBQUNBLE1BQUkseUJBQUosRUFBZTtBQUNiVSxJQUFBQSxHQUFHLEdBQUcsQ0FBQyxLQUFELEVBQVFDLE1BQVIsQ0FBZVgsSUFBZixDQUFOO0FBQ0EsUUFBSUMsT0FBTyxLQUFLSixPQUFPLENBQUNlLEdBQXhCLEVBQTZCRixHQUFHLENBQUNHLElBQUosQ0FBUyxPQUFUO0FBQzdCLFFBQUlWLGtCQUFrQixLQUFLTCxxQkFBcUIsQ0FBQ2dCLEtBQWpELEVBQXdESixHQUFHLENBQUNHLElBQUosQ0FBUyxTQUFUO0FBQ3pELEdBSkQsTUFJTztBQUNMLFFBQUlWLGtCQUFrQixLQUFLTCxxQkFBcUIsQ0FBQ2dCLEtBQWpELEVBQXdESixHQUFHLENBQUNHLElBQUosQ0FBUyxjQUFUO0FBQ3hELFFBQUlaLE9BQU8sS0FBS0osT0FBTyxDQUFDZSxHQUF4QixFQUE2QkYsR0FBRyxDQUFDRyxJQUFKLENBQVMsWUFBVDtBQUM3QixRQUFJWixPQUFPLEtBQUtKLE9BQU8sQ0FBQ0ssSUFBeEIsRUFBOEJRLEdBQUcsQ0FBQ0csSUFBSixDQUFTLFFBQVQ7QUFDL0I7O0FBQ0RqQixFQUFBQSxDQUFDLENBQUMsV0FBRCxFQUFjUyxJQUFJLENBQUNDLFNBQUwsQ0FBZUksR0FBZixDQUFkLEVBQW1DLEtBQW5DLEVBQTBDWCxHQUExQyxDQUFEOztBQUNBLE1BQUk7QUFDRixVQUFNLCtCQUFlVyxHQUFmLEVBQW9CO0FBQ3hCSyxNQUFBQSxHQUFHLEVBQUVoQixHQURtQjtBQUV4QmlCLE1BQUFBLEtBQUssRUFBRTtBQUZpQixLQUFwQixDQUFOO0FBSUQsR0FMRCxDQUtFLE9BQU9DLEdBQVAsRUFBWTtBQUNaLFFBQUlBLEdBQUcsWUFBWUMsNEJBQW5CLEVBQThCO0FBQzVCLFlBQU0sSUFBSUMsS0FBSixDQUFXLDhCQUE2QmQsSUFBSSxDQUFDQyxTQUFMLENBQWVOLElBQWYsQ0FBcUIsb0JBQW1CaUIsR0FBRyxDQUFDRyxPQUFRLEtBQUlILEdBQUcsQ0FBQ0ksTUFBSixHQUFhSixHQUFHLENBQUNJLE1BQUosQ0FBV0MsUUFBWCxFQUFiLEdBQXFDLEVBQUcsRUFBeEksQ0FBTjtBQUNELEtBRkQsTUFFTztBQUNMLFlBQU1MLEdBQU47QUFDRDtBQUNGO0FBQ0YsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgeyBFeGl0RXJyb3IgfSBmcm9tICdAbWFsZXB0L2Nyb3NzLXNwYXduLXByb21pc2UnO1xuaW1wb3J0IHsgeWFybk9yTnBtU3Bhd24sIGhhc1lhcm4gfSBmcm9tICcuL3lhcm4tb3ItbnBtJztcblxuY29uc3QgZCA9IGRlYnVnKCdlbGVjdHJvbi1mb3JnZTpkZXBlbmRlbmN5LWluc3RhbGxlcicpO1xuXG5leHBvcnQgZW51bSBEZXBUeXBlIHtcbiAgUFJPRCA9ICdQUk9EJyxcbiAgREVWID0gJ0RFVicsXG59XG5cbmV4cG9ydCBlbnVtIERlcFZlcnNpb25SZXN0cmljdGlvbiB7XG4gIEVYQUNUID0gJ0VYQUNUJyxcbiAgUkFOR0UgPSAnUkFOR0UnLFxufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoXG4gIGRpcjogc3RyaW5nLFxuICBkZXBzOiBzdHJpbmdbXSxcbiAgZGVwVHlwZSA9IERlcFR5cGUuUFJPRCxcbiAgdmVyc2lvblJlc3RyaWN0aW9uID0gRGVwVmVyc2lvblJlc3RyaWN0aW9uLlJBTkdFLFxuKSA9PiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZCgnaW5zdGFsbGluZycsIEpTT04uc3RyaW5naWZ5KGRlcHMpLCAnaW46JywgZGlyLCBgZGVwVHlwZT0ke2RlcFR5cGV9LHZlcnNpb25SZXN0cmljdGlvbj0ke3ZlcnNpb25SZXN0cmljdGlvbn0sd2l0aFlhcm49JHtoYXNZYXJuKCl9YCk7XG4gIGlmIChkZXBzLmxlbmd0aCA9PT0gMCkge1xuICAgIGQoJ25vdGhpbmcgdG8gaW5zdGFsbCwgc3RvcHBpbmcgaW1tZWRpYXRlbHknKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cbiAgbGV0IGNtZCA9IFsnaW5zdGFsbCddLmNvbmNhdChkZXBzKTtcbiAgaWYgKGhhc1lhcm4oKSkge1xuICAgIGNtZCA9IFsnYWRkJ10uY29uY2F0KGRlcHMpO1xuICAgIGlmIChkZXBUeXBlID09PSBEZXBUeXBlLkRFVikgY21kLnB1c2goJy0tZGV2Jyk7XG4gICAgaWYgKHZlcnNpb25SZXN0cmljdGlvbiA9PT0gRGVwVmVyc2lvblJlc3RyaWN0aW9uLkVYQUNUKSBjbWQucHVzaCgnLS1leGFjdCcpO1xuICB9IGVsc2Uge1xuICAgIGlmICh2ZXJzaW9uUmVzdHJpY3Rpb24gPT09IERlcFZlcnNpb25SZXN0cmljdGlvbi5FWEFDVCkgY21kLnB1c2goJy0tc2F2ZS1leGFjdCcpO1xuICAgIGlmIChkZXBUeXBlID09PSBEZXBUeXBlLkRFVikgY21kLnB1c2goJy0tc2F2ZS1kZXYnKTtcbiAgICBpZiAoZGVwVHlwZSA9PT0gRGVwVHlwZS5QUk9EKSBjbWQucHVzaCgnLS1zYXZlJyk7XG4gIH1cbiAgZCgnZXhlY3V0aW5nJywgSlNPTi5zdHJpbmdpZnkoY21kKSwgJ2luOicsIGRpcik7XG4gIHRyeSB7XG4gICAgYXdhaXQgeWFybk9yTnBtU3Bhd24oY21kLCB7XG4gICAgICBjd2Q6IGRpcixcbiAgICAgIHN0ZGlvOiAncGlwZScsXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFeGl0RXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGluc3RhbGwgbW9kdWxlczogJHtKU09OLnN0cmluZ2lmeShkZXBzKX1cXG5cXG5XaXRoIG91dHB1dDogJHtlcnIubWVzc2FnZX1cXG4ke2Vyci5zdGRlcnIgPyBlcnIuc3RkZXJyLnRvU3RyaW5nKCkgOiAnJ31gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxufTtcbiJdfQ==