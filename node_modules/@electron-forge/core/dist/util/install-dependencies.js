"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DepVersionRestriction = exports.DepType = void 0;

require("source-map-support/register");

var _debug = _interopRequireDefault(require("debug"));

var _crossSpawnPromise = require("@malept/cross-spawn-promise");

var _yarnOrNpm = require("./yarn-or-npm");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const d = (0, _debug.default)('electron-forge:dependency-installer');
let DepType;
exports.DepType = DepType;

(function (DepType) {
  DepType["PROD"] = "PROD";
  DepType["DEV"] = "DEV";
})(DepType || (exports.DepType = DepType = {}));

let DepVersionRestriction;
exports.DepVersionRestriction = DepVersionRestriction;

(function (DepVersionRestriction) {
  DepVersionRestriction["EXACT"] = "EXACT";
  DepVersionRestriction["RANGE"] = "RANGE";
})(DepVersionRestriction || (exports.DepVersionRestriction = DepVersionRestriction = {}));

var _default = async (dir, deps, depType = DepType.PROD, versionRestriction = DepVersionRestriction.RANGE) => {
  d('installing', JSON.stringify(deps), 'in:', dir, `depType=${depType},versionRestriction=${versionRestriction},withYarn=${(0, _yarnOrNpm.hasYarn)()}`);

  if (deps.length === 0) {
    d('nothing to install, stopping immediately');
    return Promise.resolve();
  }

  let cmd = ['install'].concat(deps);

  if ((0, _yarnOrNpm.hasYarn)()) {
    cmd = ['add'].concat(deps);
    if (depType === DepType.DEV) cmd.push('--dev');
    if (versionRestriction === DepVersionRestriction.EXACT) cmd.push('--exact');
  } else {
    if (versionRestriction === DepVersionRestriction.EXACT) cmd.push('--save-exact');
    if (depType === DepType.DEV) cmd.push('--save-dev');
    if (depType === DepType.PROD) cmd.push('--save');
  }

  d('executing', JSON.stringify(cmd), 'in:', dir);

  try {
    await (0, _yarnOrNpm.yarnOrNpmSpawn)(cmd, {
      cwd: dir,
      stdio: 'pipe'
    });
  } catch (err) {
    if (err instanceof _crossSpawnPromise.ExitError) {
      throw new Error(`Failed to install modules: ${JSON.stringify(deps)}\n\nWith output: ${err.message}\n${err.stderr ? err.stderr.toString() : ''}`);
    } else {
      throw err;
    }
  }
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2luc3RhbGwtZGVwZW5kZW5jaWVzLnRzIl0sIm5hbWVzIjpbImQiLCJEZXBUeXBlIiwiRGVwVmVyc2lvblJlc3RyaWN0aW9uIiwiZGlyIiwiZGVwcyIsImRlcFR5cGUiLCJQUk9EIiwidmVyc2lvblJlc3RyaWN0aW9uIiwiUkFOR0UiLCJKU09OIiwic3RyaW5naWZ5IiwibGVuZ3RoIiwiUHJvbWlzZSIsInJlc29sdmUiLCJjbWQiLCJjb25jYXQiLCJERVYiLCJwdXNoIiwiRVhBQ1QiLCJjd2QiLCJzdGRpbyIsImVyciIsIkV4aXRFcnJvciIsIkVycm9yIiwibWVzc2FnZSIsInN0ZGVyciIsInRvU3RyaW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7OztBQUVBLE1BQU1BLENBQUMsR0FBRyxvQkFBTSxxQ0FBTixDQUFWO0lBRVlDLE87OztXQUFBQSxPO0FBQUFBLEVBQUFBLE87QUFBQUEsRUFBQUEsTztHQUFBQSxPLHVCQUFBQSxPOztJQUtBQyxxQjs7O1dBQUFBLHFCO0FBQUFBLEVBQUFBLHFCO0FBQUFBLEVBQUFBLHFCO0dBQUFBLHFCLHFDQUFBQSxxQjs7ZUFLRyxPQUFPQyxHQUFQLEVBQW9CQyxJQUFwQixFQUFvQ0MsT0FBTyxHQUFHSixPQUFPLENBQUNLLElBQXRELEVBQTREQyxrQkFBa0IsR0FBR0wscUJBQXFCLENBQUNNLEtBQXZHLEtBQWdJO0FBQzdJUixFQUFBQSxDQUFDLENBQUMsWUFBRCxFQUFlUyxJQUFJLENBQUNDLFNBQUwsQ0FBZU4sSUFBZixDQUFmLEVBQXFDLEtBQXJDLEVBQTRDRCxHQUE1QyxFQUFrRCxXQUFVRSxPQUFRLHVCQUFzQkUsa0JBQW1CLGFBQVkseUJBQVUsRUFBbkksQ0FBRDs7QUFDQSxNQUFJSCxJQUFJLENBQUNPLE1BQUwsS0FBZ0IsQ0FBcEIsRUFBdUI7QUFDckJYLElBQUFBLENBQUMsQ0FBQywwQ0FBRCxDQUFEO0FBQ0EsV0FBT1ksT0FBTyxDQUFDQyxPQUFSLEVBQVA7QUFDRDs7QUFDRCxNQUFJQyxHQUFHLEdBQUcsQ0FBQyxTQUFELEVBQVlDLE1BQVosQ0FBbUJYLElBQW5CLENBQVY7O0FBQ0EsTUFBSSx5QkFBSixFQUFlO0FBQ2JVLElBQUFBLEdBQUcsR0FBRyxDQUFDLEtBQUQsRUFBUUMsTUFBUixDQUFlWCxJQUFmLENBQU47QUFDQSxRQUFJQyxPQUFPLEtBQUtKLE9BQU8sQ0FBQ2UsR0FBeEIsRUFBNkJGLEdBQUcsQ0FBQ0csSUFBSixDQUFTLE9BQVQ7QUFDN0IsUUFBSVYsa0JBQWtCLEtBQUtMLHFCQUFxQixDQUFDZ0IsS0FBakQsRUFBd0RKLEdBQUcsQ0FBQ0csSUFBSixDQUFTLFNBQVQ7QUFDekQsR0FKRCxNQUlPO0FBQ0wsUUFBSVYsa0JBQWtCLEtBQUtMLHFCQUFxQixDQUFDZ0IsS0FBakQsRUFBd0RKLEdBQUcsQ0FBQ0csSUFBSixDQUFTLGNBQVQ7QUFDeEQsUUFBSVosT0FBTyxLQUFLSixPQUFPLENBQUNlLEdBQXhCLEVBQTZCRixHQUFHLENBQUNHLElBQUosQ0FBUyxZQUFUO0FBQzdCLFFBQUlaLE9BQU8sS0FBS0osT0FBTyxDQUFDSyxJQUF4QixFQUE4QlEsR0FBRyxDQUFDRyxJQUFKLENBQVMsUUFBVDtBQUMvQjs7QUFDRGpCLEVBQUFBLENBQUMsQ0FBQyxXQUFELEVBQWNTLElBQUksQ0FBQ0MsU0FBTCxDQUFlSSxHQUFmLENBQWQsRUFBbUMsS0FBbkMsRUFBMENYLEdBQTFDLENBQUQ7O0FBQ0EsTUFBSTtBQUNGLFVBQU0sK0JBQWVXLEdBQWYsRUFBb0I7QUFDeEJLLE1BQUFBLEdBQUcsRUFBRWhCLEdBRG1CO0FBRXhCaUIsTUFBQUEsS0FBSyxFQUFFO0FBRmlCLEtBQXBCLENBQU47QUFJRCxHQUxELENBS0UsT0FBT0MsR0FBUCxFQUFZO0FBQ1osUUFBSUEsR0FBRyxZQUFZQyw0QkFBbkIsRUFBOEI7QUFDNUIsWUFBTSxJQUFJQyxLQUFKLENBQVcsOEJBQTZCZCxJQUFJLENBQUNDLFNBQUwsQ0FBZU4sSUFBZixDQUFxQixvQkFBbUJpQixHQUFHLENBQUNHLE9BQVEsS0FBSUgsR0FBRyxDQUFDSSxNQUFKLEdBQWFKLEdBQUcsQ0FBQ0ksTUFBSixDQUFXQyxRQUFYLEVBQWIsR0FBcUMsRUFBRyxFQUF4SSxDQUFOO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsWUFBTUwsR0FBTjtBQUNEO0FBQ0Y7QUFDRixDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCB7IEV4aXRFcnJvciB9IGZyb20gJ0BtYWxlcHQvY3Jvc3Mtc3Bhd24tcHJvbWlzZSc7XG5pbXBvcnQgeyB5YXJuT3JOcG1TcGF3biwgaGFzWWFybiB9IGZyb20gJy4veWFybi1vci1ucG0nO1xuXG5jb25zdCBkID0gZGVidWcoJ2VsZWN0cm9uLWZvcmdlOmRlcGVuZGVuY3ktaW5zdGFsbGVyJyk7XG5cbmV4cG9ydCBlbnVtIERlcFR5cGUge1xuICBQUk9EID0gJ1BST0QnLFxuICBERVYgPSAnREVWJyxcbn1cblxuZXhwb3J0IGVudW0gRGVwVmVyc2lvblJlc3RyaWN0aW9uIHtcbiAgRVhBQ1QgPSAnRVhBQ1QnLFxuICBSQU5HRSA9ICdSQU5HRScsXG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIChkaXI6IHN0cmluZywgZGVwczogc3RyaW5nW10sIGRlcFR5cGUgPSBEZXBUeXBlLlBST0QsIHZlcnNpb25SZXN0cmljdGlvbiA9IERlcFZlcnNpb25SZXN0cmljdGlvbi5SQU5HRSk6IFByb21pc2U8dm9pZD4gPT4ge1xuICBkKCdpbnN0YWxsaW5nJywgSlNPTi5zdHJpbmdpZnkoZGVwcyksICdpbjonLCBkaXIsIGBkZXBUeXBlPSR7ZGVwVHlwZX0sdmVyc2lvblJlc3RyaWN0aW9uPSR7dmVyc2lvblJlc3RyaWN0aW9ufSx3aXRoWWFybj0ke2hhc1lhcm4oKX1gKTtcbiAgaWYgKGRlcHMubGVuZ3RoID09PSAwKSB7XG4gICAgZCgnbm90aGluZyB0byBpbnN0YWxsLCBzdG9wcGluZyBpbW1lZGlhdGVseScpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuICBsZXQgY21kID0gWydpbnN0YWxsJ10uY29uY2F0KGRlcHMpO1xuICBpZiAoaGFzWWFybigpKSB7XG4gICAgY21kID0gWydhZGQnXS5jb25jYXQoZGVwcyk7XG4gICAgaWYgKGRlcFR5cGUgPT09IERlcFR5cGUuREVWKSBjbWQucHVzaCgnLS1kZXYnKTtcbiAgICBpZiAodmVyc2lvblJlc3RyaWN0aW9uID09PSBEZXBWZXJzaW9uUmVzdHJpY3Rpb24uRVhBQ1QpIGNtZC5wdXNoKCctLWV4YWN0Jyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZlcnNpb25SZXN0cmljdGlvbiA9PT0gRGVwVmVyc2lvblJlc3RyaWN0aW9uLkVYQUNUKSBjbWQucHVzaCgnLS1zYXZlLWV4YWN0Jyk7XG4gICAgaWYgKGRlcFR5cGUgPT09IERlcFR5cGUuREVWKSBjbWQucHVzaCgnLS1zYXZlLWRldicpO1xuICAgIGlmIChkZXBUeXBlID09PSBEZXBUeXBlLlBST0QpIGNtZC5wdXNoKCctLXNhdmUnKTtcbiAgfVxuICBkKCdleGVjdXRpbmcnLCBKU09OLnN0cmluZ2lmeShjbWQpLCAnaW46JywgZGlyKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCB5YXJuT3JOcG1TcGF3bihjbWQsIHtcbiAgICAgIGN3ZDogZGlyLFxuICAgICAgc3RkaW86ICdwaXBlJyxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKGVyciBpbnN0YW5jZW9mIEV4aXRFcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gaW5zdGFsbCBtb2R1bGVzOiAke0pTT04uc3RyaW5naWZ5KGRlcHMpfVxcblxcbldpdGggb3V0cHV0OiAke2Vyci5tZXNzYWdlfVxcbiR7ZXJyLnN0ZGVyciA/IGVyci5zdGRlcnIudG9TdHJpbmcoKSA6ICcnfWApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG59O1xuIl19