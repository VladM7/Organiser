"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pluginCompileExists = pluginCompileExists;
exports.default = locateElectronExecutable;

require("source-map-support/register");

var _logSymbols = _interopRequireDefault(require("log-symbols"));

var _path = _interopRequireDefault(require("path"));

var _electronVersion = require("./electron-version");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function pluginCompileExists(packageJSON) {
  if (!packageJSON.devDependencies) {
    return false;
  }

  const pluginCompileName = '@electron-forge/plugin-compile';

  const findPluginCompile = packageName => packageName === pluginCompileName;

  if (Object.keys(packageJSON.devDependencies).find(findPluginCompile)) {
    return true;
  }

  if (Object.keys(packageJSON.dependencies || {}).find(findPluginCompile)) {
    // eslint-disable-next-line no-console
    console.warn(_logSymbols.default.warning, `${pluginCompileName} was detected in dependencies, it should be in devDependencies`.yellow);
    return true;
  }

  return false;
}

async function locateElectronExecutable(dir, packageJSON) {
  var _electronModulePath;

  let electronModulePath = await (0, _electronVersion.getElectronModulePath)(dir, packageJSON);

  if ((_electronModulePath = electronModulePath) !== null && _electronModulePath !== void 0 && _electronModulePath.endsWith('electron-prebuilt-compile') && !pluginCompileExists(packageJSON)) {
    // eslint-disable-next-line no-console
    console.warn(_logSymbols.default.warning, 'WARNING: found electron-prebuilt-compile without the Electron Forge compile plugin. Please remove the deprecated electron-prebuilt-compile from your devDependencies.'.yellow);
    electronModulePath = undefined;
  } // eslint-disable-next-line import/no-dynamic-require, global-require


  let electronExecPath = require(electronModulePath || _path.default.resolve(dir, 'node_modules/electron'));

  if (typeof electronExecPath !== 'string') {
    // eslint-disable-next-line no-console
    console.warn(_logSymbols.default.warning, 'Returned Electron executable path is not a string, defaulting to a hardcoded location. Value:', electronExecPath); // eslint-disable-next-line import/no-dynamic-require, global-require

    electronExecPath = require(_path.default.resolve(dir, 'node_modules/electron'));
  }

  return electronExecPath;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2VsZWN0cm9uLWV4ZWN1dGFibGUudHMiXSwibmFtZXMiOlsicGx1Z2luQ29tcGlsZUV4aXN0cyIsInBhY2thZ2VKU09OIiwiZGV2RGVwZW5kZW5jaWVzIiwicGx1Z2luQ29tcGlsZU5hbWUiLCJmaW5kUGx1Z2luQ29tcGlsZSIsInBhY2thZ2VOYW1lIiwiT2JqZWN0Iiwia2V5cyIsImZpbmQiLCJkZXBlbmRlbmNpZXMiLCJjb25zb2xlIiwid2FybiIsImxvZ1N5bWJvbHMiLCJ3YXJuaW5nIiwieWVsbG93IiwibG9jYXRlRWxlY3Ryb25FeGVjdXRhYmxlIiwiZGlyIiwiZWxlY3Ryb25Nb2R1bGVQYXRoIiwiZW5kc1dpdGgiLCJ1bmRlZmluZWQiLCJlbGVjdHJvbkV4ZWNQYXRoIiwicmVxdWlyZSIsInBhdGgiLCJyZXNvbHZlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7Ozs7QUFLTyxTQUFTQSxtQkFBVCxDQUE2QkMsV0FBN0IsRUFBZ0U7QUFDckUsTUFBSSxDQUFDQSxXQUFXLENBQUNDLGVBQWpCLEVBQWtDO0FBQ2hDLFdBQU8sS0FBUDtBQUNEOztBQUVELFFBQU1DLGlCQUFpQixHQUFHLGdDQUExQjs7QUFDQSxRQUFNQyxpQkFBaUIsR0FBSUMsV0FBRCxJQUFrQ0EsV0FBVyxLQUFLRixpQkFBNUU7O0FBRUEsTUFBSUcsTUFBTSxDQUFDQyxJQUFQLENBQVlOLFdBQVcsQ0FBQ0MsZUFBeEIsRUFBeURNLElBQXpELENBQThESixpQkFBOUQsQ0FBSixFQUFzRjtBQUNwRixXQUFPLElBQVA7QUFDRDs7QUFFRCxNQUFJRSxNQUFNLENBQUNDLElBQVAsQ0FBWU4sV0FBVyxDQUFDUSxZQUFaLElBQTRDLEVBQXhELEVBQTRERCxJQUE1RCxDQUFpRUosaUJBQWpFLENBQUosRUFBeUY7QUFDdkY7QUFDQU0sSUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWFDLG9CQUFXQyxPQUF4QixFQUFrQyxHQUFFVixpQkFBa0IsZ0VBQXJCLENBQXFGVyxNQUF0SDtBQUNBLFdBQU8sSUFBUDtBQUNEOztBQUVELFNBQU8sS0FBUDtBQUNEOztBQUVjLGVBQWVDLHdCQUFmLENBQ2JDLEdBRGEsRUFFYmYsV0FGYSxFQUdJO0FBQUE7O0FBQ2pCLE1BQUlnQixrQkFBc0MsR0FBRyxNQUFNLDRDQUFzQkQsR0FBdEIsRUFBMkJmLFdBQTNCLENBQW5EOztBQUNBLE1BQUksdUJBQUFnQixrQkFBa0IsVUFBbEIsMERBQW9CQyxRQUFwQixDQUE2QiwyQkFBN0IsS0FBNkQsQ0FBQ2xCLG1CQUFtQixDQUFDQyxXQUFELENBQXJGLEVBQW9HO0FBQ2xHO0FBQ0FTLElBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFhQyxvQkFBV0MsT0FBeEIsRUFBaUMsd0tBQXdLQyxNQUF6TTtBQUNBRyxJQUFBQSxrQkFBa0IsR0FBR0UsU0FBckI7QUFDRCxHQU5nQixDQVFqQjs7O0FBQ0EsTUFBSUMsZ0JBQWdCLEdBQUdDLE9BQU8sQ0FBQ0osa0JBQWtCLElBQUlLLGNBQUtDLE9BQUwsQ0FBYVAsR0FBYixFQUFrQix1QkFBbEIsQ0FBdkIsQ0FBOUI7O0FBRUEsTUFBSSxPQUFPSSxnQkFBUCxLQUE0QixRQUFoQyxFQUEwQztBQUN4QztBQUNBVixJQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYUMsb0JBQVdDLE9BQXhCLEVBQWlDLCtGQUFqQyxFQUFrSU8sZ0JBQWxJLEVBRndDLENBR3hDOztBQUNBQSxJQUFBQSxnQkFBZ0IsR0FBR0MsT0FBTyxDQUFDQyxjQUFLQyxPQUFMLENBQWFQLEdBQWIsRUFBa0IsdUJBQWxCLENBQUQsQ0FBMUI7QUFDRDs7QUFFRCxTQUFPSSxnQkFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZ1N5bWJvbHMgZnJvbSAnbG9nLXN5bWJvbHMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCB7IGdldEVsZWN0cm9uTW9kdWxlUGF0aCB9IGZyb20gJy4vZWxlY3Ryb24tdmVyc2lvbic7XG5cbnR5cGUgUGFja2FnZUpTT04gPSBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbnR5cGUgRGVwZW5kZW5jaWVzID0gUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcblxuZXhwb3J0IGZ1bmN0aW9uIHBsdWdpbkNvbXBpbGVFeGlzdHMocGFja2FnZUpTT046IFBhY2thZ2VKU09OKTogYm9vbGVhbiB7XG4gIGlmICghcGFja2FnZUpTT04uZGV2RGVwZW5kZW5jaWVzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgcGx1Z2luQ29tcGlsZU5hbWUgPSAnQGVsZWN0cm9uLWZvcmdlL3BsdWdpbi1jb21waWxlJztcbiAgY29uc3QgZmluZFBsdWdpbkNvbXBpbGUgPSAocGFja2FnZU5hbWU6IHN0cmluZyk6IGJvb2xlYW4gPT4gcGFja2FnZU5hbWUgPT09IHBsdWdpbkNvbXBpbGVOYW1lO1xuXG4gIGlmIChPYmplY3Qua2V5cyhwYWNrYWdlSlNPTi5kZXZEZXBlbmRlbmNpZXMgYXMgRGVwZW5kZW5jaWVzKS5maW5kKGZpbmRQbHVnaW5Db21waWxlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKE9iamVjdC5rZXlzKHBhY2thZ2VKU09OLmRlcGVuZGVuY2llcyBhcyBEZXBlbmRlbmNpZXMgfHwge30pLmZpbmQoZmluZFBsdWdpbkNvbXBpbGUpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLndhcm4obG9nU3ltYm9scy53YXJuaW5nLCBgJHtwbHVnaW5Db21waWxlTmFtZX0gd2FzIGRldGVjdGVkIGluIGRlcGVuZGVuY2llcywgaXQgc2hvdWxkIGJlIGluIGRldkRlcGVuZGVuY2llc2AueWVsbG93KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gbG9jYXRlRWxlY3Ryb25FeGVjdXRhYmxlKFxuICBkaXI6IHN0cmluZyxcbiAgcGFja2FnZUpTT046IFBhY2thZ2VKU09OLFxuKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgbGV0IGVsZWN0cm9uTW9kdWxlUGF0aDogc3RyaW5nIHwgdW5kZWZpbmVkID0gYXdhaXQgZ2V0RWxlY3Ryb25Nb2R1bGVQYXRoKGRpciwgcGFja2FnZUpTT04pO1xuICBpZiAoZWxlY3Ryb25Nb2R1bGVQYXRoPy5lbmRzV2l0aCgnZWxlY3Ryb24tcHJlYnVpbHQtY29tcGlsZScpICYmICFwbHVnaW5Db21waWxlRXhpc3RzKHBhY2thZ2VKU09OKSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS53YXJuKGxvZ1N5bWJvbHMud2FybmluZywgJ1dBUk5JTkc6IGZvdW5kIGVsZWN0cm9uLXByZWJ1aWx0LWNvbXBpbGUgd2l0aG91dCB0aGUgRWxlY3Ryb24gRm9yZ2UgY29tcGlsZSBwbHVnaW4uIFBsZWFzZSByZW1vdmUgdGhlIGRlcHJlY2F0ZWQgZWxlY3Ryb24tcHJlYnVpbHQtY29tcGlsZSBmcm9tIHlvdXIgZGV2RGVwZW5kZW5jaWVzLicueWVsbG93KTtcbiAgICBlbGVjdHJvbk1vZHVsZVBhdGggPSB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWR5bmFtaWMtcmVxdWlyZSwgZ2xvYmFsLXJlcXVpcmVcbiAgbGV0IGVsZWN0cm9uRXhlY1BhdGggPSByZXF1aXJlKGVsZWN0cm9uTW9kdWxlUGF0aCB8fCBwYXRoLnJlc29sdmUoZGlyLCAnbm9kZV9tb2R1bGVzL2VsZWN0cm9uJykpO1xuXG4gIGlmICh0eXBlb2YgZWxlY3Ryb25FeGVjUGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUud2Fybihsb2dTeW1ib2xzLndhcm5pbmcsICdSZXR1cm5lZCBFbGVjdHJvbiBleGVjdXRhYmxlIHBhdGggaXMgbm90IGEgc3RyaW5nLCBkZWZhdWx0aW5nIHRvIGEgaGFyZGNvZGVkIGxvY2F0aW9uLiBWYWx1ZTonLCBlbGVjdHJvbkV4ZWNQYXRoKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWR5bmFtaWMtcmVxdWlyZSwgZ2xvYmFsLXJlcXVpcmVcbiAgICBlbGVjdHJvbkV4ZWNQYXRoID0gcmVxdWlyZShwYXRoLnJlc29sdmUoZGlyLCAnbm9kZV9tb2R1bGVzL2VsZWN0cm9uJykpO1xuICB9XG5cbiAgcmV0dXJuIGVsZWN0cm9uRXhlY1BhdGg7XG59XG4iXX0=