"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = locateElectronExecutable;
exports.pluginCompileExists = pluginCompileExists;

require("source-map-support/register");

var _chalk = _interopRequireDefault(require("chalk"));

var _logSymbols = _interopRequireDefault(require("log-symbols"));

var _path = _interopRequireDefault(require("path"));

var _electronVersion = require("./electron-version");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function pluginCompileExists(packageJSON) {
  if (!packageJSON.devDependencies) {
    return false;
  }

  const pluginCompileName = '@electron-forge/plugin-compile';

  const findPluginCompile = packageName => packageName === pluginCompileName;

  if (Object.keys(packageJSON.devDependencies).find(findPluginCompile)) {
    return true;
  }

  if (Object.keys(packageJSON.dependencies || {}).find(findPluginCompile)) {
    // eslint-disable-next-line no-console
    console.warn(_logSymbols.default.warning, _chalk.default.yellow(`${pluginCompileName} was detected in dependencies, it should be in devDependencies`));
    return true;
  }

  return false;
}

async function locateElectronExecutable(dir, packageJSON) {
  var _electronModulePath;

  let electronModulePath = await (0, _electronVersion.getElectronModulePath)(dir, packageJSON);

  if ((_electronModulePath = electronModulePath) !== null && _electronModulePath !== void 0 && _electronModulePath.endsWith('electron-prebuilt-compile') && !pluginCompileExists(packageJSON)) {
    // eslint-disable-next-line no-console
    console.warn(_logSymbols.default.warning, _chalk.default.yellow('WARNING: found electron-prebuilt-compile without the Electron Forge compile plugin. Please remove the deprecated electron-prebuilt-compile from your devDependencies.'));
    electronModulePath = undefined;
  } // eslint-disable-next-line @typescript-eslint/no-var-requires, import/no-dynamic-require, global-require


  let electronExecPath = require(electronModulePath || _path.default.resolve(dir, 'node_modules/electron'));

  if (typeof electronExecPath !== 'string') {
    // eslint-disable-next-line no-console
    console.warn(_logSymbols.default.warning, 'Returned Electron executable path is not a string, defaulting to a hardcoded location. Value:', electronExecPath); // eslint-disable-next-line import/no-dynamic-require, global-require

    electronExecPath = require(_path.default.resolve(dir, 'node_modules/electron'));
  }

  return electronExecPath;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2VsZWN0cm9uLWV4ZWN1dGFibGUudHMiXSwibmFtZXMiOlsicGx1Z2luQ29tcGlsZUV4aXN0cyIsInBhY2thZ2VKU09OIiwiZGV2RGVwZW5kZW5jaWVzIiwicGx1Z2luQ29tcGlsZU5hbWUiLCJmaW5kUGx1Z2luQ29tcGlsZSIsInBhY2thZ2VOYW1lIiwiT2JqZWN0Iiwia2V5cyIsImZpbmQiLCJkZXBlbmRlbmNpZXMiLCJjb25zb2xlIiwid2FybiIsImxvZ1N5bWJvbHMiLCJ3YXJuaW5nIiwiY2hhbGsiLCJ5ZWxsb3ciLCJsb2NhdGVFbGVjdHJvbkV4ZWN1dGFibGUiLCJkaXIiLCJlbGVjdHJvbk1vZHVsZVBhdGgiLCJlbmRzV2l0aCIsInVuZGVmaW5lZCIsImVsZWN0cm9uRXhlY1BhdGgiLCJyZXF1aXJlIiwicGF0aCIsInJlc29sdmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQTs7OztBQUtPLFNBQVNBLG1CQUFULENBQTZCQyxXQUE3QixFQUFnRTtBQUNyRSxNQUFJLENBQUNBLFdBQVcsQ0FBQ0MsZUFBakIsRUFBa0M7QUFDaEMsV0FBTyxLQUFQO0FBQ0Q7O0FBRUQsUUFBTUMsaUJBQWlCLEdBQUcsZ0NBQTFCOztBQUNBLFFBQU1DLGlCQUFpQixHQUFJQyxXQUFELElBQWtDQSxXQUFXLEtBQUtGLGlCQUE1RTs7QUFFQSxNQUFJRyxNQUFNLENBQUNDLElBQVAsQ0FBWU4sV0FBVyxDQUFDQyxlQUF4QixFQUF5RE0sSUFBekQsQ0FBOERKLGlCQUE5RCxDQUFKLEVBQXNGO0FBQ3BGLFdBQU8sSUFBUDtBQUNEOztBQUVELE1BQUlFLE1BQU0sQ0FBQ0MsSUFBUCxDQUFhTixXQUFXLENBQUNRLFlBQWIsSUFBOEMsRUFBMUQsRUFBOERELElBQTlELENBQW1FSixpQkFBbkUsQ0FBSixFQUEyRjtBQUN6RjtBQUNBTSxJQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYUMsb0JBQVdDLE9BQXhCLEVBQWlDQyxlQUFNQyxNQUFOLENBQWMsR0FBRVosaUJBQWtCLGdFQUFsQyxDQUFqQztBQUNBLFdBQU8sSUFBUDtBQUNEOztBQUVELFNBQU8sS0FBUDtBQUNEOztBQUVjLGVBQWVhLHdCQUFmLENBQXdDQyxHQUF4QyxFQUFxRGhCLFdBQXJELEVBQWdHO0FBQUE7O0FBQzdHLE1BQUlpQixrQkFBc0MsR0FBRyxNQUFNLDRDQUFzQkQsR0FBdEIsRUFBMkJoQixXQUEzQixDQUFuRDs7QUFDQSxNQUFJLHVCQUFBaUIsa0JBQWtCLFVBQWxCLDBEQUFvQkMsUUFBcEIsQ0FBNkIsMkJBQTdCLEtBQTZELENBQUNuQixtQkFBbUIsQ0FBQ0MsV0FBRCxDQUFyRixFQUFvRztBQUNsRztBQUNBUyxJQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FDRUMsb0JBQVdDLE9BRGIsRUFFRUMsZUFBTUMsTUFBTixDQUNFLHVLQURGLENBRkY7QUFNQUcsSUFBQUEsa0JBQWtCLEdBQUdFLFNBQXJCO0FBQ0QsR0FYNEcsQ0FhN0c7OztBQUNBLE1BQUlDLGdCQUFnQixHQUFHQyxPQUFPLENBQUNKLGtCQUFrQixJQUFJSyxjQUFLQyxPQUFMLENBQWFQLEdBQWIsRUFBa0IsdUJBQWxCLENBQXZCLENBQTlCOztBQUVBLE1BQUksT0FBT0ksZ0JBQVAsS0FBNEIsUUFBaEMsRUFBMEM7QUFDeEM7QUFDQVgsSUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWFDLG9CQUFXQyxPQUF4QixFQUFpQywrRkFBakMsRUFBa0lRLGdCQUFsSSxFQUZ3QyxDQUd4Qzs7QUFDQUEsSUFBQUEsZ0JBQWdCLEdBQUdDLE9BQU8sQ0FBQ0MsY0FBS0MsT0FBTCxDQUFhUCxHQUFiLEVBQWtCLHVCQUFsQixDQUFELENBQTFCO0FBQ0Q7O0FBRUQsU0FBT0ksZ0JBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgbG9nU3ltYm9scyBmcm9tICdsb2ctc3ltYm9scyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuaW1wb3J0IHsgZ2V0RWxlY3Ryb25Nb2R1bGVQYXRoIH0gZnJvbSAnLi9lbGVjdHJvbi12ZXJzaW9uJztcblxudHlwZSBQYWNrYWdlSlNPTiA9IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xudHlwZSBEZXBlbmRlbmNpZXMgPSBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuXG5leHBvcnQgZnVuY3Rpb24gcGx1Z2luQ29tcGlsZUV4aXN0cyhwYWNrYWdlSlNPTjogUGFja2FnZUpTT04pOiBib29sZWFuIHtcbiAgaWYgKCFwYWNrYWdlSlNPTi5kZXZEZXBlbmRlbmNpZXMpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBwbHVnaW5Db21waWxlTmFtZSA9ICdAZWxlY3Ryb24tZm9yZ2UvcGx1Z2luLWNvbXBpbGUnO1xuICBjb25zdCBmaW5kUGx1Z2luQ29tcGlsZSA9IChwYWNrYWdlTmFtZTogc3RyaW5nKTogYm9vbGVhbiA9PiBwYWNrYWdlTmFtZSA9PT0gcGx1Z2luQ29tcGlsZU5hbWU7XG5cbiAgaWYgKE9iamVjdC5rZXlzKHBhY2thZ2VKU09OLmRldkRlcGVuZGVuY2llcyBhcyBEZXBlbmRlbmNpZXMpLmZpbmQoZmluZFBsdWdpbkNvbXBpbGUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoT2JqZWN0LmtleXMoKHBhY2thZ2VKU09OLmRlcGVuZGVuY2llcyBhcyBEZXBlbmRlbmNpZXMpIHx8IHt9KS5maW5kKGZpbmRQbHVnaW5Db21waWxlKSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS53YXJuKGxvZ1N5bWJvbHMud2FybmluZywgY2hhbGsueWVsbG93KGAke3BsdWdpbkNvbXBpbGVOYW1lfSB3YXMgZGV0ZWN0ZWQgaW4gZGVwZW5kZW5jaWVzLCBpdCBzaG91bGQgYmUgaW4gZGV2RGVwZW5kZW5jaWVzYCkpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBsb2NhdGVFbGVjdHJvbkV4ZWN1dGFibGUoZGlyOiBzdHJpbmcsIHBhY2thZ2VKU09OOiBQYWNrYWdlSlNPTik6IFByb21pc2U8c3RyaW5nPiB7XG4gIGxldCBlbGVjdHJvbk1vZHVsZVBhdGg6IHN0cmluZyB8IHVuZGVmaW5lZCA9IGF3YWl0IGdldEVsZWN0cm9uTW9kdWxlUGF0aChkaXIsIHBhY2thZ2VKU09OKTtcbiAgaWYgKGVsZWN0cm9uTW9kdWxlUGF0aD8uZW5kc1dpdGgoJ2VsZWN0cm9uLXByZWJ1aWx0LWNvbXBpbGUnKSAmJiAhcGx1Z2luQ29tcGlsZUV4aXN0cyhwYWNrYWdlSlNPTikpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUud2FybihcbiAgICAgIGxvZ1N5bWJvbHMud2FybmluZyxcbiAgICAgIGNoYWxrLnllbGxvdyhcbiAgICAgICAgJ1dBUk5JTkc6IGZvdW5kIGVsZWN0cm9uLXByZWJ1aWx0LWNvbXBpbGUgd2l0aG91dCB0aGUgRWxlY3Ryb24gRm9yZ2UgY29tcGlsZSBwbHVnaW4uIFBsZWFzZSByZW1vdmUgdGhlIGRlcHJlY2F0ZWQgZWxlY3Ryb24tcHJlYnVpbHQtY29tcGlsZSBmcm9tIHlvdXIgZGV2RGVwZW5kZW5jaWVzLidcbiAgICAgIClcbiAgICApO1xuICAgIGVsZWN0cm9uTW9kdWxlUGF0aCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzLCBpbXBvcnQvbm8tZHluYW1pYy1yZXF1aXJlLCBnbG9iYWwtcmVxdWlyZVxuICBsZXQgZWxlY3Ryb25FeGVjUGF0aCA9IHJlcXVpcmUoZWxlY3Ryb25Nb2R1bGVQYXRoIHx8IHBhdGgucmVzb2x2ZShkaXIsICdub2RlX21vZHVsZXMvZWxlY3Ryb24nKSk7XG5cbiAgaWYgKHR5cGVvZiBlbGVjdHJvbkV4ZWNQYXRoICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS53YXJuKGxvZ1N5bWJvbHMud2FybmluZywgJ1JldHVybmVkIEVsZWN0cm9uIGV4ZWN1dGFibGUgcGF0aCBpcyBub3QgYSBzdHJpbmcsIGRlZmF1bHRpbmcgdG8gYSBoYXJkY29kZWQgbG9jYXRpb24uIFZhbHVlOicsIGVsZWN0cm9uRXhlY1BhdGgpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZHluYW1pYy1yZXF1aXJlLCBnbG9iYWwtcmVxdWlyZVxuICAgIGVsZWN0cm9uRXhlY1BhdGggPSByZXF1aXJlKHBhdGgucmVzb2x2ZShkaXIsICdub2RlX21vZHVsZXMvZWxlY3Ryb24nKSk7XG4gIH1cblxuICByZXR1cm4gZWxlY3Ryb25FeGVjUGF0aDtcbn1cbiJdfQ==