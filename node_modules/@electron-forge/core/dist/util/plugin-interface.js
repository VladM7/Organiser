"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _pluginBase = _interopRequireDefault(require("@electron-forge/plugin-base"));

var _debug = _interopRequireDefault(require("debug"));

var _requireSearch = _interopRequireDefault(require("./require-search"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const d = (0, _debug.default)('electron-forge:plugins');

class PluginInterface {
  constructor(dir, forgeConfig) {
    _defineProperty(this, "plugins", void 0);

    _defineProperty(this, "config", void 0);

    this.plugins = forgeConfig.plugins.map(plugin => {
      // eslint-disable-next-line no-underscore-dangle
      if (plugin.__isElectronForgePlugin) {
        return plugin;
      }

      if (Array.isArray(plugin)) {
        const [pluginName, opts = {}] = plugin;

        if (typeof pluginName !== 'string') {
          throw new Error(`Expected plugin[0] to be a string but found ${pluginName}`);
        }

        const Plugin = (0, _requireSearch.default)(dir, [pluginName]);

        if (!Plugin) {
          throw new Error(`Could not find module with name: ${plugin[0]}. Make sure it's listed in the devDependencies of your package.json`);
        }

        return new Plugin(opts);
      }

      throw new Error(`Expected plugin to either be a plugin instance or [string, object] but found ${plugin}`);
    }); // Fix linting

    this.config = null;
    Object.defineProperty(this, 'config', {
      value: forgeConfig,
      enumerable: false,
      configurable: false,
      writable: false
    });

    for (const plugin of this.plugins) {
      plugin.init(dir, forgeConfig);
    }

    this.triggerHook = this.triggerHook.bind(this);
    this.overrideStartLogic = this.overrideStartLogic.bind(this);
  }

  async triggerHook(hookName, hookArgs) {
    for (const plugin of this.plugins) {
      if (typeof plugin.getHook === 'function') {
        const hook = plugin.getHook(hookName);
        if (hook) await hook(this.config, ...hookArgs);
      }
    }
  }

  async triggerMutatingHook(hookName, item) {
    for (const plugin of this.plugins) {
      if (typeof plugin.getHook === 'function') {
        const hook = plugin.getHook(hookName);

        if (hook) {
          item = await hook(this.config, item);
        }
      }
    }

    return item;
  }

  async overrideStartLogic(opts) {
    let newStartFn;
    const claimed = [];

    for (const plugin of this.plugins) {
      if (typeof plugin.startLogic === 'function' && plugin.startLogic !== _pluginBase.default.prototype.startLogic) {
        claimed.push(plugin.name);
        newStartFn = plugin.startLogic;
      }
    }

    if (claimed.length > 1) {
      throw new Error(`Multiple plugins tried to take control of the start command, please remove one of them\n --> ${claimed.join(', ')}`);
    }

    if (claimed.length === 1 && newStartFn) {
      d(`plugin: "${claimed[0]}" has taken control of the start command`);
      return newStartFn(opts);
    }

    return false;
  }

}

exports.default = PluginInterface;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,