"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.requireSearchRaw = requireSearchRaw;
exports.default = void 0;

require("source-map-support/register");

var _debug = _interopRequireDefault(require("debug"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const d = (0, _debug.default)('electron-forge:require-search'); // https://github.com/nodejs/node/blob/da0ede1ad55a502a25b4139f58aab3fb1ee3bf3f/lib/internal/modules/cjs/loader.js#L353-L359

function requireSearchRaw(relativeTo, paths) {
  const testPaths = paths.concat(paths.map(mapPath => _path.default.resolve(relativeTo, mapPath))).concat(paths.map(mapPath => _path.default.resolve(relativeTo, 'node_modules', mapPath)));
  d('searching', testPaths, 'relative to', relativeTo);

  for (const testPath of testPaths) {
    try {
      d('testing', testPath); // eslint-disable-next-line global-require, import/no-dynamic-require

      return require(testPath);
    } catch (err) {
      if (err instanceof Error) {
        const requireErr = err; // Ignore require-related errors

        if (requireErr.code !== 'MODULE_NOT_FOUND' || ![undefined, testPath].includes(requireErr.requestPath)) {
          throw err;
        }
      }
    }
  }

  d('failed to find a module in', testPaths);
  return null;
}

// eslint-disable-next-line arrow-parens
var _default = (relativeTo, paths) => {
  const result = requireSearchRaw(relativeTo, paths);
  return typeof result === 'object' && result && result.default ? result.default : result;
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL3JlcXVpcmUtc2VhcmNoLnRzIl0sIm5hbWVzIjpbImQiLCJyZXF1aXJlU2VhcmNoUmF3IiwicmVsYXRpdmVUbyIsInBhdGhzIiwidGVzdFBhdGhzIiwiY29uY2F0IiwibWFwIiwibWFwUGF0aCIsInBhdGgiLCJyZXNvbHZlIiwidGVzdFBhdGgiLCJyZXF1aXJlIiwiZXJyIiwiRXJyb3IiLCJyZXF1aXJlRXJyIiwiY29kZSIsInVuZGVmaW5lZCIsImluY2x1ZGVzIiwicmVxdWVzdFBhdGgiLCJyZXN1bHQiLCJkZWZhdWx0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxDQUFDLEdBQUcsb0JBQU0sK0JBQU4sQ0FBVixDLENBRUE7O0FBT08sU0FBU0MsZ0JBQVQsQ0FBNkJDLFVBQTdCLEVBQWlEQyxLQUFqRCxFQUE0RTtBQUNqRixRQUFNQyxTQUFTLEdBQUdELEtBQUssQ0FDcEJFLE1BRGUsQ0FDUkYsS0FBSyxDQUFDRyxHQUFOLENBQVdDLE9BQUQsSUFBYUMsY0FBS0MsT0FBTCxDQUFhUCxVQUFiLEVBQXlCSyxPQUF6QixDQUF2QixDQURRLEVBRWZGLE1BRmUsQ0FFUkYsS0FBSyxDQUFDRyxHQUFOLENBQVdDLE9BQUQsSUFBYUMsY0FBS0MsT0FBTCxDQUFhUCxVQUFiLEVBQXlCLGNBQXpCLEVBQXlDSyxPQUF6QyxDQUF2QixDQUZRLENBQWxCO0FBR0FQLEVBQUFBLENBQUMsQ0FBQyxXQUFELEVBQWNJLFNBQWQsRUFBeUIsYUFBekIsRUFBd0NGLFVBQXhDLENBQUQ7O0FBQ0EsT0FBSyxNQUFNUSxRQUFYLElBQXVCTixTQUF2QixFQUFrQztBQUNoQyxRQUFJO0FBQ0ZKLE1BQUFBLENBQUMsQ0FBQyxTQUFELEVBQVlVLFFBQVosQ0FBRCxDQURFLENBRUY7O0FBQ0EsYUFBT0MsT0FBTyxDQUFDRCxRQUFELENBQWQ7QUFDRCxLQUpELENBSUUsT0FBT0UsR0FBUCxFQUFZO0FBQ1osVUFBSUEsR0FBRyxZQUFZQyxLQUFuQixFQUEwQjtBQUN4QixjQUFNQyxVQUFVLEdBQUdGLEdBQW5CLENBRHdCLENBRXhCOztBQUNBLFlBQUlFLFVBQVUsQ0FBQ0MsSUFBWCxLQUFvQixrQkFBcEIsSUFBMEMsQ0FBQyxDQUFDQyxTQUFELEVBQVlOLFFBQVosRUFBc0JPLFFBQXRCLENBQStCSCxVQUFVLENBQUNJLFdBQTFDLENBQS9DLEVBQXVHO0FBQ3JHLGdCQUFNTixHQUFOO0FBQ0Q7QUFDRjtBQUNGO0FBQ0Y7O0FBQ0RaLEVBQUFBLENBQUMsQ0FBQyw0QkFBRCxFQUErQkksU0FBL0IsQ0FBRDtBQUNBLFNBQU8sSUFBUDtBQUNEOztBQU1EO2VBQ2UsQ0FBSUYsVUFBSixFQUF3QkMsS0FBeEIsS0FBc0Q7QUFDbkUsUUFBTWdCLE1BQU0sR0FBR2xCLGdCQUFnQixDQUFvQkMsVUFBcEIsRUFBZ0NDLEtBQWhDLENBQS9CO0FBQ0EsU0FBTyxPQUFPZ0IsTUFBUCxLQUFrQixRQUFsQixJQUE4QkEsTUFBOUIsSUFBd0NBLE1BQU0sQ0FBQ0MsT0FBL0MsR0FBeURELE1BQU0sQ0FBQ0MsT0FBaEUsR0FBMEVELE1BQWpGO0FBQ0QsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuY29uc3QgZCA9IGRlYnVnKCdlbGVjdHJvbi1mb3JnZTpyZXF1aXJlLXNlYXJjaCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi9kYTBlZGUxYWQ1NWE1MDJhMjViNDEzOWY1OGFhYjNmYjFlZTNiZjNmL2xpYi9pbnRlcm5hbC9tb2R1bGVzL2Nqcy9sb2FkZXIuanMjTDM1My1MMzU5XG50eXBlIFJlcXVpcmVFcnJvciA9IEVycm9yICYge1xuICBjb2RlOiBzdHJpbmc7XG4gIHBhdGg6IHN0cmluZztcbiAgcmVxdWVzdFBhdGg6IHN0cmluZyB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcXVpcmVTZWFyY2hSYXc8VD4ocmVsYXRpdmVUbzogc3RyaW5nLCBwYXRoczogc3RyaW5nW10pOiBUIHwgbnVsbCB7XG4gIGNvbnN0IHRlc3RQYXRocyA9IHBhdGhzXG4gICAgLmNvbmNhdChwYXRocy5tYXAoKG1hcFBhdGgpID0+IHBhdGgucmVzb2x2ZShyZWxhdGl2ZVRvLCBtYXBQYXRoKSkpXG4gICAgLmNvbmNhdChwYXRocy5tYXAoKG1hcFBhdGgpID0+IHBhdGgucmVzb2x2ZShyZWxhdGl2ZVRvLCAnbm9kZV9tb2R1bGVzJywgbWFwUGF0aCkpKTtcbiAgZCgnc2VhcmNoaW5nJywgdGVzdFBhdGhzLCAncmVsYXRpdmUgdG8nLCByZWxhdGl2ZVRvKTtcbiAgZm9yIChjb25zdCB0ZXN0UGF0aCBvZiB0ZXN0UGF0aHMpIHtcbiAgICB0cnkge1xuICAgICAgZCgndGVzdGluZycsIHRlc3RQYXRoKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBnbG9iYWwtcmVxdWlyZSwgaW1wb3J0L25vLWR5bmFtaWMtcmVxdWlyZVxuICAgICAgcmV0dXJuIHJlcXVpcmUodGVzdFBhdGgpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGNvbnN0IHJlcXVpcmVFcnIgPSBlcnIgYXMgUmVxdWlyZUVycm9yO1xuICAgICAgICAvLyBJZ25vcmUgcmVxdWlyZS1yZWxhdGVkIGVycm9yc1xuICAgICAgICBpZiAocmVxdWlyZUVyci5jb2RlICE9PSAnTU9EVUxFX05PVF9GT1VORCcgfHwgIVt1bmRlZmluZWQsIHRlc3RQYXRoXS5pbmNsdWRlcyhyZXF1aXJlRXJyLnJlcXVlc3RQYXRoKSkge1xuICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBkKCdmYWlsZWQgdG8gZmluZCBhIG1vZHVsZSBpbicsIHRlc3RQYXRocyk7XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgdHlwZSBQb3NzaWJsZU1vZHVsZTxUPiA9IHtcbiAgZGVmYXVsdD86IFQ7XG59ICYgVDtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGFycm93LXBhcmVuc1xuZXhwb3J0IGRlZmF1bHQgPFQ+KHJlbGF0aXZlVG86IHN0cmluZywgcGF0aHM6IHN0cmluZ1tdKTogVCB8IG51bGwgPT4ge1xuICBjb25zdCByZXN1bHQgPSByZXF1aXJlU2VhcmNoUmF3PFBvc3NpYmxlTW9kdWxlPFQ+PihyZWxhdGl2ZVRvLCBwYXRocyk7XG4gIHJldHVybiB0eXBlb2YgcmVzdWx0ID09PSAnb2JqZWN0JyAmJiByZXN1bHQgJiYgcmVzdWx0LmRlZmF1bHQgPyByZXN1bHQuZGVmYXVsdCA6IHJlc3VsdCBhcyAoVCB8IG51bGwpO1xufTtcbiJdfQ==