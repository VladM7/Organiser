"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.requireSearchRaw = requireSearchRaw;
exports.default = void 0;

require("source-map-support/register");

var _debug = _interopRequireDefault(require("debug"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const d = (0, _debug.default)('electron-forge:require-search');

function requireSearchRaw(relativeTo, paths) {
  const testPaths = paths.concat(paths.map(mapPath => _path.default.resolve(relativeTo, mapPath))).concat(paths.map(mapPath => _path.default.resolve(relativeTo, 'node_modules', mapPath)));
  d('searching', testPaths, 'relative to', relativeTo);

  for (const testPath of testPaths) {
    try {
      d('testing', testPath); // eslint-disable-next-line global-require, import/no-dynamic-require

      return require(testPath);
    } catch (err) {
      // Ignore require-related errors
      if (err.code !== 'MODULE_NOT_FOUND' || ![undefined, testPath].includes(err.requestPath)) {
        throw err;
      }
    }
  }

  d('failed to find a module in', testPaths);
  return null;
}

// eslint-disable-next-line arrow-parens
var _default = (relativeTo, paths) => {
  const result = requireSearchRaw(relativeTo, paths);
  return typeof result === 'object' && result && result.default ? result.default : result;
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL3JlcXVpcmUtc2VhcmNoLnRzIl0sIm5hbWVzIjpbImQiLCJyZXF1aXJlU2VhcmNoUmF3IiwicmVsYXRpdmVUbyIsInBhdGhzIiwidGVzdFBhdGhzIiwiY29uY2F0IiwibWFwIiwibWFwUGF0aCIsInBhdGgiLCJyZXNvbHZlIiwidGVzdFBhdGgiLCJyZXF1aXJlIiwiZXJyIiwiY29kZSIsInVuZGVmaW5lZCIsImluY2x1ZGVzIiwicmVxdWVzdFBhdGgiLCJyZXN1bHQiLCJkZWZhdWx0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxDQUFDLEdBQUcsb0JBQU0sK0JBQU4sQ0FBVjs7QUFFTyxTQUFTQyxnQkFBVCxDQUE2QkMsVUFBN0IsRUFBaURDLEtBQWpELEVBQTRFO0FBQ2pGLFFBQU1DLFNBQVMsR0FBR0QsS0FBSyxDQUNwQkUsTUFEZSxDQUNSRixLQUFLLENBQUNHLEdBQU4sQ0FBV0MsT0FBRCxJQUFhQyxjQUFLQyxPQUFMLENBQWFQLFVBQWIsRUFBeUJLLE9BQXpCLENBQXZCLENBRFEsRUFFZkYsTUFGZSxDQUVSRixLQUFLLENBQUNHLEdBQU4sQ0FBV0MsT0FBRCxJQUFhQyxjQUFLQyxPQUFMLENBQWFQLFVBQWIsRUFBeUIsY0FBekIsRUFBeUNLLE9BQXpDLENBQXZCLENBRlEsQ0FBbEI7QUFHQVAsRUFBQUEsQ0FBQyxDQUFDLFdBQUQsRUFBY0ksU0FBZCxFQUF5QixhQUF6QixFQUF3Q0YsVUFBeEMsQ0FBRDs7QUFDQSxPQUFLLE1BQU1RLFFBQVgsSUFBdUJOLFNBQXZCLEVBQWtDO0FBQ2hDLFFBQUk7QUFDRkosTUFBQUEsQ0FBQyxDQUFDLFNBQUQsRUFBWVUsUUFBWixDQUFELENBREUsQ0FFRjs7QUFDQSxhQUFPQyxPQUFPLENBQUNELFFBQUQsQ0FBZDtBQUNELEtBSkQsQ0FJRSxPQUFPRSxHQUFQLEVBQVk7QUFDWjtBQUNBLFVBQUlBLEdBQUcsQ0FBQ0MsSUFBSixLQUFhLGtCQUFiLElBQW1DLENBQUMsQ0FBQ0MsU0FBRCxFQUFZSixRQUFaLEVBQXNCSyxRQUF0QixDQUErQkgsR0FBRyxDQUFDSSxXQUFuQyxDQUF4QyxFQUF5RjtBQUN2RixjQUFNSixHQUFOO0FBQ0Q7QUFDRjtBQUNGOztBQUNEWixFQUFBQSxDQUFDLENBQUMsNEJBQUQsRUFBK0JJLFNBQS9CLENBQUQ7QUFDQSxTQUFPLElBQVA7QUFDRDs7QUFNRDtlQUNlLENBQUlGLFVBQUosRUFBd0JDLEtBQXhCLEtBQXNEO0FBQ25FLFFBQU1jLE1BQU0sR0FBR2hCLGdCQUFnQixDQUFvQkMsVUFBcEIsRUFBZ0NDLEtBQWhDLENBQS9CO0FBQ0EsU0FBTyxPQUFPYyxNQUFQLEtBQWtCLFFBQWxCLElBQThCQSxNQUE5QixJQUF3Q0EsTUFBTSxDQUFDQyxPQUEvQyxHQUF5REQsTUFBTSxDQUFDQyxPQUFoRSxHQUEwRUQsTUFBakY7QUFDRCxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5jb25zdCBkID0gZGVidWcoJ2VsZWN0cm9uLWZvcmdlOnJlcXVpcmUtc2VhcmNoJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiByZXF1aXJlU2VhcmNoUmF3PFQ+KHJlbGF0aXZlVG86IHN0cmluZywgcGF0aHM6IHN0cmluZ1tdKTogVCB8IG51bGwge1xuICBjb25zdCB0ZXN0UGF0aHMgPSBwYXRoc1xuICAgIC5jb25jYXQocGF0aHMubWFwKChtYXBQYXRoKSA9PiBwYXRoLnJlc29sdmUocmVsYXRpdmVUbywgbWFwUGF0aCkpKVxuICAgIC5jb25jYXQocGF0aHMubWFwKChtYXBQYXRoKSA9PiBwYXRoLnJlc29sdmUocmVsYXRpdmVUbywgJ25vZGVfbW9kdWxlcycsIG1hcFBhdGgpKSk7XG4gIGQoJ3NlYXJjaGluZycsIHRlc3RQYXRocywgJ3JlbGF0aXZlIHRvJywgcmVsYXRpdmVUbyk7XG4gIGZvciAoY29uc3QgdGVzdFBhdGggb2YgdGVzdFBhdGhzKSB7XG4gICAgdHJ5IHtcbiAgICAgIGQoJ3Rlc3RpbmcnLCB0ZXN0UGF0aCk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ2xvYmFsLXJlcXVpcmUsIGltcG9ydC9uby1keW5hbWljLXJlcXVpcmVcbiAgICAgIHJldHVybiByZXF1aXJlKHRlc3RQYXRoKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIC8vIElnbm9yZSByZXF1aXJlLXJlbGF0ZWQgZXJyb3JzXG4gICAgICBpZiAoZXJyLmNvZGUgIT09ICdNT0RVTEVfTk9UX0ZPVU5EJyB8fCAhW3VuZGVmaW5lZCwgdGVzdFBhdGhdLmluY2x1ZGVzKGVyci5yZXF1ZXN0UGF0aCkpIHtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBkKCdmYWlsZWQgdG8gZmluZCBhIG1vZHVsZSBpbicsIHRlc3RQYXRocyk7XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgdHlwZSBQb3NzaWJsZU1vZHVsZTxUPiA9IHtcbiAgZGVmYXVsdD86IFQ7XG59ICYgVDtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGFycm93LXBhcmVuc1xuZXhwb3J0IGRlZmF1bHQgPFQ+KHJlbGF0aXZlVG86IHN0cmluZywgcGF0aHM6IHN0cmluZ1tdKTogVCB8IG51bGwgPT4ge1xuICBjb25zdCByZXN1bHQgPSByZXF1aXJlU2VhcmNoUmF3PFBvc3NpYmxlTW9kdWxlPFQ+PihyZWxhdGl2ZVRvLCBwYXRocyk7XG4gIHJldHVybiB0eXBlb2YgcmVzdWx0ID09PSAnb2JqZWN0JyAmJiByZXN1bHQgJiYgcmVzdWx0LmRlZmF1bHQgPyByZXN1bHQuZGVmYXVsdCA6IHJlc3VsdCBhcyAoVCB8IG51bGwpO1xufTtcbiJdfQ==