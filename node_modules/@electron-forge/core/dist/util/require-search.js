"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.requireSearchRaw = requireSearchRaw;

require("source-map-support/register");

var _debug = _interopRequireDefault(require("debug"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const d = (0, _debug.default)('electron-forge:require-search'); // https://github.com/nodejs/node/blob/da0ede1ad55a502a25b4139f58aab3fb1ee3bf3f/lib/internal/modules/cjs/loader.js#L353-L359

function requireSearchRaw(relativeTo, paths) {
  const testPaths = paths.concat(paths.map(mapPath => _path.default.resolve(relativeTo, mapPath))).concat(paths.map(mapPath => _path.default.resolve(relativeTo, 'node_modules', mapPath)));
  d('searching', testPaths, 'relative to', relativeTo);

  for (const testPath of testPaths) {
    try {
      d('testing', testPath); // eslint-disable-next-line global-require, import/no-dynamic-require

      return require(testPath);
    } catch (err) {
      if (err instanceof Error) {
        const requireErr = err; // Ignore require-related errors

        if (requireErr.code !== 'MODULE_NOT_FOUND' || ![undefined, testPath].includes(requireErr.requestPath)) {
          throw err;
        }
      }
    }
  }

  d('failed to find a module in', testPaths);
  return null;
}

// eslint-disable-next-line arrow-parens
var _default = (relativeTo, paths) => {
  const result = requireSearchRaw(relativeTo, paths);
  return typeof result === 'object' && result && result.default ? result.default : result;
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL3JlcXVpcmUtc2VhcmNoLnRzIl0sIm5hbWVzIjpbImQiLCJyZXF1aXJlU2VhcmNoUmF3IiwicmVsYXRpdmVUbyIsInBhdGhzIiwidGVzdFBhdGhzIiwiY29uY2F0IiwibWFwIiwibWFwUGF0aCIsInBhdGgiLCJyZXNvbHZlIiwidGVzdFBhdGgiLCJyZXF1aXJlIiwiZXJyIiwiRXJyb3IiLCJyZXF1aXJlRXJyIiwiY29kZSIsInVuZGVmaW5lZCIsImluY2x1ZGVzIiwicmVxdWVzdFBhdGgiLCJyZXN1bHQiLCJkZWZhdWx0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxDQUFDLEdBQUcsb0JBQU0sK0JBQU4sQ0FBVixDLENBRUE7O0FBT08sU0FBU0MsZ0JBQVQsQ0FBNkJDLFVBQTdCLEVBQWlEQyxLQUFqRCxFQUE0RTtBQUNqRixRQUFNQyxTQUFTLEdBQUdELEtBQUssQ0FDcEJFLE1BRGUsQ0FDUkYsS0FBSyxDQUFDRyxHQUFOLENBQVdDLE9BQUQsSUFBYUMsY0FBS0MsT0FBTCxDQUFhUCxVQUFiLEVBQXlCSyxPQUF6QixDQUF2QixDQURRLEVBRWZGLE1BRmUsQ0FFUkYsS0FBSyxDQUFDRyxHQUFOLENBQVdDLE9BQUQsSUFBYUMsY0FBS0MsT0FBTCxDQUFhUCxVQUFiLEVBQXlCLGNBQXpCLEVBQXlDSyxPQUF6QyxDQUF2QixDQUZRLENBQWxCO0FBR0FQLEVBQUFBLENBQUMsQ0FBQyxXQUFELEVBQWNJLFNBQWQsRUFBeUIsYUFBekIsRUFBd0NGLFVBQXhDLENBQUQ7O0FBQ0EsT0FBSyxNQUFNUSxRQUFYLElBQXVCTixTQUF2QixFQUFrQztBQUNoQyxRQUFJO0FBQ0ZKLE1BQUFBLENBQUMsQ0FBQyxTQUFELEVBQVlVLFFBQVosQ0FBRCxDQURFLENBRUY7O0FBQ0EsYUFBT0MsT0FBTyxDQUFDRCxRQUFELENBQWQ7QUFDRCxLQUpELENBSUUsT0FBT0UsR0FBUCxFQUFZO0FBQ1osVUFBSUEsR0FBRyxZQUFZQyxLQUFuQixFQUEwQjtBQUN4QixjQUFNQyxVQUFVLEdBQUdGLEdBQW5CLENBRHdCLENBRXhCOztBQUNBLFlBQUlFLFVBQVUsQ0FBQ0MsSUFBWCxLQUFvQixrQkFBcEIsSUFBMEMsQ0FBQyxDQUFDQyxTQUFELEVBQVlOLFFBQVosRUFBc0JPLFFBQXRCLENBQStCSCxVQUFVLENBQUNJLFdBQTFDLENBQS9DLEVBQXVHO0FBQ3JHLGdCQUFNTixHQUFOO0FBQ0Q7QUFDRjtBQUNGO0FBQ0Y7O0FBQ0RaLEVBQUFBLENBQUMsQ0FBQyw0QkFBRCxFQUErQkksU0FBL0IsQ0FBRDtBQUNBLFNBQU8sSUFBUDtBQUNEOztBQU1EO2VBQ2UsQ0FBSUYsVUFBSixFQUF3QkMsS0FBeEIsS0FBc0Q7QUFDbkUsUUFBTWdCLE1BQU0sR0FBR2xCLGdCQUFnQixDQUFvQkMsVUFBcEIsRUFBZ0NDLEtBQWhDLENBQS9CO0FBQ0EsU0FBTyxPQUFPZ0IsTUFBUCxLQUFrQixRQUFsQixJQUE4QkEsTUFBOUIsSUFBd0NBLE1BQU0sQ0FBQ0MsT0FBL0MsR0FBeURELE1BQU0sQ0FBQ0MsT0FBaEUsR0FBMkVELE1BQWxGO0FBQ0QsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuY29uc3QgZCA9IGRlYnVnKCdlbGVjdHJvbi1mb3JnZTpyZXF1aXJlLXNlYXJjaCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi9kYTBlZGUxYWQ1NWE1MDJhMjViNDEzOWY1OGFhYjNmYjFlZTNiZjNmL2xpYi9pbnRlcm5hbC9tb2R1bGVzL2Nqcy9sb2FkZXIuanMjTDM1My1MMzU5XG50eXBlIFJlcXVpcmVFcnJvciA9IEVycm9yICYge1xuICBjb2RlOiBzdHJpbmc7XG4gIHBhdGg6IHN0cmluZztcbiAgcmVxdWVzdFBhdGg6IHN0cmluZyB8IHVuZGVmaW5lZDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiByZXF1aXJlU2VhcmNoUmF3PFQ+KHJlbGF0aXZlVG86IHN0cmluZywgcGF0aHM6IHN0cmluZ1tdKTogVCB8IG51bGwge1xuICBjb25zdCB0ZXN0UGF0aHMgPSBwYXRoc1xuICAgIC5jb25jYXQocGF0aHMubWFwKChtYXBQYXRoKSA9PiBwYXRoLnJlc29sdmUocmVsYXRpdmVUbywgbWFwUGF0aCkpKVxuICAgIC5jb25jYXQocGF0aHMubWFwKChtYXBQYXRoKSA9PiBwYXRoLnJlc29sdmUocmVsYXRpdmVUbywgJ25vZGVfbW9kdWxlcycsIG1hcFBhdGgpKSk7XG4gIGQoJ3NlYXJjaGluZycsIHRlc3RQYXRocywgJ3JlbGF0aXZlIHRvJywgcmVsYXRpdmVUbyk7XG4gIGZvciAoY29uc3QgdGVzdFBhdGggb2YgdGVzdFBhdGhzKSB7XG4gICAgdHJ5IHtcbiAgICAgIGQoJ3Rlc3RpbmcnLCB0ZXN0UGF0aCk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ2xvYmFsLXJlcXVpcmUsIGltcG9ydC9uby1keW5hbWljLXJlcXVpcmVcbiAgICAgIHJldHVybiByZXF1aXJlKHRlc3RQYXRoKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBjb25zdCByZXF1aXJlRXJyID0gZXJyIGFzIFJlcXVpcmVFcnJvcjtcbiAgICAgICAgLy8gSWdub3JlIHJlcXVpcmUtcmVsYXRlZCBlcnJvcnNcbiAgICAgICAgaWYgKHJlcXVpcmVFcnIuY29kZSAhPT0gJ01PRFVMRV9OT1RfRk9VTkQnIHx8ICFbdW5kZWZpbmVkLCB0ZXN0UGF0aF0uaW5jbHVkZXMocmVxdWlyZUVyci5yZXF1ZXN0UGF0aCkpIHtcbiAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZCgnZmFpbGVkIHRvIGZpbmQgYSBtb2R1bGUgaW4nLCB0ZXN0UGF0aHMpO1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IHR5cGUgUG9zc2libGVNb2R1bGU8VD4gPSB7XG4gIGRlZmF1bHQ/OiBUO1xufSAmIFQ7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBhcnJvdy1wYXJlbnNcbmV4cG9ydCBkZWZhdWx0IDxUPihyZWxhdGl2ZVRvOiBzdHJpbmcsIHBhdGhzOiBzdHJpbmdbXSk6IFQgfCBudWxsID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gcmVxdWlyZVNlYXJjaFJhdzxQb3NzaWJsZU1vZHVsZTxUPj4ocmVsYXRpdmVUbywgcGF0aHMpO1xuICByZXR1cm4gdHlwZW9mIHJlc3VsdCA9PT0gJ29iamVjdCcgJiYgcmVzdWx0ICYmIHJlc3VsdC5kZWZhdWx0ID8gcmVzdWx0LmRlZmF1bHQgOiAocmVzdWx0IGFzIFQgfCBudWxsKTtcbn07XG4iXX0=