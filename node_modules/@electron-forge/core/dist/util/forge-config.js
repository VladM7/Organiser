"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.forgeConfigIsValidFilePath = forgeConfigIsValidFilePath;
exports.fromBuildIdentifier = fromBuildIdentifier;
exports.renderConfigTemplate = renderConfigTemplate;
exports.setInitialForgeConfig = setInitialForgeConfig;

require("source-map-support/register");

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _lodash = require("lodash");

var _readPackageJson = require("./read-package-json");

var _pluginInterface = _interopRequireDefault(require("./plugin-interface"));

var _hook = require("./hook");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const underscoreCase = str => str.replace(/(.)([A-Z][a-z]+)/g, '$1_$2').replace(/([a-z0-9])([A-Z])/g, '$1_$2').toUpperCase();

/* eslint-disable @typescript-eslint/no-explicit-any */
// eslint-disable-next-line arrow-parens
const proxify = (buildIdentifier, proxifiedObject, envPrefix) => {
  let newObject = {};

  if (Array.isArray(proxifiedObject)) {
    newObject = [];
  }

  for (const [key, val] of Object.entries(proxifiedObject)) {
    if (typeof val === 'object' && key !== 'pluginInterface' && !(val instanceof RegExp)) {
      newObject[key] = proxify(buildIdentifier, proxifiedObject[key], `${envPrefix}_${underscoreCase(key)}`);
    } else {
      newObject[key] = proxifiedObject[key];
    }
  }

  return new Proxy(newObject, {
    get(target, name, receiver) {
      // eslint-disable-next-line no-prototype-builtins
      if (!target.hasOwnProperty(name) && typeof name === 'string') {
        const envValue = process.env[`${envPrefix}_${underscoreCase(name)}`];
        if (envValue) return envValue;
      }

      const value = Reflect.get(target, name, receiver); // eslint-disable-next-line no-underscore-dangle

      if (value && typeof value === 'object' && value.__isMagicBuildIdentifierMap) {
        const identifier = typeof buildIdentifier === 'function' ? buildIdentifier() : buildIdentifier;
        return value.map[identifier];
      }

      return value;
    },

    getOwnPropertyDescriptor(target, name) {
      const envValue = process.env[`${envPrefix}_${underscoreCase(name)}`]; // eslint-disable-next-line no-prototype-builtins

      if (target.hasOwnProperty(name)) {
        return Reflect.getOwnPropertyDescriptor(target, name);
      }

      if (envValue) {
        return {
          writable: true,
          enumerable: true,
          configurable: true,
          value: envValue
        };
      }

      return undefined;
    }

  });
};
/* eslint-enable @typescript-eslint/no-explicit-any */

/**
 * Sets sensible defaults for the `config.forge` object.
 */


function setInitialForgeConfig(packageJSON) {
  // eslint-disable-line @typescript-eslint/no-explicit-any
  const {
    name = ''
  } = packageJSON;
  packageJSON.config.forge.makers[0].config.name = name.replace(/-/g, '_');
}

function fromBuildIdentifier(map) {
  return {
    map,
    __isMagicBuildIdentifierMap: true
  };
}

async function forgeConfigIsValidFilePath(dir, forgeConfig) {
  return typeof forgeConfig === 'string' && ((await _fsExtra.default.pathExists(_path.default.resolve(dir, forgeConfig))) || _fsExtra.default.pathExists(_path.default.resolve(dir, `${forgeConfig}.js`)));
} // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any


function renderConfigTemplate(dir, templateObj, obj) {
  for (const [key, value] of Object.entries(obj)) {
    if (typeof value === 'object' && value !== null) {
      renderConfigTemplate(dir, templateObj, value);
    } else if (typeof value === 'string') {
      obj[key] = (0, _lodash.template)(value)(templateObj);

      if (obj[key].startsWith('require:')) {
        // eslint-disable-next-line global-require, import/no-dynamic-require
        obj[key] = require(_path.default.resolve(dir, obj[key].substr(8)));
      }
    }
  }
}

var _default = async dir => {
  const packageJSON = await (0, _readPackageJson.readRawPackageJson)(dir);
  let forgeConfig = packageJSON.config && packageJSON.config.forge ? packageJSON.config.forge : null;

  if (!forgeConfig) {
    if (await _fsExtra.default.pathExists(_path.default.resolve(dir, 'forge.config.js'))) {
      forgeConfig = 'forge.config.js';
    } else {
      forgeConfig = {};
    }
  }

  if (await forgeConfigIsValidFilePath(dir, forgeConfig)) {
    try {
      // eslint-disable-next-line @typescript-eslint/no-var-requires, global-require, import/no-dynamic-require
      forgeConfig = require(_path.default.resolve(dir, forgeConfig));
    } catch (err) {
      // eslint-disable-next-line no-console
      console.error(`Failed to load: ${_path.default.resolve(dir, forgeConfig)}`);
      throw err;
    }
  } else if (typeof forgeConfig !== 'object') {
    throw new Error('Expected packageJSON.config.forge to be an object or point to a requirable JS file');
  }

  const defaultForgeConfig = {
    electronRebuildConfig: {},
    packagerConfig: {},
    makers: [],
    publishers: [],
    plugins: []
  };
  forgeConfig = { ...defaultForgeConfig,
    ...forgeConfig
  };
  const templateObj = { ...packageJSON,
    year: new Date().getFullYear()
  };
  renderConfigTemplate(dir, templateObj, forgeConfig);
  forgeConfig.pluginInterface = new _pluginInterface.default(dir, forgeConfig);
  forgeConfig = await (0, _hook.runMutatingHook)(forgeConfig, 'resolveForgeConfig', forgeConfig);
  return proxify(forgeConfig.buildIdentifier || '', forgeConfig, 'ELECTRON_FORGE');
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,