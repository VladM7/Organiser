"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _installerDarwin = _interopRequireDefault(require("@electron-forge/installer-darwin"));

var _crossSpawnPromise = require("@malept/cross-spawn-promise");

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class InstallerZip extends _installerDarwin.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", 'zip');
  }

  async install({
    filePath,
    installSpinner
  }) {
    await (0, _crossSpawnPromise.spawn)('unzip', ['-q', '-o', _path.default.basename(filePath)], {
      cwd: _path.default.dirname(filePath)
    });
    const appPath = (await _fsExtra.default.readdir(_path.default.dirname(filePath))).filter(file => file.endsWith('.app')).map(file => _path.default.resolve(_path.default.dirname(filePath), file)).sort((fA, fB) => _fsExtra.default.statSync(fA).ctime.getTime() - _fsExtra.default.statSync(fB).ctime.getTime())[0];
    const targetApplicationPath = `/Applications/${_path.default.basename(appPath)}`;
    await this.moveApp(appPath, targetApplicationPath, installSpinner);
    await (0, _crossSpawnPromise.spawn)('open', ['-R', targetApplicationPath], {
      detached: true
    });
  }

}

exports.default = InstallerZip;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9JbnN0YWxsZXJaaXAudHMiXSwibmFtZXMiOlsiSW5zdGFsbGVyWmlwIiwiSW5zdGFsbGVyRGFyd2luIiwiaW5zdGFsbCIsImZpbGVQYXRoIiwiaW5zdGFsbFNwaW5uZXIiLCJwYXRoIiwiYmFzZW5hbWUiLCJjd2QiLCJkaXJuYW1lIiwiYXBwUGF0aCIsImZzIiwicmVhZGRpciIsImZpbHRlciIsImZpbGUiLCJlbmRzV2l0aCIsIm1hcCIsInJlc29sdmUiLCJzb3J0IiwiZkEiLCJmQiIsInN0YXRTeW5jIiwiY3RpbWUiLCJnZXRUaW1lIiwidGFyZ2V0QXBwbGljYXRpb25QYXRoIiwibW92ZUFwcCIsImRldGFjaGVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFDQTs7QUFDQTs7Ozs7O0FBRWUsTUFBTUEsWUFBTixTQUEyQkMsd0JBQTNCLENBQTJDO0FBQUE7QUFBQTs7QUFBQSxrQ0FDakQsS0FEaUQ7QUFBQTs7QUFHeEQsUUFBTUMsT0FBTixDQUFjO0FBQ1pDLElBQUFBLFFBRFk7QUFFWkMsSUFBQUE7QUFGWSxHQUFkLEVBR3FCO0FBQ25CLFVBQU0sOEJBQU0sT0FBTixFQUFlLENBQUMsSUFBRCxFQUFPLElBQVAsRUFBYUMsY0FBS0MsUUFBTCxDQUFjSCxRQUFkLENBQWIsQ0FBZixFQUFzRDtBQUMxREksTUFBQUEsR0FBRyxFQUFFRixjQUFLRyxPQUFMLENBQWFMLFFBQWI7QUFEcUQsS0FBdEQsQ0FBTjtBQUlBLFVBQU1NLE9BQU8sR0FBRyxDQUFDLE1BQU1DLGlCQUFHQyxPQUFILENBQVdOLGNBQUtHLE9BQUwsQ0FBYUwsUUFBYixDQUFYLENBQVAsRUFBMkNTLE1BQTNDLENBQW1EQyxJQUFELElBQVVBLElBQUksQ0FBQ0MsUUFBTCxDQUFjLE1BQWQsQ0FBNUQsRUFDYkMsR0FEYSxDQUNSRixJQUFELElBQVVSLGNBQUtXLE9BQUwsQ0FBYVgsY0FBS0csT0FBTCxDQUFhTCxRQUFiLENBQWIsRUFBcUNVLElBQXJDLENBREQsRUFFYkksSUFGYSxDQUVSLENBQUNDLEVBQUQsRUFBS0MsRUFBTCxLQUFZVCxpQkFBR1UsUUFBSCxDQUFZRixFQUFaLEVBQWdCRyxLQUFoQixDQUFzQkMsT0FBdEIsS0FBa0NaLGlCQUFHVSxRQUFILENBQVlELEVBQVosRUFBZ0JFLEtBQWhCLENBQXNCQyxPQUF0QixFQUZ0QyxFQUV1RSxDQUZ2RSxDQUFoQjtBQUlBLFVBQU1DLHFCQUFxQixHQUFJLGlCQUFnQmxCLGNBQUtDLFFBQUwsQ0FBY0csT0FBZCxDQUF1QixFQUF0RTtBQUVBLFVBQU0sS0FBS2UsT0FBTCxDQUFhZixPQUFiLEVBQXNCYyxxQkFBdEIsRUFBNkNuQixjQUE3QyxDQUFOO0FBRUEsVUFBTSw4QkFBTSxNQUFOLEVBQWMsQ0FBQyxJQUFELEVBQU9tQixxQkFBUCxDQUFkLEVBQTZDO0FBQUVFLE1BQUFBLFFBQVEsRUFBRTtBQUFaLEtBQTdDLENBQU47QUFDRDs7QUFwQnVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEluc3RhbGxlckRhcndpbiwgeyBJbnN0YWxsZXJPcHRpb25zIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2luc3RhbGxlci1kYXJ3aW4nO1xuXG5pbXBvcnQgeyBzcGF3biB9IGZyb20gJ0BtYWxlcHQvY3Jvc3Mtc3Bhd24tcHJvbWlzZSc7XG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEluc3RhbGxlclppcCBleHRlbmRzIEluc3RhbGxlckRhcndpbiB7XG4gIG5hbWUgPSAnemlwJztcblxuICBhc3luYyBpbnN0YWxsKHtcbiAgICBmaWxlUGF0aCxcbiAgICBpbnN0YWxsU3Bpbm5lcixcbiAgfTogSW5zdGFsbGVyT3B0aW9ucykge1xuICAgIGF3YWl0IHNwYXduKCd1bnppcCcsIFsnLXEnLCAnLW8nLCBwYXRoLmJhc2VuYW1lKGZpbGVQYXRoKV0sIHtcbiAgICAgIGN3ZDogcGF0aC5kaXJuYW1lKGZpbGVQYXRoKSxcbiAgICB9IGFzIGFueSk7XG5cbiAgICBjb25zdCBhcHBQYXRoID0gKGF3YWl0IGZzLnJlYWRkaXIocGF0aC5kaXJuYW1lKGZpbGVQYXRoKSkpLmZpbHRlcigoZmlsZSkgPT4gZmlsZS5lbmRzV2l0aCgnLmFwcCcpKVxuICAgICAgLm1hcCgoZmlsZSkgPT4gcGF0aC5yZXNvbHZlKHBhdGguZGlybmFtZShmaWxlUGF0aCksIGZpbGUpKVxuICAgICAgLnNvcnQoKGZBLCBmQikgPT4gZnMuc3RhdFN5bmMoZkEpLmN0aW1lLmdldFRpbWUoKSAtIGZzLnN0YXRTeW5jKGZCKS5jdGltZS5nZXRUaW1lKCkpWzBdO1xuXG4gICAgY29uc3QgdGFyZ2V0QXBwbGljYXRpb25QYXRoID0gYC9BcHBsaWNhdGlvbnMvJHtwYXRoLmJhc2VuYW1lKGFwcFBhdGgpfWA7XG5cbiAgICBhd2FpdCB0aGlzLm1vdmVBcHAoYXBwUGF0aCwgdGFyZ2V0QXBwbGljYXRpb25QYXRoLCBpbnN0YWxsU3Bpbm5lcik7XG5cbiAgICBhd2FpdCBzcGF3bignb3BlbicsIFsnLVInLCB0YXJnZXRBcHBsaWNhdGlvblBhdGhdLCB7IGRldGFjaGVkOiB0cnVlIH0gYXMgYW55KTtcbiAgfVxufVxuIl19