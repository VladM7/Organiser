"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.fakeOra = void 0;

require("source-map-support/register");

require("colors");

var _debug = _interopRequireDefault(require("debug"));

require("log-symbols");

var _ora = _interopRequireDefault(require("ora"));

var _prettyMs = _interopRequireDefault(require("pretty-ms"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint "no-console": "off" */
const d = (0, _debug.default)('electron-forge:async-ora');
const useFakeOra = Boolean(process.env.DEBUG && process.env.DEBUG.includes('electron-forge'));

if (useFakeOra) {
  console.warn('WARNING: DEBUG environment variable detected.  Progress indicators will be sent over electron-forge:lifecycle'.red);
}

const fakeOra = name => {
  let oraName = name;
  let startTime = null;

  const timing = () => startTime ? `-- after ${`${(0, _prettyMs.default)(Date.now() - startTime)}`.cyan}` : null;

  const fake = {
    start: () => {
      startTime = Date.now();
      d('Process Started:', fake.text);
      return fake;
    },
    fail: () => {
      d(`Process Failed: ${fake.text}`.red, timing());
      return fake;
    },
    succeed: () => {
      d('Process Succeeded:', fake.text, timing());
      return fake;
    },
    stop: () => {
      d('Process Stopped:', fake.text, timing());
      return fake;
    },
    warn: warning => {
      d('Process Warned:', warning, timing());
      return fake;
    },

    get text() {
      return oraName;
    },

    set text(newName) {
      d('Process Renamed:', oraName, ' --> ', newName);
      oraName = newName;
    }

  };
  return fake;
};

exports.fakeOra = fakeOra;

var _default = useFakeOra ? fakeOra : _ora.default;

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vcmEudHMiXSwibmFtZXMiOlsiZCIsInVzZUZha2VPcmEiLCJCb29sZWFuIiwicHJvY2VzcyIsImVudiIsIkRFQlVHIiwiaW5jbHVkZXMiLCJjb25zb2xlIiwid2FybiIsInJlZCIsImZha2VPcmEiLCJuYW1lIiwib3JhTmFtZSIsInN0YXJ0VGltZSIsInRpbWluZyIsIkRhdGUiLCJub3ciLCJjeWFuIiwiZmFrZSIsInN0YXJ0IiwidGV4dCIsImZhaWwiLCJzdWNjZWVkIiwic3RvcCIsIndhcm5pbmciLCJuZXdOYW1lIiwicmVhbE9yYSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFMQTtBQVNBLE1BQU1BLENBQUMsR0FBRyxvQkFBTSwwQkFBTixDQUFWO0FBRUEsTUFBTUMsVUFBVSxHQUFHQyxPQUFPLENBQUNDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxLQUFaLElBQXFCRixPQUFPLENBQUNDLEdBQVIsQ0FBWUMsS0FBWixDQUFrQkMsUUFBbEIsQ0FBMkIsZ0JBQTNCLENBQXRCLENBQTFCOztBQUVBLElBQUlMLFVBQUosRUFBZ0I7QUFDZE0sRUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWEsZ0hBQWdIQyxHQUE3SDtBQUNEOztBQUVNLE1BQU1DLE9BQU8sR0FBSUMsSUFBRCxJQUFrQjtBQUN2QyxNQUFJQyxPQUFPLEdBQUdELElBQWQ7QUFDQSxNQUFJRSxTQUF3QixHQUFHLElBQS9COztBQUNBLFFBQU1DLE1BQU0sR0FBRyxNQUFPRCxTQUFTLEdBQUksWUFBWSxHQUFFLHVCQUFTRSxJQUFJLENBQUNDLEdBQUwsS0FBYUgsU0FBdEIsQ0FBaUMsRUFBcEMsQ0FBc0NJLElBQUssRUFBMUQsR0FBOEQsSUFBN0Y7O0FBQ0EsUUFBTUMsSUFBYSxHQUFHO0FBQ3BCQyxJQUFBQSxLQUFLLEVBQUUsTUFBTTtBQUNYTixNQUFBQSxTQUFTLEdBQUdFLElBQUksQ0FBQ0MsR0FBTCxFQUFaO0FBQ0FoQixNQUFBQSxDQUFDLENBQUMsa0JBQUQsRUFBcUJrQixJQUFJLENBQUNFLElBQTFCLENBQUQ7QUFDQSxhQUFPRixJQUFQO0FBQ0QsS0FMbUI7QUFNcEJHLElBQUFBLElBQUksRUFBRSxNQUFNO0FBQ1ZyQixNQUFBQSxDQUFDLENBQUUsbUJBQWtCa0IsSUFBSSxDQUFDRSxJQUFLLEVBQTdCLENBQStCWCxHQUFoQyxFQUFxQ0ssTUFBTSxFQUEzQyxDQUFEO0FBQ0EsYUFBT0ksSUFBUDtBQUNELEtBVG1CO0FBVXBCSSxJQUFBQSxPQUFPLEVBQUUsTUFBTTtBQUNidEIsTUFBQUEsQ0FBQyxDQUFDLG9CQUFELEVBQXVCa0IsSUFBSSxDQUFDRSxJQUE1QixFQUFrQ04sTUFBTSxFQUF4QyxDQUFEO0FBQ0EsYUFBT0ksSUFBUDtBQUNELEtBYm1CO0FBY3BCSyxJQUFBQSxJQUFJLEVBQUUsTUFBTTtBQUNWdkIsTUFBQUEsQ0FBQyxDQUFDLGtCQUFELEVBQXFCa0IsSUFBSSxDQUFDRSxJQUExQixFQUFnQ04sTUFBTSxFQUF0QyxDQUFEO0FBQ0EsYUFBT0ksSUFBUDtBQUNELEtBakJtQjtBQWtCcEJWLElBQUFBLElBQUksRUFBR2dCLE9BQUQsSUFBcUI7QUFDekJ4QixNQUFBQSxDQUFDLENBQUMsaUJBQUQsRUFBb0J3QixPQUFwQixFQUE2QlYsTUFBTSxFQUFuQyxDQUFEO0FBQ0EsYUFBT0ksSUFBUDtBQUNELEtBckJtQjs7QUFzQnBCLFFBQUlFLElBQUosR0FBVztBQUNULGFBQU9SLE9BQVA7QUFDRCxLQXhCbUI7O0FBeUJwQixRQUFJUSxJQUFKLENBQVNLLE9BQVQsRUFBMEI7QUFDeEJ6QixNQUFBQSxDQUFDLENBQUMsa0JBQUQsRUFBcUJZLE9BQXJCLEVBQThCLE9BQTlCLEVBQXVDYSxPQUF2QyxDQUFEO0FBQ0FiLE1BQUFBLE9BQU8sR0FBR2EsT0FBVjtBQUNEOztBQTVCbUIsR0FBdEI7QUE4QkEsU0FBT1AsSUFBUDtBQUNELENBbkNNOzs7O2VBcUNRakIsVUFBVSxHQUFHUyxPQUFILEdBQWFnQixZIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50IFwibm8tY29uc29sZVwiOiBcIm9mZlwiICovXG5pbXBvcnQgJ2NvbG9ycyc7XG5pbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0ICdsb2ctc3ltYm9scyc7XG5pbXBvcnQgcmVhbE9yYSBmcm9tICdvcmEnO1xuaW1wb3J0IHByZXR0eU1zIGZyb20gJ3ByZXR0eS1tcyc7XG5cbmltcG9ydCB7IE9yYUltcGwgfSBmcm9tICcuL29yYS1oYW5kbGVyJztcblxuY29uc3QgZCA9IGRlYnVnKCdlbGVjdHJvbi1mb3JnZTphc3luYy1vcmEnKTtcblxuY29uc3QgdXNlRmFrZU9yYSA9IEJvb2xlYW4ocHJvY2Vzcy5lbnYuREVCVUcgJiYgcHJvY2Vzcy5lbnYuREVCVUcuaW5jbHVkZXMoJ2VsZWN0cm9uLWZvcmdlJykpO1xuXG5pZiAodXNlRmFrZU9yYSkge1xuICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IERFQlVHIGVudmlyb25tZW50IHZhcmlhYmxlIGRldGVjdGVkLiAgUHJvZ3Jlc3MgaW5kaWNhdG9ycyB3aWxsIGJlIHNlbnQgb3ZlciBlbGVjdHJvbi1mb3JnZTpsaWZlY3ljbGUnLnJlZCk7XG59XG5cbmV4cG9ydCBjb25zdCBmYWtlT3JhID0gKG5hbWU6IHN0cmluZykgPT4ge1xuICBsZXQgb3JhTmFtZSA9IG5hbWU7XG4gIGxldCBzdGFydFRpbWU6IG51bWJlciB8IG51bGwgPSBudWxsO1xuICBjb25zdCB0aW1pbmcgPSAoKSA9PiAoc3RhcnRUaW1lID8gYC0tIGFmdGVyICR7YCR7cHJldHR5TXMoRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSl9YC5jeWFufWAgOiBudWxsKTtcbiAgY29uc3QgZmFrZTogT3JhSW1wbCA9IHtcbiAgICBzdGFydDogKCkgPT4ge1xuICAgICAgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIGQoJ1Byb2Nlc3MgU3RhcnRlZDonLCBmYWtlLnRleHQpO1xuICAgICAgcmV0dXJuIGZha2U7XG4gICAgfSxcbiAgICBmYWlsOiAoKSA9PiB7XG4gICAgICBkKGBQcm9jZXNzIEZhaWxlZDogJHtmYWtlLnRleHR9YC5yZWQsIHRpbWluZygpKTtcbiAgICAgIHJldHVybiBmYWtlO1xuICAgIH0sXG4gICAgc3VjY2VlZDogKCkgPT4ge1xuICAgICAgZCgnUHJvY2VzcyBTdWNjZWVkZWQ6JywgZmFrZS50ZXh0LCB0aW1pbmcoKSk7XG4gICAgICByZXR1cm4gZmFrZTtcbiAgICB9LFxuICAgIHN0b3A6ICgpID0+IHtcbiAgICAgIGQoJ1Byb2Nlc3MgU3RvcHBlZDonLCBmYWtlLnRleHQsIHRpbWluZygpKTtcbiAgICAgIHJldHVybiBmYWtlO1xuICAgIH0sXG4gICAgd2FybjogKHdhcm5pbmc6IHN0cmluZykgPT4ge1xuICAgICAgZCgnUHJvY2VzcyBXYXJuZWQ6Jywgd2FybmluZywgdGltaW5nKCkpO1xuICAgICAgcmV0dXJuIGZha2U7XG4gICAgfSxcbiAgICBnZXQgdGV4dCgpIHtcbiAgICAgIHJldHVybiBvcmFOYW1lO1xuICAgIH0sXG4gICAgc2V0IHRleHQobmV3TmFtZTogc3RyaW5nKSB7XG4gICAgICBkKCdQcm9jZXNzIFJlbmFtZWQ6Jywgb3JhTmFtZSwgJyAtLT4gJywgbmV3TmFtZSk7XG4gICAgICBvcmFOYW1lID0gbmV3TmFtZTtcbiAgICB9LFxuICB9O1xuICByZXR1cm4gZmFrZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVzZUZha2VPcmEgPyBmYWtlT3JhIDogcmVhbE9yYTtcbiJdfQ==