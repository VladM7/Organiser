"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.fakeOra = void 0;

require("source-map-support/register");

require("colors");

var _debug = _interopRequireDefault(require("debug"));

require("log-symbols");

var _ora = _interopRequireDefault(require("ora"));

var _prettyMs = _interopRequireDefault(require("pretty-ms"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint "no-console": "off" */
const d = (0, _debug.default)('electron-forge:async-ora');
const useFakeOra = Boolean(process.env.DEBUG && process.env.DEBUG.includes('electron-forge'));

if (useFakeOra) {
  console.warn('WARNING: DEBUG environment variable detected. Append the electron-forge:lifecycle namespace'.red);
  console.warn('to the value of DEBUG in order to view progress indicators.'.red);
}

const fakeOra = name => {
  let oraName = name;
  let startTime = null;

  const timing = () => startTime ? `-- after ${`${(0, _prettyMs.default)(Date.now() - startTime)}`.cyan}` : null;

  const fake = {
    start: () => {
      startTime = Date.now();
      d('Process Started:', fake.text);
      return fake;
    },
    fail: () => {
      d(`Process Failed: ${fake.text}`.red, timing());
      return fake;
    },
    succeed: () => {
      d('Process Succeeded:', fake.text, timing());
      return fake;
    },
    stop: () => {
      d('Process Stopped:', fake.text, timing());
      return fake;
    },
    warn: warning => {
      d('Process Warned:', warning, timing());
      return fake;
    },

    get text() {
      return oraName;
    },

    set text(newName) {
      d('Process Renamed:', oraName, ' --> ', newName);
      oraName = newName;
    }

  };
  return fake;
};

exports.fakeOra = fakeOra;

var _default = useFakeOra ? fakeOra : _ora.default;

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vcmEudHMiXSwibmFtZXMiOlsiZCIsInVzZUZha2VPcmEiLCJCb29sZWFuIiwicHJvY2VzcyIsImVudiIsIkRFQlVHIiwiaW5jbHVkZXMiLCJjb25zb2xlIiwid2FybiIsInJlZCIsImZha2VPcmEiLCJuYW1lIiwib3JhTmFtZSIsInN0YXJ0VGltZSIsInRpbWluZyIsIkRhdGUiLCJub3ciLCJjeWFuIiwiZmFrZSIsInN0YXJ0IiwidGV4dCIsImZhaWwiLCJzdWNjZWVkIiwic3RvcCIsIndhcm5pbmciLCJuZXdOYW1lIiwicmVhbE9yYSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFMQTtBQVNBLE1BQU1BLENBQUMsR0FBRyxvQkFBTSwwQkFBTixDQUFWO0FBRUEsTUFBTUMsVUFBVSxHQUFHQyxPQUFPLENBQUNDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxLQUFaLElBQXFCRixPQUFPLENBQUNDLEdBQVIsQ0FBWUMsS0FBWixDQUFrQkMsUUFBbEIsQ0FBMkIsZ0JBQTNCLENBQXRCLENBQTFCOztBQUVBLElBQUlMLFVBQUosRUFBZ0I7QUFDZE0sRUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWEsOEZBQThGQyxHQUEzRztBQUNBRixFQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYSw4REFBOERDLEdBQTNFO0FBQ0Q7O0FBRU0sTUFBTUMsT0FBTyxHQUFJQyxJQUFELElBQWtCO0FBQ3ZDLE1BQUlDLE9BQU8sR0FBR0QsSUFBZDtBQUNBLE1BQUlFLFNBQXdCLEdBQUcsSUFBL0I7O0FBQ0EsUUFBTUMsTUFBTSxHQUFHLE1BQU9ELFNBQVMsR0FBSSxZQUFZLEdBQUUsdUJBQVNFLElBQUksQ0FBQ0MsR0FBTCxLQUFhSCxTQUF0QixDQUFpQyxFQUFwQyxDQUFzQ0ksSUFBSyxFQUExRCxHQUE4RCxJQUE3Rjs7QUFDQSxRQUFNQyxJQUFhLEdBQUc7QUFDcEJDLElBQUFBLEtBQUssRUFBRSxNQUFNO0FBQ1hOLE1BQUFBLFNBQVMsR0FBR0UsSUFBSSxDQUFDQyxHQUFMLEVBQVo7QUFDQWhCLE1BQUFBLENBQUMsQ0FBQyxrQkFBRCxFQUFxQmtCLElBQUksQ0FBQ0UsSUFBMUIsQ0FBRDtBQUNBLGFBQU9GLElBQVA7QUFDRCxLQUxtQjtBQU1wQkcsSUFBQUEsSUFBSSxFQUFFLE1BQU07QUFDVnJCLE1BQUFBLENBQUMsQ0FBRSxtQkFBa0JrQixJQUFJLENBQUNFLElBQUssRUFBN0IsQ0FBK0JYLEdBQWhDLEVBQXFDSyxNQUFNLEVBQTNDLENBQUQ7QUFDQSxhQUFPSSxJQUFQO0FBQ0QsS0FUbUI7QUFVcEJJLElBQUFBLE9BQU8sRUFBRSxNQUFNO0FBQ2J0QixNQUFBQSxDQUFDLENBQUMsb0JBQUQsRUFBdUJrQixJQUFJLENBQUNFLElBQTVCLEVBQWtDTixNQUFNLEVBQXhDLENBQUQ7QUFDQSxhQUFPSSxJQUFQO0FBQ0QsS0FibUI7QUFjcEJLLElBQUFBLElBQUksRUFBRSxNQUFNO0FBQ1Z2QixNQUFBQSxDQUFDLENBQUMsa0JBQUQsRUFBcUJrQixJQUFJLENBQUNFLElBQTFCLEVBQWdDTixNQUFNLEVBQXRDLENBQUQ7QUFDQSxhQUFPSSxJQUFQO0FBQ0QsS0FqQm1CO0FBa0JwQlYsSUFBQUEsSUFBSSxFQUFHZ0IsT0FBRCxJQUFxQjtBQUN6QnhCLE1BQUFBLENBQUMsQ0FBQyxpQkFBRCxFQUFvQndCLE9BQXBCLEVBQTZCVixNQUFNLEVBQW5DLENBQUQ7QUFDQSxhQUFPSSxJQUFQO0FBQ0QsS0FyQm1COztBQXNCcEIsUUFBSUUsSUFBSixHQUFXO0FBQ1QsYUFBT1IsT0FBUDtBQUNELEtBeEJtQjs7QUF5QnBCLFFBQUlRLElBQUosQ0FBU0ssT0FBVCxFQUEwQjtBQUN4QnpCLE1BQUFBLENBQUMsQ0FBQyxrQkFBRCxFQUFxQlksT0FBckIsRUFBOEIsT0FBOUIsRUFBdUNhLE9BQXZDLENBQUQ7QUFDQWIsTUFBQUEsT0FBTyxHQUFHYSxPQUFWO0FBQ0Q7O0FBNUJtQixHQUF0QjtBQThCQSxTQUFPUCxJQUFQO0FBQ0QsQ0FuQ007Ozs7ZUFxQ1FqQixVQUFVLEdBQUdTLE9BQUgsR0FBYWdCLFkiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgXCJuby1jb25zb2xlXCI6IFwib2ZmXCIgKi9cbmltcG9ydCAnY29sb3JzJztcbmltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgJ2xvZy1zeW1ib2xzJztcbmltcG9ydCByZWFsT3JhIGZyb20gJ29yYSc7XG5pbXBvcnQgcHJldHR5TXMgZnJvbSAncHJldHR5LW1zJztcblxuaW1wb3J0IHsgT3JhSW1wbCB9IGZyb20gJy4vb3JhLWhhbmRsZXInO1xuXG5jb25zdCBkID0gZGVidWcoJ2VsZWN0cm9uLWZvcmdlOmFzeW5jLW9yYScpO1xuXG5jb25zdCB1c2VGYWtlT3JhID0gQm9vbGVhbihwcm9jZXNzLmVudi5ERUJVRyAmJiBwcm9jZXNzLmVudi5ERUJVRy5pbmNsdWRlcygnZWxlY3Ryb24tZm9yZ2UnKSk7XG5cbmlmICh1c2VGYWtlT3JhKSB7XG4gIGNvbnNvbGUud2FybignV0FSTklORzogREVCVUcgZW52aXJvbm1lbnQgdmFyaWFibGUgZGV0ZWN0ZWQuIEFwcGVuZCB0aGUgZWxlY3Ryb24tZm9yZ2U6bGlmZWN5Y2xlIG5hbWVzcGFjZScucmVkKTtcbiAgY29uc29sZS53YXJuKCd0byB0aGUgdmFsdWUgb2YgREVCVUcgaW4gb3JkZXIgdG8gdmlldyBwcm9ncmVzcyBpbmRpY2F0b3JzLicucmVkKTtcbn1cblxuZXhwb3J0IGNvbnN0IGZha2VPcmEgPSAobmFtZTogc3RyaW5nKSA9PiB7XG4gIGxldCBvcmFOYW1lID0gbmFtZTtcbiAgbGV0IHN0YXJ0VGltZTogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG4gIGNvbnN0IHRpbWluZyA9ICgpID0+IChzdGFydFRpbWUgPyBgLS0gYWZ0ZXIgJHtgJHtwcmV0dHlNcyhEYXRlLm5vdygpIC0gc3RhcnRUaW1lKX1gLmN5YW59YCA6IG51bGwpO1xuICBjb25zdCBmYWtlOiBPcmFJbXBsID0ge1xuICAgIHN0YXJ0OiAoKSA9PiB7XG4gICAgICBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgZCgnUHJvY2VzcyBTdGFydGVkOicsIGZha2UudGV4dCk7XG4gICAgICByZXR1cm4gZmFrZTtcbiAgICB9LFxuICAgIGZhaWw6ICgpID0+IHtcbiAgICAgIGQoYFByb2Nlc3MgRmFpbGVkOiAke2Zha2UudGV4dH1gLnJlZCwgdGltaW5nKCkpO1xuICAgICAgcmV0dXJuIGZha2U7XG4gICAgfSxcbiAgICBzdWNjZWVkOiAoKSA9PiB7XG4gICAgICBkKCdQcm9jZXNzIFN1Y2NlZWRlZDonLCBmYWtlLnRleHQsIHRpbWluZygpKTtcbiAgICAgIHJldHVybiBmYWtlO1xuICAgIH0sXG4gICAgc3RvcDogKCkgPT4ge1xuICAgICAgZCgnUHJvY2VzcyBTdG9wcGVkOicsIGZha2UudGV4dCwgdGltaW5nKCkpO1xuICAgICAgcmV0dXJuIGZha2U7XG4gICAgfSxcbiAgICB3YXJuOiAod2FybmluZzogc3RyaW5nKSA9PiB7XG4gICAgICBkKCdQcm9jZXNzIFdhcm5lZDonLCB3YXJuaW5nLCB0aW1pbmcoKSk7XG4gICAgICByZXR1cm4gZmFrZTtcbiAgICB9LFxuICAgIGdldCB0ZXh0KCkge1xuICAgICAgcmV0dXJuIG9yYU5hbWU7XG4gICAgfSxcbiAgICBzZXQgdGV4dChuZXdOYW1lOiBzdHJpbmcpIHtcbiAgICAgIGQoJ1Byb2Nlc3MgUmVuYW1lZDonLCBvcmFOYW1lLCAnIC0tPiAnLCBuZXdOYW1lKTtcbiAgICAgIG9yYU5hbWUgPSBuZXdOYW1lO1xuICAgIH0sXG4gIH07XG4gIHJldHVybiBmYWtlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlRmFrZU9yYSA/IGZha2VPcmEgOiByZWFsT3JhO1xuIl19