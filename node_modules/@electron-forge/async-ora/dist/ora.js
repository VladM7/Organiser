"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fakeOra = exports.default = void 0;

require("source-map-support/register");

var _chalk = _interopRequireDefault(require("chalk"));

var _debug = _interopRequireDefault(require("debug"));

require("log-symbols");

var _ora = _interopRequireDefault(require("ora"));

var _prettyMs = _interopRequireDefault(require("pretty-ms"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint "no-console": "off" */
const d = (0, _debug.default)('electron-forge:async-ora');
const useFakeOra = Boolean(process.env.DEBUG && process.env.DEBUG.includes('electron-forge'));

if (useFakeOra) {
  console.warn(_chalk.default.red('WARNING: DEBUG environment variable detected. Append the electron-forge:lifecycle namespace'));
  console.warn(_chalk.default.red('to the value of DEBUG in order to view progress indicators.'));
}

const fakeOra = name => {
  let oraName = name;
  let startTime = null;

  const timing = () => startTime ? `-- after ${_chalk.default.cyan(`${(0, _prettyMs.default)(Date.now() - startTime)}`)}` : null;

  const fake = {
    start: () => {
      startTime = Date.now();
      d('Process Started:', fake.text);
      return fake;
    },
    fail: () => {
      d(_chalk.default.red(`Process Failed: ${fake.text}`), timing());
      return fake;
    },
    succeed: () => {
      d('Process Succeeded:', fake.text, timing());
      return fake;
    },
    stop: () => {
      d('Process Stopped:', fake.text, timing());
      return fake;
    },
    warn: warning => {
      d('Process Warned:', warning, timing());
      return fake;
    },

    get text() {
      return oraName;
    },

    set text(newName) {
      d('Process Renamed:', oraName, ' --> ', newName);
      oraName = newName;
    }

  };
  return fake;
};

exports.fakeOra = fakeOra;

var _default = useFakeOra ? fakeOra : _ora.default;

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vcmEudHMiXSwibmFtZXMiOlsiZCIsInVzZUZha2VPcmEiLCJCb29sZWFuIiwicHJvY2VzcyIsImVudiIsIkRFQlVHIiwiaW5jbHVkZXMiLCJjb25zb2xlIiwid2FybiIsImNoYWxrIiwicmVkIiwiZmFrZU9yYSIsIm5hbWUiLCJvcmFOYW1lIiwic3RhcnRUaW1lIiwidGltaW5nIiwiY3lhbiIsIkRhdGUiLCJub3ciLCJmYWtlIiwic3RhcnQiLCJ0ZXh0IiwiZmFpbCIsInN1Y2NlZWQiLCJzdG9wIiwid2FybmluZyIsIm5ld05hbWUiLCJyZWFsT3JhIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUxBO0FBU0EsTUFBTUEsQ0FBQyxHQUFHLG9CQUFNLDBCQUFOLENBQVY7QUFFQSxNQUFNQyxVQUFVLEdBQUdDLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDQyxHQUFSLENBQVlDLEtBQVosSUFBcUJGLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxLQUFaLENBQWtCQyxRQUFsQixDQUEyQixnQkFBM0IsQ0FBdEIsQ0FBMUI7O0FBRUEsSUFBSUwsVUFBSixFQUFnQjtBQUNkTSxFQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYUMsZUFBTUMsR0FBTixDQUFVLDZGQUFWLENBQWI7QUFDQUgsRUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWFDLGVBQU1DLEdBQU4sQ0FBVSw2REFBVixDQUFiO0FBQ0Q7O0FBRU0sTUFBTUMsT0FBTyxHQUFJQyxJQUFELElBQTJCO0FBQ2hELE1BQUlDLE9BQU8sR0FBR0QsSUFBZDtBQUNBLE1BQUlFLFNBQXdCLEdBQUcsSUFBL0I7O0FBQ0EsUUFBTUMsTUFBTSxHQUFHLE1BQU9ELFNBQVMsR0FBSSxZQUFXTCxlQUFNTyxJQUFOLENBQVksR0FBRSx1QkFBU0MsSUFBSSxDQUFDQyxHQUFMLEtBQWFKLFNBQXRCLENBQWlDLEVBQS9DLENBQWtELEVBQWpFLEdBQXFFLElBQXBHOztBQUNBLFFBQU1LLElBQWEsR0FBRztBQUNwQkMsSUFBQUEsS0FBSyxFQUFFLE1BQU07QUFDWE4sTUFBQUEsU0FBUyxHQUFHRyxJQUFJLENBQUNDLEdBQUwsRUFBWjtBQUNBbEIsTUFBQUEsQ0FBQyxDQUFDLGtCQUFELEVBQXFCbUIsSUFBSSxDQUFDRSxJQUExQixDQUFEO0FBQ0EsYUFBT0YsSUFBUDtBQUNELEtBTG1CO0FBTXBCRyxJQUFBQSxJQUFJLEVBQUUsTUFBTTtBQUNWdEIsTUFBQUEsQ0FBQyxDQUFDUyxlQUFNQyxHQUFOLENBQVcsbUJBQWtCUyxJQUFJLENBQUNFLElBQUssRUFBdkMsQ0FBRCxFQUE0Q04sTUFBTSxFQUFsRCxDQUFEO0FBQ0EsYUFBT0ksSUFBUDtBQUNELEtBVG1CO0FBVXBCSSxJQUFBQSxPQUFPLEVBQUUsTUFBTTtBQUNidkIsTUFBQUEsQ0FBQyxDQUFDLG9CQUFELEVBQXVCbUIsSUFBSSxDQUFDRSxJQUE1QixFQUFrQ04sTUFBTSxFQUF4QyxDQUFEO0FBQ0EsYUFBT0ksSUFBUDtBQUNELEtBYm1CO0FBY3BCSyxJQUFBQSxJQUFJLEVBQUUsTUFBTTtBQUNWeEIsTUFBQUEsQ0FBQyxDQUFDLGtCQUFELEVBQXFCbUIsSUFBSSxDQUFDRSxJQUExQixFQUFnQ04sTUFBTSxFQUF0QyxDQUFEO0FBQ0EsYUFBT0ksSUFBUDtBQUNELEtBakJtQjtBQWtCcEJYLElBQUFBLElBQUksRUFBR2lCLE9BQUQsSUFBcUI7QUFDekJ6QixNQUFBQSxDQUFDLENBQUMsaUJBQUQsRUFBb0J5QixPQUFwQixFQUE2QlYsTUFBTSxFQUFuQyxDQUFEO0FBQ0EsYUFBT0ksSUFBUDtBQUNELEtBckJtQjs7QUFzQnBCLFFBQUlFLElBQUosR0FBVztBQUNULGFBQU9SLE9BQVA7QUFDRCxLQXhCbUI7O0FBeUJwQixRQUFJUSxJQUFKLENBQVNLLE9BQVQsRUFBMEI7QUFDeEIxQixNQUFBQSxDQUFDLENBQUMsa0JBQUQsRUFBcUJhLE9BQXJCLEVBQThCLE9BQTlCLEVBQXVDYSxPQUF2QyxDQUFEO0FBQ0FiLE1BQUFBLE9BQU8sR0FBR2EsT0FBVjtBQUNEOztBQTVCbUIsR0FBdEI7QUE4QkEsU0FBT1AsSUFBUDtBQUNELENBbkNNOzs7O2VBcUNRbEIsVUFBVSxHQUFHVSxPQUFILEdBQWFnQixZIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50IFwibm8tY29uc29sZVwiOiBcIm9mZlwiICovXG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IGRlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCAnbG9nLXN5bWJvbHMnO1xuaW1wb3J0IHJlYWxPcmEgZnJvbSAnb3JhJztcbmltcG9ydCBwcmV0dHlNcyBmcm9tICdwcmV0dHktbXMnO1xuXG5pbXBvcnQgeyBPcmFJbXBsIH0gZnJvbSAnLi9vcmEtaGFuZGxlcic7XG5cbmNvbnN0IGQgPSBkZWJ1ZygnZWxlY3Ryb24tZm9yZ2U6YXN5bmMtb3JhJyk7XG5cbmNvbnN0IHVzZUZha2VPcmEgPSBCb29sZWFuKHByb2Nlc3MuZW52LkRFQlVHICYmIHByb2Nlc3MuZW52LkRFQlVHLmluY2x1ZGVzKCdlbGVjdHJvbi1mb3JnZScpKTtcblxuaWYgKHVzZUZha2VPcmEpIHtcbiAgY29uc29sZS53YXJuKGNoYWxrLnJlZCgnV0FSTklORzogREVCVUcgZW52aXJvbm1lbnQgdmFyaWFibGUgZGV0ZWN0ZWQuIEFwcGVuZCB0aGUgZWxlY3Ryb24tZm9yZ2U6bGlmZWN5Y2xlIG5hbWVzcGFjZScpKTtcbiAgY29uc29sZS53YXJuKGNoYWxrLnJlZCgndG8gdGhlIHZhbHVlIG9mIERFQlVHIGluIG9yZGVyIHRvIHZpZXcgcHJvZ3Jlc3MgaW5kaWNhdG9ycy4nKSk7XG59XG5cbmV4cG9ydCBjb25zdCBmYWtlT3JhID0gKG5hbWU6IHN0cmluZyk6IE9yYUltcGwgPT4ge1xuICBsZXQgb3JhTmFtZSA9IG5hbWU7XG4gIGxldCBzdGFydFRpbWU6IG51bWJlciB8IG51bGwgPSBudWxsO1xuICBjb25zdCB0aW1pbmcgPSAoKSA9PiAoc3RhcnRUaW1lID8gYC0tIGFmdGVyICR7Y2hhbGsuY3lhbihgJHtwcmV0dHlNcyhEYXRlLm5vdygpIC0gc3RhcnRUaW1lKX1gKX1gIDogbnVsbCk7XG4gIGNvbnN0IGZha2U6IE9yYUltcGwgPSB7XG4gICAgc3RhcnQ6ICgpID0+IHtcbiAgICAgIHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICBkKCdQcm9jZXNzIFN0YXJ0ZWQ6JywgZmFrZS50ZXh0KTtcbiAgICAgIHJldHVybiBmYWtlO1xuICAgIH0sXG4gICAgZmFpbDogKCkgPT4ge1xuICAgICAgZChjaGFsay5yZWQoYFByb2Nlc3MgRmFpbGVkOiAke2Zha2UudGV4dH1gKSwgdGltaW5nKCkpO1xuICAgICAgcmV0dXJuIGZha2U7XG4gICAgfSxcbiAgICBzdWNjZWVkOiAoKSA9PiB7XG4gICAgICBkKCdQcm9jZXNzIFN1Y2NlZWRlZDonLCBmYWtlLnRleHQsIHRpbWluZygpKTtcbiAgICAgIHJldHVybiBmYWtlO1xuICAgIH0sXG4gICAgc3RvcDogKCkgPT4ge1xuICAgICAgZCgnUHJvY2VzcyBTdG9wcGVkOicsIGZha2UudGV4dCwgdGltaW5nKCkpO1xuICAgICAgcmV0dXJuIGZha2U7XG4gICAgfSxcbiAgICB3YXJuOiAod2FybmluZzogc3RyaW5nKSA9PiB7XG4gICAgICBkKCdQcm9jZXNzIFdhcm5lZDonLCB3YXJuaW5nLCB0aW1pbmcoKSk7XG4gICAgICByZXR1cm4gZmFrZTtcbiAgICB9LFxuICAgIGdldCB0ZXh0KCkge1xuICAgICAgcmV0dXJuIG9yYU5hbWU7XG4gICAgfSxcbiAgICBzZXQgdGV4dChuZXdOYW1lOiBzdHJpbmcpIHtcbiAgICAgIGQoJ1Byb2Nlc3MgUmVuYW1lZDonLCBvcmFOYW1lLCAnIC0tPiAnLCBuZXdOYW1lKTtcbiAgICAgIG9yYU5hbWUgPSBuZXdOYW1lO1xuICAgIH0sXG4gIH07XG4gIHJldHVybiBmYWtlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlRmFrZU9yYSA/IGZha2VPcmEgOiByZWFsT3JhO1xuIl19