"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.OraImpl = void 0;

require("source-map-support/register");

var _colors = _interopRequireDefault(require("colors"));

var _ora = _interopRequireDefault(require("./ora"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint "no-console": "off" */
class OraImpl {
  // eslint-disable-next-line no-empty-function, no-useless-constructor
  constructor(text = '') {
    this.text = text;
  }

  succeed(_symbol) {
    return this;
  }

  fail(_symbol) {
    return this;
  }

  start() {
    return this;
  }

  stop(_symbol) {
    return this;
  }

  warn(_message) {
    return this;
  }

}

exports.OraImpl = OraImpl;

const asyncOra = (initialOraValue, asyncFn, processExitFn = process.exit) => {
  let fnOra = new OraImpl(initialOraValue);

  if (asyncOra.interactive) {
    fnOra = (0, _ora.default)(initialOraValue).start();
  }

  return new Promise((resolve, reject) => {
    asyncFn(fnOra).then(() => {
      fnOra.succeed();
      resolve();
    }).catch(err => {
      fnOra.fail();

      if (asyncOra.interactive) {
        if (err && err.message && err.stack) {
          console.error('\nAn unhandled error has occurred inside Forge:'.red);
          console.error(_colors.default.red(err.message));
          console.error(_colors.default.red(err.stack));
        } else {
          console.error('\nElectron Forge was terminated:'.red);
          console.error(_colors.default.red(typeof err === 'string' ? err : JSON.stringify(err)));
        }

        processExitFn(1); // If the process is still alive we should continue because either
        // something went really wrong or we are testing this function

        setTimeout(() => resolve(), 500);
      } else {
        reject(err);
      }
    });
  });
};

asyncOra.interactive = true;
var _default = asyncOra;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vcmEtaGFuZGxlci50cyJdLCJuYW1lcyI6WyJPcmFJbXBsIiwiY29uc3RydWN0b3IiLCJ0ZXh0Iiwic3VjY2VlZCIsIl9zeW1ib2wiLCJmYWlsIiwic3RhcnQiLCJzdG9wIiwid2FybiIsIl9tZXNzYWdlIiwiYXN5bmNPcmEiLCJpbml0aWFsT3JhVmFsdWUiLCJhc3luY0ZuIiwicHJvY2Vzc0V4aXRGbiIsInByb2Nlc3MiLCJleGl0IiwiZm5PcmEiLCJpbnRlcmFjdGl2ZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwidGhlbiIsImNhdGNoIiwiZXJyIiwibWVzc2FnZSIsInN0YWNrIiwiY29uc29sZSIsImVycm9yIiwicmVkIiwiY29sb3JzIiwiSlNPTiIsInN0cmluZ2lmeSIsInNldFRpbWVvdXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUNBOztBQUNBOzs7O0FBRkE7QUFJTyxNQUFNQSxPQUFOLENBQWM7QUFDbkI7QUFDQUMsRUFBQUEsV0FBVyxDQUFRQyxJQUFZLEdBQUcsRUFBdkIsRUFBMkI7QUFBQSxTQUFuQkEsSUFBbUIsR0FBbkJBLElBQW1CO0FBQUU7O0FBRXhDQyxFQUFBQSxPQUFPLENBQUNDLE9BQUQsRUFBbUI7QUFBRSxXQUFPLElBQVA7QUFBYzs7QUFFMUNDLEVBQUFBLElBQUksQ0FBQ0QsT0FBRCxFQUFtQjtBQUFFLFdBQU8sSUFBUDtBQUFjOztBQUV2Q0UsRUFBQUEsS0FBSyxHQUFHO0FBQUUsV0FBTyxJQUFQO0FBQWM7O0FBRXhCQyxFQUFBQSxJQUFJLENBQUNILE9BQUQsRUFBbUI7QUFBRSxXQUFPLElBQVA7QUFBYzs7QUFFdkNJLEVBQUFBLElBQUksQ0FBQ0MsUUFBRCxFQUFtQjtBQUFFLFdBQU8sSUFBUDtBQUFjOztBQVpwQjs7OztBQXdCckIsTUFBTUMsUUFBd0IsR0FBRyxDQUFDQyxlQUFELEVBQWtCQyxPQUFsQixFQUEyQkMsYUFBYSxHQUFHQyxPQUFPLENBQUNDLElBQW5ELEtBQTREO0FBQzNGLE1BQUlDLEtBQUssR0FBRyxJQUFJaEIsT0FBSixDQUFZVyxlQUFaLENBQVo7O0FBQ0EsTUFBSUQsUUFBUSxDQUFDTyxXQUFiLEVBQTBCO0FBQ3hCRCxJQUFBQSxLQUFLLEdBQUcsa0JBQUlMLGVBQUosRUFBcUJMLEtBQXJCLEVBQVI7QUFDRDs7QUFDRCxTQUFPLElBQUlZLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFDdENSLElBQUFBLE9BQU8sQ0FBQ0ksS0FBRCxDQUFQLENBQWVLLElBQWYsQ0FBb0IsTUFBTTtBQUN4QkwsTUFBQUEsS0FBSyxDQUFDYixPQUFOO0FBQ0FnQixNQUFBQSxPQUFPO0FBQ1IsS0FIRCxFQUdHRyxLQUhILENBR1VDLEdBQUQsSUFBUztBQUNoQlAsTUFBQUEsS0FBSyxDQUFDWCxJQUFOOztBQUNBLFVBQUlLLFFBQVEsQ0FBQ08sV0FBYixFQUEwQjtBQUN4QixZQUFJTSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsT0FBWCxJQUFzQkQsR0FBRyxDQUFDRSxLQUE5QixFQUFxQztBQUNuQ0MsVUFBQUEsT0FBTyxDQUFDQyxLQUFSLENBQWMsa0RBQWtEQyxHQUFoRTtBQUNBRixVQUFBQSxPQUFPLENBQUNDLEtBQVIsQ0FBY0UsZ0JBQU9ELEdBQVAsQ0FBV0wsR0FBRyxDQUFDQyxPQUFmLENBQWQ7QUFDQUUsVUFBQUEsT0FBTyxDQUFDQyxLQUFSLENBQWNFLGdCQUFPRCxHQUFQLENBQVdMLEdBQUcsQ0FBQ0UsS0FBZixDQUFkO0FBQ0QsU0FKRCxNQUlPO0FBQ0xDLFVBQUFBLE9BQU8sQ0FBQ0MsS0FBUixDQUFjLG1DQUFtQ0MsR0FBakQ7QUFDQUYsVUFBQUEsT0FBTyxDQUFDQyxLQUFSLENBQWNFLGdCQUFPRCxHQUFQLENBQVcsT0FBT0wsR0FBUCxLQUFlLFFBQWYsR0FBMEJBLEdBQTFCLEdBQWdDTyxJQUFJLENBQUNDLFNBQUwsQ0FBZVIsR0FBZixDQUEzQyxDQUFkO0FBQ0Q7O0FBQ0RWLFFBQUFBLGFBQWEsQ0FBQyxDQUFELENBQWIsQ0FUd0IsQ0FVeEI7QUFDQTs7QUFDQW1CLFFBQUFBLFVBQVUsQ0FBQyxNQUFNYixPQUFPLEVBQWQsRUFBa0IsR0FBbEIsQ0FBVjtBQUNELE9BYkQsTUFhTztBQUNMQyxRQUFBQSxNQUFNLENBQUNHLEdBQUQsQ0FBTjtBQUNEO0FBQ0YsS0FyQkQ7QUFzQkQsR0F2Qk0sQ0FBUDtBQXdCRCxDQTdCRDs7QUErQkFiLFFBQVEsQ0FBQ08sV0FBVCxHQUF1QixJQUF2QjtlQUVlUCxRIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50IFwibm8tY29uc29sZVwiOiBcIm9mZlwiICovXG5pbXBvcnQgY29sb3JzIGZyb20gJ2NvbG9ycyc7XG5pbXBvcnQgb3JhIGZyb20gJy4vb3JhJztcblxuZXhwb3J0IGNsYXNzIE9yYUltcGwge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHktZnVuY3Rpb24sIG5vLXVzZWxlc3MtY29uc3RydWN0b3JcbiAgY29uc3RydWN0b3IocHVibGljIHRleHQ6IHN0cmluZyA9ICcnKSB7fVxuXG4gIHN1Y2NlZWQoX3N5bWJvbD86IHN0cmluZykgeyByZXR1cm4gdGhpczsgfVxuXG4gIGZhaWwoX3N5bWJvbD86IHN0cmluZykgeyByZXR1cm4gdGhpczsgfVxuXG4gIHN0YXJ0KCkgeyByZXR1cm4gdGhpczsgfVxuXG4gIHN0b3AoX3N5bWJvbD86IHN0cmluZykgeyByZXR1cm4gdGhpczsgfVxuXG4gIHdhcm4oX21lc3NhZ2U6IHN0cmluZykgeyByZXR1cm4gdGhpczsgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFzeW5jT3JhTWV0aG9kIHtcbiAgKFxuICAgIGluaXRpYWxPcmFWYWx1ZTogc3RyaW5nLFxuICAgIGFzeW5jRm46IChvcmFJbXBsOiBPcmFJbXBsKSA9PiBQcm9taXNlPHZvaWQ+LFxuICAgIHByb2Nlc3NFeGl0Rm4/OiAoY29kZTogbnVtYmVyKSA9PiB2b2lkLFxuICApOiBQcm9taXNlPHZvaWQ+O1xuICBpbnRlcmFjdGl2ZT86IGJvb2xlYW47XG59XG5cbmNvbnN0IGFzeW5jT3JhOiBBc3luY09yYU1ldGhvZCA9IChpbml0aWFsT3JhVmFsdWUsIGFzeW5jRm4sIHByb2Nlc3NFeGl0Rm4gPSBwcm9jZXNzLmV4aXQpID0+IHtcbiAgbGV0IGZuT3JhID0gbmV3IE9yYUltcGwoaW5pdGlhbE9yYVZhbHVlKTtcbiAgaWYgKGFzeW5jT3JhLmludGVyYWN0aXZlKSB7XG4gICAgZm5PcmEgPSBvcmEoaW5pdGlhbE9yYVZhbHVlKS5zdGFydCgpO1xuICB9XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgYXN5bmNGbihmbk9yYSkudGhlbigoKSA9PiB7XG4gICAgICBmbk9yYS5zdWNjZWVkKCk7XG4gICAgICByZXNvbHZlKCk7XG4gICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgZm5PcmEuZmFpbCgpO1xuICAgICAgaWYgKGFzeW5jT3JhLmludGVyYWN0aXZlKSB7XG4gICAgICAgIGlmIChlcnIgJiYgZXJyLm1lc3NhZ2UgJiYgZXJyLnN0YWNrKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignXFxuQW4gdW5oYW5kbGVkIGVycm9yIGhhcyBvY2N1cnJlZCBpbnNpZGUgRm9yZ2U6Jy5yZWQpO1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoY29sb3JzLnJlZChlcnIubWVzc2FnZSkpO1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoY29sb3JzLnJlZChlcnIuc3RhY2spKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdcXG5FbGVjdHJvbiBGb3JnZSB3YXMgdGVybWluYXRlZDonLnJlZCk7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihjb2xvcnMucmVkKHR5cGVvZiBlcnIgPT09ICdzdHJpbmcnID8gZXJyIDogSlNPTi5zdHJpbmdpZnkoZXJyKSkpO1xuICAgICAgICB9XG4gICAgICAgIHByb2Nlc3NFeGl0Rm4oMSk7XG4gICAgICAgIC8vIElmIHRoZSBwcm9jZXNzIGlzIHN0aWxsIGFsaXZlIHdlIHNob3VsZCBjb250aW51ZSBiZWNhdXNlIGVpdGhlclxuICAgICAgICAvLyBzb21ldGhpbmcgd2VudCByZWFsbHkgd3Jvbmcgb3Igd2UgYXJlIHRlc3RpbmcgdGhpcyBmdW5jdGlvblxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUoKSwgNTAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn07XG5cbmFzeW5jT3JhLmludGVyYWN0aXZlID0gdHJ1ZTtcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmNPcmE7XG4iXX0=