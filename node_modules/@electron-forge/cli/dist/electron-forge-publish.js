"use strict";

require("source-map-support/register");

var _core = require("@electron-forge/core");

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _get = require("@electron/get");

var _commander = _interopRequireDefault(require("commander"));

var _path = _interopRequireDefault(require("path"));

require("./util/terminate");

var _workingDir = _interopRequireDefault(require("./util/working-dir"));

var _electronForgeMake = require("./electron-forge-make");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(async () => {
  let dir = process.cwd();

  _commander.default.version((await _fsExtra.default.readJson(_path.default.resolve(__dirname, '../package.json'))).version).arguments('[cwd]').option('--target [target[,target...]]', 'The comma-separated deployment targets, defaults to "github"').option('--dry-run', "Triggers a publish dry run which saves state and doesn't upload anything").option('--from-dry-run', 'Attempts to publish artifacts from the last saved dry run').allowUnknownOption(true).action(cwd => {
    dir = (0, _workingDir.default)(dir, cwd);
  }).parse(process.argv);

  (0, _get.initializeProxy)();
  const publishOpts = {
    dir,
    interactive: true,
    dryRun: _commander.default.dryRun,
    dryRunResume: _commander.default.fromDryRun
  };
  if (_commander.default.target) publishOpts.publishTargets = _commander.default.target.split(',');
  publishOpts.makeOptions = await (0, _electronForgeMake.getMakeOptions)();
  await _core.api.publish(publishOpts);
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGVjdHJvbi1mb3JnZS1wdWJsaXNoLnRzIl0sIm5hbWVzIjpbImRpciIsInByb2Nlc3MiLCJjd2QiLCJwcm9ncmFtIiwidmVyc2lvbiIsImZzIiwicmVhZEpzb24iLCJwYXRoIiwicmVzb2x2ZSIsIl9fZGlybmFtZSIsImFyZ3VtZW50cyIsIm9wdGlvbiIsImFsbG93VW5rbm93bk9wdGlvbiIsImFjdGlvbiIsInBhcnNlIiwiYXJndiIsInB1Ymxpc2hPcHRzIiwiaW50ZXJhY3RpdmUiLCJkcnlSdW4iLCJkcnlSdW5SZXN1bWUiLCJmcm9tRHJ5UnVuIiwidGFyZ2V0IiwicHVibGlzaFRhcmdldHMiLCJzcGxpdCIsIm1ha2VPcHRpb25zIiwiYXBpIiwicHVibGlzaCJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOzs7O0FBRUEsQ0FBQyxZQUFZO0FBQ1gsTUFBSUEsR0FBRyxHQUFHQyxPQUFPLENBQUNDLEdBQVIsRUFBVjs7QUFDQUMscUJBQ0dDLE9BREgsQ0FDVyxDQUFDLE1BQU1DLGlCQUFHQyxRQUFILENBQVlDLGNBQUtDLE9BQUwsQ0FBYUMsU0FBYixFQUF3QixpQkFBeEIsQ0FBWixDQUFQLEVBQWdFTCxPQUQzRSxFQUVHTSxTQUZILENBRWEsT0FGYixFQUdHQyxNQUhILENBR1UsK0JBSFYsRUFHMkMsOERBSDNDLEVBSUdBLE1BSkgsQ0FJVSxXQUpWLEVBSXVCLDBFQUp2QixFQUtHQSxNQUxILENBS1UsZ0JBTFYsRUFLNEIsMkRBTDVCLEVBTUdDLGtCQU5ILENBTXNCLElBTnRCLEVBT0dDLE1BUEgsQ0FPV1gsR0FBRCxJQUFTO0FBQ2ZGLElBQUFBLEdBQUcsR0FBRyx5QkFBV0EsR0FBWCxFQUFnQkUsR0FBaEIsQ0FBTjtBQUNELEdBVEgsRUFVR1ksS0FWSCxDQVVTYixPQUFPLENBQUNjLElBVmpCOztBQVlBO0FBRUEsUUFBTUMsV0FBMkIsR0FBRztBQUNsQ2hCLElBQUFBLEdBRGtDO0FBRWxDaUIsSUFBQUEsV0FBVyxFQUFFLElBRnFCO0FBR2xDQyxJQUFBQSxNQUFNLEVBQUVmLG1CQUFRZSxNQUhrQjtBQUlsQ0MsSUFBQUEsWUFBWSxFQUFFaEIsbUJBQVFpQjtBQUpZLEdBQXBDO0FBTUEsTUFBSWpCLG1CQUFRa0IsTUFBWixFQUFvQkwsV0FBVyxDQUFDTSxjQUFaLEdBQTZCbkIsbUJBQVFrQixNQUFSLENBQWVFLEtBQWYsQ0FBcUIsR0FBckIsQ0FBN0I7QUFFcEJQLEVBQUFBLFdBQVcsQ0FBQ1EsV0FBWixHQUEwQixNQUFNLHdDQUFoQztBQUVBLFFBQU1DLFVBQUlDLE9BQUosQ0FBWVYsV0FBWixDQUFOO0FBQ0QsQ0EzQkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhcGksIFB1Ymxpc2hPcHRpb25zIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2NvcmUnO1xuXG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZVByb3h5IH0gZnJvbSAnQGVsZWN0cm9uL2dldCc7XG5pbXBvcnQgcHJvZ3JhbSBmcm9tICdjb21tYW5kZXInO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCAnLi91dGlsL3Rlcm1pbmF0ZSc7XG5pbXBvcnQgd29ya2luZ0RpciBmcm9tICcuL3V0aWwvd29ya2luZy1kaXInO1xuaW1wb3J0IHsgZ2V0TWFrZU9wdGlvbnMgfSBmcm9tICcuL2VsZWN0cm9uLWZvcmdlLW1ha2UnO1xuXG4oYXN5bmMgKCkgPT4ge1xuICBsZXQgZGlyID0gcHJvY2Vzcy5jd2QoKTtcbiAgcHJvZ3JhbVxuICAgIC52ZXJzaW9uKChhd2FpdCBmcy5yZWFkSnNvbihwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4vcGFja2FnZS5qc29uJykpKS52ZXJzaW9uKVxuICAgIC5hcmd1bWVudHMoJ1tjd2RdJylcbiAgICAub3B0aW9uKCctLXRhcmdldCBbdGFyZ2V0Wyx0YXJnZXQuLi5dXScsICdUaGUgY29tbWEtc2VwYXJhdGVkIGRlcGxveW1lbnQgdGFyZ2V0cywgZGVmYXVsdHMgdG8gXCJnaXRodWJcIicpXG4gICAgLm9wdGlvbignLS1kcnktcnVuJywgXCJUcmlnZ2VycyBhIHB1Ymxpc2ggZHJ5IHJ1biB3aGljaCBzYXZlcyBzdGF0ZSBhbmQgZG9lc24ndCB1cGxvYWQgYW55dGhpbmdcIilcbiAgICAub3B0aW9uKCctLWZyb20tZHJ5LXJ1bicsICdBdHRlbXB0cyB0byBwdWJsaXNoIGFydGlmYWN0cyBmcm9tIHRoZSBsYXN0IHNhdmVkIGRyeSBydW4nKVxuICAgIC5hbGxvd1Vua25vd25PcHRpb24odHJ1ZSlcbiAgICAuYWN0aW9uKChjd2QpID0+IHtcbiAgICAgIGRpciA9IHdvcmtpbmdEaXIoZGlyLCBjd2QpO1xuICAgIH0pXG4gICAgLnBhcnNlKHByb2Nlc3MuYXJndik7XG5cbiAgaW5pdGlhbGl6ZVByb3h5KCk7XG5cbiAgY29uc3QgcHVibGlzaE9wdHM6IFB1Ymxpc2hPcHRpb25zID0ge1xuICAgIGRpcixcbiAgICBpbnRlcmFjdGl2ZTogdHJ1ZSxcbiAgICBkcnlSdW46IHByb2dyYW0uZHJ5UnVuLFxuICAgIGRyeVJ1blJlc3VtZTogcHJvZ3JhbS5mcm9tRHJ5UnVuLFxuICB9O1xuICBpZiAocHJvZ3JhbS50YXJnZXQpIHB1Ymxpc2hPcHRzLnB1Ymxpc2hUYXJnZXRzID0gcHJvZ3JhbS50YXJnZXQuc3BsaXQoJywnKTtcblxuICBwdWJsaXNoT3B0cy5tYWtlT3B0aW9ucyA9IGF3YWl0IGdldE1ha2VPcHRpb25zKCk7XG5cbiAgYXdhaXQgYXBpLnB1Ymxpc2gocHVibGlzaE9wdHMpO1xufSkoKTtcbiJdfQ==