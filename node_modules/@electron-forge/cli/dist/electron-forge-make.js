"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMakeOptions = getMakeOptions;

require("source-map-support/register");

var _core = require("@electron-forge/core");

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _get = require("@electron/get");

var _commander = _interopRequireDefault(require("commander"));

var _path = _interopRequireDefault(require("path"));

require("./util/terminate");

var _workingDir = _interopRequireDefault(require("./util/working-dir"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-next-line import/prefer-default-export
async function getMakeOptions() {
  let dir = process.cwd();

  _commander.default.version((await _fsExtra.default.readJson(_path.default.resolve(__dirname, '../package.json'))).version).arguments('[cwd]').option('--skip-package', 'Assume the app is already packaged').option('-a, --arch [arch]', 'Target architecture').option('-p, --platform [platform]', 'Target build platform').option('--targets [targets]', 'Override your make targets for this run').allowUnknownOption(true).action(cwd => {
    dir = (0, _workingDir.default)(dir, cwd);
  }).parse(process.argv);

  const makeOpts = {
    dir,
    interactive: true,
    skipPackage: _commander.default.skipPackage
  };
  if (_commander.default.targets) makeOpts.overrideTargets = _commander.default.targets.split(',');
  if (_commander.default.arch) makeOpts.arch = _commander.default.arch;
  if (_commander.default.platform) makeOpts.platform = _commander.default.platform;
  return makeOpts;
} // eslint-disable-next-line @typescript-eslint/no-explicit-any, no-underscore-dangle


if (require.main === module || global.__LINKED_FORGE__) {
  (async () => {
    const makeOpts = await getMakeOptions();
    (0, _get.initializeProxy)();
    await _core.api.make(makeOpts);
  })();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGVjdHJvbi1mb3JnZS1tYWtlLnRzIl0sIm5hbWVzIjpbImdldE1ha2VPcHRpb25zIiwiZGlyIiwicHJvY2VzcyIsImN3ZCIsInByb2dyYW0iLCJ2ZXJzaW9uIiwiZnMiLCJyZWFkSnNvbiIsInBhdGgiLCJyZXNvbHZlIiwiX19kaXJuYW1lIiwiYXJndW1lbnRzIiwib3B0aW9uIiwiYWxsb3dVbmtub3duT3B0aW9uIiwiYWN0aW9uIiwicGFyc2UiLCJhcmd2IiwibWFrZU9wdHMiLCJpbnRlcmFjdGl2ZSIsInNraXBQYWNrYWdlIiwidGFyZ2V0cyIsIm92ZXJyaWRlVGFyZ2V0cyIsInNwbGl0IiwiYXJjaCIsInBsYXRmb3JtIiwicmVxdWlyZSIsIm1haW4iLCJtb2R1bGUiLCJnbG9iYWwiLCJfX0xJTktFRF9GT1JHRV9fIiwiYXBpIiwibWFrZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7Ozs7QUFFQTtBQUNPLGVBQWVBLGNBQWYsR0FBc0Q7QUFDM0QsTUFBSUMsR0FBRyxHQUFHQyxPQUFPLENBQUNDLEdBQVIsRUFBVjs7QUFDQUMscUJBQ0dDLE9BREgsQ0FDVyxDQUFDLE1BQU1DLGlCQUFHQyxRQUFILENBQVlDLGNBQUtDLE9BQUwsQ0FBYUMsU0FBYixFQUF3QixpQkFBeEIsQ0FBWixDQUFQLEVBQWdFTCxPQUQzRSxFQUVHTSxTQUZILENBRWEsT0FGYixFQUdHQyxNQUhILENBR1UsZ0JBSFYsRUFHNEIsb0NBSDVCLEVBSUdBLE1BSkgsQ0FJVSxtQkFKVixFQUkrQixxQkFKL0IsRUFLR0EsTUFMSCxDQUtVLDJCQUxWLEVBS3VDLHVCQUx2QyxFQU1HQSxNQU5ILENBTVUscUJBTlYsRUFNaUMseUNBTmpDLEVBT0dDLGtCQVBILENBT3NCLElBUHRCLEVBUUdDLE1BUkgsQ0FRV1gsR0FBRCxJQUFTO0FBQ2ZGLElBQUFBLEdBQUcsR0FBRyx5QkFBV0EsR0FBWCxFQUFnQkUsR0FBaEIsQ0FBTjtBQUNELEdBVkgsRUFXR1ksS0FYSCxDQVdTYixPQUFPLENBQUNjLElBWGpCOztBQWFBLFFBQU1DLFFBQXFCLEdBQUc7QUFDNUJoQixJQUFBQSxHQUQ0QjtBQUU1QmlCLElBQUFBLFdBQVcsRUFBRSxJQUZlO0FBRzVCQyxJQUFBQSxXQUFXLEVBQUVmLG1CQUFRZTtBQUhPLEdBQTlCO0FBS0EsTUFBSWYsbUJBQVFnQixPQUFaLEVBQXFCSCxRQUFRLENBQUNJLGVBQVQsR0FBMkJqQixtQkFBUWdCLE9BQVIsQ0FBZ0JFLEtBQWhCLENBQXNCLEdBQXRCLENBQTNCO0FBQ3JCLE1BQUlsQixtQkFBUW1CLElBQVosRUFBa0JOLFFBQVEsQ0FBQ00sSUFBVCxHQUFnQm5CLG1CQUFRbUIsSUFBeEI7QUFDbEIsTUFBSW5CLG1CQUFRb0IsUUFBWixFQUFzQlAsUUFBUSxDQUFDTyxRQUFULEdBQW9CcEIsbUJBQVFvQixRQUE1QjtBQUV0QixTQUFPUCxRQUFQO0FBQ0QsQyxDQUVEOzs7QUFDQSxJQUFJUSxPQUFPLENBQUNDLElBQVIsS0FBaUJDLE1BQWpCLElBQTRCQyxNQUFELENBQWdCQyxnQkFBL0MsRUFBaUU7QUFDL0QsR0FBQyxZQUFZO0FBQ1gsVUFBTVosUUFBUSxHQUFHLE1BQU1qQixjQUFjLEVBQXJDO0FBRUE7QUFFQSxVQUFNOEIsVUFBSUMsSUFBSixDQUFTZCxRQUFULENBQU47QUFDRCxHQU5EO0FBT0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhcGksIE1ha2VPcHRpb25zIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2NvcmUnO1xuXG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZVByb3h5IH0gZnJvbSAnQGVsZWN0cm9uL2dldCc7XG5pbXBvcnQgcHJvZ3JhbSBmcm9tICdjb21tYW5kZXInO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCAnLi91dGlsL3Rlcm1pbmF0ZSc7XG5pbXBvcnQgd29ya2luZ0RpciBmcm9tICcuL3V0aWwvd29ya2luZy1kaXInO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L3ByZWZlci1kZWZhdWx0LWV4cG9ydFxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldE1ha2VPcHRpb25zKCk6IFByb21pc2U8TWFrZU9wdGlvbnM+IHtcbiAgbGV0IGRpciA9IHByb2Nlc3MuY3dkKCk7XG4gIHByb2dyYW1cbiAgICAudmVyc2lvbigoYXdhaXQgZnMucmVhZEpzb24ocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uL3BhY2thZ2UuanNvbicpKSkudmVyc2lvbilcbiAgICAuYXJndW1lbnRzKCdbY3dkXScpXG4gICAgLm9wdGlvbignLS1za2lwLXBhY2thZ2UnLCAnQXNzdW1lIHRoZSBhcHAgaXMgYWxyZWFkeSBwYWNrYWdlZCcpXG4gICAgLm9wdGlvbignLWEsIC0tYXJjaCBbYXJjaF0nLCAnVGFyZ2V0IGFyY2hpdGVjdHVyZScpXG4gICAgLm9wdGlvbignLXAsIC0tcGxhdGZvcm0gW3BsYXRmb3JtXScsICdUYXJnZXQgYnVpbGQgcGxhdGZvcm0nKVxuICAgIC5vcHRpb24oJy0tdGFyZ2V0cyBbdGFyZ2V0c10nLCAnT3ZlcnJpZGUgeW91ciBtYWtlIHRhcmdldHMgZm9yIHRoaXMgcnVuJylcbiAgICAuYWxsb3dVbmtub3duT3B0aW9uKHRydWUpXG4gICAgLmFjdGlvbigoY3dkKSA9PiB7XG4gICAgICBkaXIgPSB3b3JraW5nRGlyKGRpciwgY3dkKTtcbiAgICB9KVxuICAgIC5wYXJzZShwcm9jZXNzLmFyZ3YpO1xuXG4gIGNvbnN0IG1ha2VPcHRzOiBNYWtlT3B0aW9ucyA9IHtcbiAgICBkaXIsXG4gICAgaW50ZXJhY3RpdmU6IHRydWUsXG4gICAgc2tpcFBhY2thZ2U6IHByb2dyYW0uc2tpcFBhY2thZ2UsXG4gIH07XG4gIGlmIChwcm9ncmFtLnRhcmdldHMpIG1ha2VPcHRzLm92ZXJyaWRlVGFyZ2V0cyA9IHByb2dyYW0udGFyZ2V0cy5zcGxpdCgnLCcpO1xuICBpZiAocHJvZ3JhbS5hcmNoKSBtYWtlT3B0cy5hcmNoID0gcHJvZ3JhbS5hcmNoO1xuICBpZiAocHJvZ3JhbS5wbGF0Zm9ybSkgbWFrZU9wdHMucGxhdGZvcm0gPSBwcm9ncmFtLnBsYXRmb3JtO1xuXG4gIHJldHVybiBtYWtlT3B0cztcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnksIG5vLXVuZGVyc2NvcmUtZGFuZ2xlXG5pZiAocmVxdWlyZS5tYWluID09PSBtb2R1bGUgfHwgKGdsb2JhbCBhcyBhbnkpLl9fTElOS0VEX0ZPUkdFX18pIHtcbiAgKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtYWtlT3B0cyA9IGF3YWl0IGdldE1ha2VPcHRpb25zKCk7XG5cbiAgICBpbml0aWFsaXplUHJveHkoKTtcblxuICAgIGF3YWl0IGFwaS5tYWtlKG1ha2VPcHRzKTtcbiAgfSkoKTtcbn1cbiJdfQ==