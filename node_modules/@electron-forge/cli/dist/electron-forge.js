#!/usr/bin/env node
"use strict";

require("source-map-support/register");

require("colors");

var _asyncOra = require("@electron-forge/async-ora");

var _commander = _interopRequireDefault(require("commander"));

require("./util/terminate");

var _checkSystem = _interopRequireDefault(require("./util/check-system"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const metadata = require('../package.json');

const originalSC = _commander.default.executeSubCommand.bind(_commander.default);

_commander.default.executeSubCommand = (argv, args, unknown) => {
  let indexOfDoubleDash = process.argv.indexOf('--');
  indexOfDoubleDash = indexOfDoubleDash < 0 ? process.argv.length + 1 : indexOfDoubleDash;
  const passThroughArgs = args.filter(arg => process.argv.indexOf(arg) > indexOfDoubleDash);
  const normalArgs = args.filter(arg => process.argv.indexOf(arg) <= indexOfDoubleDash);
  let newArgs = args;
  let newUnknown = unknown;

  if (passThroughArgs.length > 0) {
    newArgs = normalArgs.concat(unknown).concat('--').concat(passThroughArgs);
    newUnknown = [];
  }

  return originalSC(argv, newArgs, newUnknown);
};

_commander.default.version(metadata.version).option('--verbose', 'Enables verbose mode').command('init', 'Initialize a new Electron application').command('import', 'Attempts to navigate you through the process of importing an existing project to "electron-forge"').command('lint', 'Lints the current Electron application').command('package', 'Package the current Electron application').command('make', 'Generate distributables for the current Electron application').command('start', 'Start the current Electron application').command('publish', 'Publish the current Electron application to GitHub').command('install', 'Install an Electron application from GitHub').on('command:*', commands => {
  // eslint-disable-next-line no-underscore-dangle
  if (!_commander.default._execs.has(commands[0])) {
    console.error();
    console.error(`Unknown command "${_commander.default.args.join(' ')}".`.red);
    console.error('See --help for a list of available commands.');
    process.exit(1);
  }
});

(async () => {
  let goodSystem;
  await (0, _asyncOra.asyncOra)('Checking your system', async ora => {
    goodSystem = await (0, _checkSystem.default)(ora);
  });

  if (!goodSystem) {
    console.error(`It looks like you are missing some dependencies you need to get Electron running.
Make sure you have git installed and Node.js version ${metadata.engines.node}`.red);
    process.exit(1);
  }

  _commander.default.parse(process.argv);
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGVjdHJvbi1mb3JnZS50cyJdLCJuYW1lcyI6WyJtZXRhZGF0YSIsInJlcXVpcmUiLCJvcmlnaW5hbFNDIiwicHJvZ3JhbSIsImV4ZWN1dGVTdWJDb21tYW5kIiwiYmluZCIsImFyZ3YiLCJhcmdzIiwidW5rbm93biIsImluZGV4T2ZEb3VibGVEYXNoIiwicHJvY2VzcyIsImluZGV4T2YiLCJsZW5ndGgiLCJwYXNzVGhyb3VnaEFyZ3MiLCJmaWx0ZXIiLCJhcmciLCJub3JtYWxBcmdzIiwibmV3QXJncyIsIm5ld1Vua25vd24iLCJjb25jYXQiLCJ2ZXJzaW9uIiwib3B0aW9uIiwiY29tbWFuZCIsIm9uIiwiY29tbWFuZHMiLCJfZXhlY3MiLCJoYXMiLCJjb25zb2xlIiwiZXJyb3IiLCJqb2luIiwicmVkIiwiZXhpdCIsImdvb2RTeXN0ZW0iLCJvcmEiLCJlbmdpbmVzIiwibm9kZSIsInBhcnNlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFFQTs7OztBQUVBLE1BQU1BLFFBQVEsR0FBR0MsT0FBTyxDQUFDLGlCQUFELENBQXhCOztBQUVBLE1BQU1DLFVBQVUsR0FBR0MsbUJBQVFDLGlCQUFSLENBQTBCQyxJQUExQixDQUErQkYsa0JBQS9CLENBQW5COztBQUNBQSxtQkFBUUMsaUJBQVIsR0FBNEIsQ0FBQ0UsSUFBRCxFQUFpQkMsSUFBakIsRUFBaUNDLE9BQWpDLEtBQXVEO0FBQ2pGLE1BQUlDLGlCQUFpQixHQUFHQyxPQUFPLENBQUNKLElBQVIsQ0FBYUssT0FBYixDQUFxQixJQUFyQixDQUF4QjtBQUNBRixFQUFBQSxpQkFBaUIsR0FBR0EsaUJBQWlCLEdBQUcsQ0FBcEIsR0FBd0JDLE9BQU8sQ0FBQ0osSUFBUixDQUFhTSxNQUFiLEdBQXNCLENBQTlDLEdBQWtESCxpQkFBdEU7QUFFQSxRQUFNSSxlQUFlLEdBQUdOLElBQUksQ0FBQ08sTUFBTCxDQUFhQyxHQUFELElBQVNMLE9BQU8sQ0FBQ0osSUFBUixDQUFhSyxPQUFiLENBQXFCSSxHQUFyQixJQUE0Qk4saUJBQWpELENBQXhCO0FBQ0EsUUFBTU8sVUFBVSxHQUFHVCxJQUFJLENBQUNPLE1BQUwsQ0FBYUMsR0FBRCxJQUFTTCxPQUFPLENBQUNKLElBQVIsQ0FBYUssT0FBYixDQUFxQkksR0FBckIsS0FBNkJOLGlCQUFsRCxDQUFuQjtBQUVBLE1BQUlRLE9BQU8sR0FBR1YsSUFBZDtBQUNBLE1BQUlXLFVBQVUsR0FBR1YsT0FBakI7O0FBQ0EsTUFBSUssZUFBZSxDQUFDRCxNQUFoQixHQUF5QixDQUE3QixFQUFnQztBQUM5QkssSUFBQUEsT0FBTyxHQUFHRCxVQUFVLENBQUNHLE1BQVgsQ0FBa0JYLE9BQWxCLEVBQTJCVyxNQUEzQixDQUFrQyxJQUFsQyxFQUF3Q0EsTUFBeEMsQ0FBK0NOLGVBQS9DLENBQVY7QUFDQUssSUFBQUEsVUFBVSxHQUFHLEVBQWI7QUFDRDs7QUFDRCxTQUFPaEIsVUFBVSxDQUFDSSxJQUFELEVBQU9XLE9BQVAsRUFBZ0JDLFVBQWhCLENBQWpCO0FBQ0QsQ0FkRDs7QUFnQkFmLG1CQUNHaUIsT0FESCxDQUNXcEIsUUFBUSxDQUFDb0IsT0FEcEIsRUFFR0MsTUFGSCxDQUVVLFdBRlYsRUFFdUIsc0JBRnZCLEVBR0dDLE9BSEgsQ0FHVyxNQUhYLEVBR21CLHVDQUhuQixFQUlHQSxPQUpILENBSVcsUUFKWCxFQUlxQixtR0FKckIsRUFLR0EsT0FMSCxDQUtXLE1BTFgsRUFLbUIsd0NBTG5CLEVBTUdBLE9BTkgsQ0FNVyxTQU5YLEVBTXNCLDBDQU50QixFQU9HQSxPQVBILENBT1csTUFQWCxFQU9tQiw4REFQbkIsRUFRR0EsT0FSSCxDQVFXLE9BUlgsRUFRb0Isd0NBUnBCLEVBU0dBLE9BVEgsQ0FTVyxTQVRYLEVBU3NCLG9EQVR0QixFQVVHQSxPQVZILENBVVcsU0FWWCxFQVVzQiw2Q0FWdEIsRUFXR0MsRUFYSCxDQVdNLFdBWE4sRUFXb0JDLFFBQUQsSUFBYztBQUM3QjtBQUNBLE1BQUksQ0FBQ3JCLG1CQUFRc0IsTUFBUixDQUFlQyxHQUFmLENBQW1CRixRQUFRLENBQUMsQ0FBRCxDQUEzQixDQUFMLEVBQXNDO0FBQ3BDRyxJQUFBQSxPQUFPLENBQUNDLEtBQVI7QUFDQUQsSUFBQUEsT0FBTyxDQUFDQyxLQUFSLENBQWUsb0JBQW1CekIsbUJBQVFJLElBQVIsQ0FBYXNCLElBQWIsQ0FBa0IsR0FBbEIsQ0FBdUIsSUFBM0MsQ0FBK0NDLEdBQTdEO0FBQ0FILElBQUFBLE9BQU8sQ0FBQ0MsS0FBUixDQUFjLDhDQUFkO0FBQ0FsQixJQUFBQSxPQUFPLENBQUNxQixJQUFSLENBQWEsQ0FBYjtBQUNEO0FBQ0YsQ0FuQkg7O0FBcUJBLENBQUMsWUFBWTtBQUNYLE1BQUlDLFVBQUo7QUFDQSxRQUFNLHdCQUFTLHNCQUFULEVBQWlDLE1BQU9DLEdBQVAsSUFBZTtBQUNwREQsSUFBQUEsVUFBVSxHQUFHLE1BQU0sMEJBQVlDLEdBQVosQ0FBbkI7QUFDRCxHQUZLLENBQU47O0FBSUEsTUFBSSxDQUFDRCxVQUFMLEVBQWlCO0FBQ2ZMLElBQUFBLE9BQU8sQ0FBQ0MsS0FBUixDQUFnQjtBQUNwQix1REFBdUQ1QixRQUFRLENBQUNrQyxPQUFULENBQWlCQyxJQUFLLEVBRDNELENBQzhETCxHQUQ1RTtBQUVBcEIsSUFBQUEsT0FBTyxDQUFDcUIsSUFBUixDQUFhLENBQWI7QUFDRDs7QUFFRDVCLHFCQUFRaUMsS0FBUixDQUFjMUIsT0FBTyxDQUFDSixJQUF0QjtBQUNELENBYkQiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5pbXBvcnQgJ2NvbG9ycyc7XG5pbXBvcnQgeyBhc3luY09yYSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9hc3luYy1vcmEnO1xuaW1wb3J0IHByb2dyYW0gZnJvbSAnY29tbWFuZGVyJztcblxuaW1wb3J0ICcuL3V0aWwvdGVybWluYXRlJztcblxuaW1wb3J0IGNoZWNrU3lzdGVtIGZyb20gJy4vdXRpbC9jaGVjay1zeXN0ZW0nO1xuXG5jb25zdCBtZXRhZGF0YSA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpO1xuXG5jb25zdCBvcmlnaW5hbFNDID0gcHJvZ3JhbS5leGVjdXRlU3ViQ29tbWFuZC5iaW5kKHByb2dyYW0pO1xucHJvZ3JhbS5leGVjdXRlU3ViQ29tbWFuZCA9IChhcmd2OiBzdHJpbmdbXSwgYXJnczogc3RyaW5nW10sIHVua25vd246IHN0cmluZ1tdKSA9PiB7XG4gIGxldCBpbmRleE9mRG91YmxlRGFzaCA9IHByb2Nlc3MuYXJndi5pbmRleE9mKCctLScpO1xuICBpbmRleE9mRG91YmxlRGFzaCA9IGluZGV4T2ZEb3VibGVEYXNoIDwgMCA/IHByb2Nlc3MuYXJndi5sZW5ndGggKyAxIDogaW5kZXhPZkRvdWJsZURhc2g7XG5cbiAgY29uc3QgcGFzc1Rocm91Z2hBcmdzID0gYXJncy5maWx0ZXIoKGFyZykgPT4gcHJvY2Vzcy5hcmd2LmluZGV4T2YoYXJnKSA+IGluZGV4T2ZEb3VibGVEYXNoKTtcbiAgY29uc3Qgbm9ybWFsQXJncyA9IGFyZ3MuZmlsdGVyKChhcmcpID0+IHByb2Nlc3MuYXJndi5pbmRleE9mKGFyZykgPD0gaW5kZXhPZkRvdWJsZURhc2gpO1xuXG4gIGxldCBuZXdBcmdzID0gYXJncztcbiAgbGV0IG5ld1Vua25vd24gPSB1bmtub3duO1xuICBpZiAocGFzc1Rocm91Z2hBcmdzLmxlbmd0aCA+IDApIHtcbiAgICBuZXdBcmdzID0gbm9ybWFsQXJncy5jb25jYXQodW5rbm93bikuY29uY2F0KCctLScpLmNvbmNhdChwYXNzVGhyb3VnaEFyZ3MpO1xuICAgIG5ld1Vua25vd24gPSBbXTtcbiAgfVxuICByZXR1cm4gb3JpZ2luYWxTQyhhcmd2LCBuZXdBcmdzLCBuZXdVbmtub3duKTtcbn07XG5cbnByb2dyYW1cbiAgLnZlcnNpb24obWV0YWRhdGEudmVyc2lvbilcbiAgLm9wdGlvbignLS12ZXJib3NlJywgJ0VuYWJsZXMgdmVyYm9zZSBtb2RlJylcbiAgLmNvbW1hbmQoJ2luaXQnLCAnSW5pdGlhbGl6ZSBhIG5ldyBFbGVjdHJvbiBhcHBsaWNhdGlvbicpXG4gIC5jb21tYW5kKCdpbXBvcnQnLCAnQXR0ZW1wdHMgdG8gbmF2aWdhdGUgeW91IHRocm91Z2ggdGhlIHByb2Nlc3Mgb2YgaW1wb3J0aW5nIGFuIGV4aXN0aW5nIHByb2plY3QgdG8gXCJlbGVjdHJvbi1mb3JnZVwiJylcbiAgLmNvbW1hbmQoJ2xpbnQnLCAnTGludHMgdGhlIGN1cnJlbnQgRWxlY3Ryb24gYXBwbGljYXRpb24nKVxuICAuY29tbWFuZCgncGFja2FnZScsICdQYWNrYWdlIHRoZSBjdXJyZW50IEVsZWN0cm9uIGFwcGxpY2F0aW9uJylcbiAgLmNvbW1hbmQoJ21ha2UnLCAnR2VuZXJhdGUgZGlzdHJpYnV0YWJsZXMgZm9yIHRoZSBjdXJyZW50IEVsZWN0cm9uIGFwcGxpY2F0aW9uJylcbiAgLmNvbW1hbmQoJ3N0YXJ0JywgJ1N0YXJ0IHRoZSBjdXJyZW50IEVsZWN0cm9uIGFwcGxpY2F0aW9uJylcbiAgLmNvbW1hbmQoJ3B1Ymxpc2gnLCAnUHVibGlzaCB0aGUgY3VycmVudCBFbGVjdHJvbiBhcHBsaWNhdGlvbiB0byBHaXRIdWInKVxuICAuY29tbWFuZCgnaW5zdGFsbCcsICdJbnN0YWxsIGFuIEVsZWN0cm9uIGFwcGxpY2F0aW9uIGZyb20gR2l0SHViJylcbiAgLm9uKCdjb21tYW5kOionLCAoY29tbWFuZHMpID0+IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZXJzY29yZS1kYW5nbGVcbiAgICBpZiAoIXByb2dyYW0uX2V4ZWNzLmhhcyhjb21tYW5kc1swXSkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFVua25vd24gY29tbWFuZCBcIiR7cHJvZ3JhbS5hcmdzLmpvaW4oJyAnKX1cIi5gLnJlZCk7XG4gICAgICBjb25zb2xlLmVycm9yKCdTZWUgLS1oZWxwIGZvciBhIGxpc3Qgb2YgYXZhaWxhYmxlIGNvbW1hbmRzLicpO1xuICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgIH1cbiAgfSk7XG5cbihhc3luYyAoKSA9PiB7XG4gIGxldCBnb29kU3lzdGVtO1xuICBhd2FpdCBhc3luY09yYSgnQ2hlY2tpbmcgeW91ciBzeXN0ZW0nLCBhc3luYyAob3JhKSA9PiB7XG4gICAgZ29vZFN5c3RlbSA9IGF3YWl0IGNoZWNrU3lzdGVtKG9yYSk7XG4gIH0pO1xuXG4gIGlmICghZ29vZFN5c3RlbSkge1xuICAgIGNvbnNvbGUuZXJyb3IoKGBJdCBsb29rcyBsaWtlIHlvdSBhcmUgbWlzc2luZyBzb21lIGRlcGVuZGVuY2llcyB5b3UgbmVlZCB0byBnZXQgRWxlY3Ryb24gcnVubmluZy5cbk1ha2Ugc3VyZSB5b3UgaGF2ZSBnaXQgaW5zdGFsbGVkIGFuZCBOb2RlLmpzIHZlcnNpb24gJHttZXRhZGF0YS5lbmdpbmVzLm5vZGV9YCkucmVkKTtcbiAgICBwcm9jZXNzLmV4aXQoMSk7XG4gIH1cblxuICBwcm9ncmFtLnBhcnNlKHByb2Nlc3MuYXJndik7XG59KSgpO1xuIl19