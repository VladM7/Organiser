"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _asyncOra = require("@electron-forge/async-ora");

var _templateBase = require("@electron-forge/template-base");

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class WebpackTemplate extends _templateBase.BaseTemplate {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "templateDir", _path.default.resolve(__dirname, '..', 'tmpl'));
  }

  async initializeTemplate(directory, options) {
    await super.initializeTemplate(directory, options);
    await (0, _asyncOra.asyncOra)('Setting up Forge configuration', async () => {
      const pjPath = _path.default.resolve(directory, 'package.json');

      const currentPJ = await _fsExtra.default.readJson(pjPath);
      currentPJ.main = '.webpack/main';
      currentPJ.config.forge.plugins = currentPJ.config.forge.plugins || [];
      currentPJ.config.forge.plugins.push(['@electron-forge/plugin-webpack', {
        mainConfig: './webpack.main.config.js',
        renderer: {
          config: './webpack.renderer.config.js',
          entryPoints: [{
            html: './src/index.html',
            js: './src/renderer.js',
            name: 'main_window'
          }]
        }
      }]);
      await _fsExtra.default.writeJson(pjPath, currentPJ, {
        spaces: 2
      });
    });
    await (0, _asyncOra.asyncOra)('Setting up webpack configuration', async () => {
      await this.copyTemplateFile(directory, 'webpack.main.config.js');
      await this.copyTemplateFile(directory, 'webpack.renderer.config.js');
      await this.copyTemplateFile(directory, 'webpack.rules.js');
      await this.copyTemplateFile(_path.default.join(directory, 'src'), 'renderer.js');
      await this.updateFileByLine(_path.default.resolve(directory, 'src', 'index.js'), line => {
        if (line.includes('mainWindow.loadFile')) return '  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);';
        return line;
      }, _path.default.resolve(directory, 'src', 'main.js'));
      await this.updateFileByLine(_path.default.resolve(directory, 'src', 'index.html'), line => {
        if (line.includes('link rel="stylesheet"')) return '';
        return line;
      });
    });
  }

}

var _default = new WebpackTemplate();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9XZWJwYWNrVGVtcGxhdGUudHMiXSwibmFtZXMiOlsiV2VicGFja1RlbXBsYXRlIiwiQmFzZVRlbXBsYXRlIiwicGF0aCIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJpbml0aWFsaXplVGVtcGxhdGUiLCJkaXJlY3RvcnkiLCJvcHRpb25zIiwicGpQYXRoIiwiY3VycmVudFBKIiwiZnMiLCJyZWFkSnNvbiIsIm1haW4iLCJjb25maWciLCJmb3JnZSIsInBsdWdpbnMiLCJwdXNoIiwibWFpbkNvbmZpZyIsInJlbmRlcmVyIiwiZW50cnlQb2ludHMiLCJodG1sIiwianMiLCJuYW1lIiwid3JpdGVKc29uIiwic3BhY2VzIiwiY29weVRlbXBsYXRlRmlsZSIsImpvaW4iLCJ1cGRhdGVGaWxlQnlMaW5lIiwibGluZSIsImluY2x1ZGVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQTs7Ozs7O0FBRUEsTUFBTUEsZUFBTixTQUE4QkMsMEJBQTlCLENBQTJDO0FBQUE7QUFBQTs7QUFBQSx5Q0FDcEJDLGNBQUtDLE9BQUwsQ0FBYUMsU0FBYixFQUF3QixJQUF4QixFQUE4QixNQUE5QixDQURvQjtBQUFBOztBQUdWLFFBQWxCQyxrQkFBa0IsQ0FBQ0MsU0FBRCxFQUFvQkMsT0FBcEIsRUFBa0Q7QUFDL0UsVUFBTSxNQUFNRixrQkFBTixDQUF5QkMsU0FBekIsRUFBb0NDLE9BQXBDLENBQU47QUFDQSxVQUFNLHdCQUFTLGdDQUFULEVBQTJDLFlBQVk7QUFDM0QsWUFBTUMsTUFBTSxHQUFHTixjQUFLQyxPQUFMLENBQWFHLFNBQWIsRUFBd0IsY0FBeEIsQ0FBZjs7QUFDQSxZQUFNRyxTQUFTLEdBQUcsTUFBTUMsaUJBQUdDLFFBQUgsQ0FBWUgsTUFBWixDQUF4QjtBQUNBQyxNQUFBQSxTQUFTLENBQUNHLElBQVYsR0FBaUIsZUFBakI7QUFDQUgsTUFBQUEsU0FBUyxDQUFDSSxNQUFWLENBQWlCQyxLQUFqQixDQUF1QkMsT0FBdkIsR0FBaUNOLFNBQVMsQ0FBQ0ksTUFBVixDQUFpQkMsS0FBakIsQ0FBdUJDLE9BQXZCLElBQWtDLEVBQW5FO0FBQ0FOLE1BQUFBLFNBQVMsQ0FBQ0ksTUFBVixDQUFpQkMsS0FBakIsQ0FBdUJDLE9BQXZCLENBQStCQyxJQUEvQixDQUFvQyxDQUNsQyxnQ0FEa0MsRUFFbEM7QUFDRUMsUUFBQUEsVUFBVSxFQUFFLDBCQURkO0FBRUVDLFFBQUFBLFFBQVEsRUFBRTtBQUNSTCxVQUFBQSxNQUFNLEVBQUUsOEJBREE7QUFFUk0sVUFBQUEsV0FBVyxFQUFFLENBQUM7QUFDWkMsWUFBQUEsSUFBSSxFQUFFLGtCQURNO0FBRVpDLFlBQUFBLEVBQUUsRUFBRSxtQkFGUTtBQUdaQyxZQUFBQSxJQUFJLEVBQUU7QUFITSxXQUFEO0FBRkw7QUFGWixPQUZrQyxDQUFwQztBQWNBLFlBQU1aLGlCQUFHYSxTQUFILENBQWFmLE1BQWIsRUFBcUJDLFNBQXJCLEVBQWdDO0FBQ3BDZSxRQUFBQSxNQUFNLEVBQUU7QUFENEIsT0FBaEMsQ0FBTjtBQUdELEtBdEJLLENBQU47QUF1QkEsVUFBTSx3QkFBUyxrQ0FBVCxFQUE2QyxZQUFZO0FBQzdELFlBQU0sS0FBS0MsZ0JBQUwsQ0FBc0JuQixTQUF0QixFQUFpQyx3QkFBakMsQ0FBTjtBQUNBLFlBQU0sS0FBS21CLGdCQUFMLENBQXNCbkIsU0FBdEIsRUFBaUMsNEJBQWpDLENBQU47QUFDQSxZQUFNLEtBQUttQixnQkFBTCxDQUFzQm5CLFNBQXRCLEVBQWlDLGtCQUFqQyxDQUFOO0FBQ0EsWUFBTSxLQUFLbUIsZ0JBQUwsQ0FBc0J2QixjQUFLd0IsSUFBTCxDQUFVcEIsU0FBVixFQUFxQixLQUFyQixDQUF0QixFQUFtRCxhQUFuRCxDQUFOO0FBRUEsWUFBTSxLQUFLcUIsZ0JBQUwsQ0FBc0J6QixjQUFLQyxPQUFMLENBQWFHLFNBQWIsRUFBd0IsS0FBeEIsRUFBK0IsVUFBL0IsQ0FBdEIsRUFBbUVzQixJQUFELElBQVU7QUFDaEYsWUFBSUEsSUFBSSxDQUFDQyxRQUFMLENBQWMscUJBQWQsQ0FBSixFQUEwQyxPQUFPLGtEQUFQO0FBQzFDLGVBQU9ELElBQVA7QUFDRCxPQUhLLEVBR0gxQixjQUFLQyxPQUFMLENBQWFHLFNBQWIsRUFBd0IsS0FBeEIsRUFBK0IsU0FBL0IsQ0FIRyxDQUFOO0FBS0EsWUFBTSxLQUFLcUIsZ0JBQUwsQ0FBc0J6QixjQUFLQyxPQUFMLENBQWFHLFNBQWIsRUFBd0IsS0FBeEIsRUFBK0IsWUFBL0IsQ0FBdEIsRUFBcUVzQixJQUFELElBQVU7QUFDbEYsWUFBSUEsSUFBSSxDQUFDQyxRQUFMLENBQWMsdUJBQWQsQ0FBSixFQUE0QyxPQUFPLEVBQVA7QUFDNUMsZUFBT0QsSUFBUDtBQUNELE9BSEssQ0FBTjtBQUlELEtBZkssQ0FBTjtBQWdCRDs7QUE1Q3dDOztlQStDNUIsSUFBSTVCLGVBQUosRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzeW5jT3JhIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2FzeW5jLW9yYSc7XG5pbXBvcnQgeyBCYXNlVGVtcGxhdGUgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2UvdGVtcGxhdGUtYmFzZSc7XG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHsgSW5pdFRlbXBsYXRlT3B0aW9ucyB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9zaGFyZWQtdHlwZXMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmNsYXNzIFdlYnBhY2tUZW1wbGF0ZSBleHRlbmRzIEJhc2VUZW1wbGF0ZSB7XG4gIHB1YmxpYyB0ZW1wbGF0ZURpciA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICd0bXBsJyk7XG5cbiAgcHVibGljIGFzeW5jIGluaXRpYWxpemVUZW1wbGF0ZShkaXJlY3Rvcnk6IHN0cmluZywgb3B0aW9uczogSW5pdFRlbXBsYXRlT3B0aW9ucykge1xuICAgIGF3YWl0IHN1cGVyLmluaXRpYWxpemVUZW1wbGF0ZShkaXJlY3RvcnksIG9wdGlvbnMpO1xuICAgIGF3YWl0IGFzeW5jT3JhKCdTZXR0aW5nIHVwIEZvcmdlIGNvbmZpZ3VyYXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBwalBhdGggPSBwYXRoLnJlc29sdmUoZGlyZWN0b3J5LCAncGFja2FnZS5qc29uJyk7XG4gICAgICBjb25zdCBjdXJyZW50UEogPSBhd2FpdCBmcy5yZWFkSnNvbihwalBhdGgpO1xuICAgICAgY3VycmVudFBKLm1haW4gPSAnLndlYnBhY2svbWFpbic7XG4gICAgICBjdXJyZW50UEouY29uZmlnLmZvcmdlLnBsdWdpbnMgPSBjdXJyZW50UEouY29uZmlnLmZvcmdlLnBsdWdpbnMgfHwgW107XG4gICAgICBjdXJyZW50UEouY29uZmlnLmZvcmdlLnBsdWdpbnMucHVzaChbXG4gICAgICAgICdAZWxlY3Ryb24tZm9yZ2UvcGx1Z2luLXdlYnBhY2snLFxuICAgICAgICB7XG4gICAgICAgICAgbWFpbkNvbmZpZzogJy4vd2VicGFjay5tYWluLmNvbmZpZy5qcycsXG4gICAgICAgICAgcmVuZGVyZXI6IHtcbiAgICAgICAgICAgIGNvbmZpZzogJy4vd2VicGFjay5yZW5kZXJlci5jb25maWcuanMnLFxuICAgICAgICAgICAgZW50cnlQb2ludHM6IFt7XG4gICAgICAgICAgICAgIGh0bWw6ICcuL3NyYy9pbmRleC5odG1sJyxcbiAgICAgICAgICAgICAganM6ICcuL3NyYy9yZW5kZXJlci5qcycsXG4gICAgICAgICAgICAgIG5hbWU6ICdtYWluX3dpbmRvdycsXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSk7XG4gICAgICBhd2FpdCBmcy53cml0ZUpzb24ocGpQYXRoLCBjdXJyZW50UEosIHtcbiAgICAgICAgc3BhY2VzOiAyLFxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgYXdhaXQgYXN5bmNPcmEoJ1NldHRpbmcgdXAgd2VicGFjayBjb25maWd1cmF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKGRpcmVjdG9yeSwgJ3dlYnBhY2subWFpbi5jb25maWcuanMnKTtcbiAgICAgIGF3YWl0IHRoaXMuY29weVRlbXBsYXRlRmlsZShkaXJlY3RvcnksICd3ZWJwYWNrLnJlbmRlcmVyLmNvbmZpZy5qcycpO1xuICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKGRpcmVjdG9yeSwgJ3dlYnBhY2sucnVsZXMuanMnKTtcbiAgICAgIGF3YWl0IHRoaXMuY29weVRlbXBsYXRlRmlsZShwYXRoLmpvaW4oZGlyZWN0b3J5LCAnc3JjJyksICdyZW5kZXJlci5qcycpO1xuXG4gICAgICBhd2FpdCB0aGlzLnVwZGF0ZUZpbGVCeUxpbmUocGF0aC5yZXNvbHZlKGRpcmVjdG9yeSwgJ3NyYycsICdpbmRleC5qcycpLCAobGluZSkgPT4ge1xuICAgICAgICBpZiAobGluZS5pbmNsdWRlcygnbWFpbldpbmRvdy5sb2FkRmlsZScpKSByZXR1cm4gJyAgbWFpbldpbmRvdy5sb2FkVVJMKE1BSU5fV0lORE9XX1dFQlBBQ0tfRU5UUlkpOyc7XG4gICAgICAgIHJldHVybiBsaW5lO1xuICAgICAgfSwgcGF0aC5yZXNvbHZlKGRpcmVjdG9yeSwgJ3NyYycsICdtYWluLmpzJykpO1xuXG4gICAgICBhd2FpdCB0aGlzLnVwZGF0ZUZpbGVCeUxpbmUocGF0aC5yZXNvbHZlKGRpcmVjdG9yeSwgJ3NyYycsICdpbmRleC5odG1sJyksIChsaW5lKSA9PiB7XG4gICAgICAgIGlmIChsaW5lLmluY2x1ZGVzKCdsaW5rIHJlbD1cInN0eWxlc2hlZXRcIicpKSByZXR1cm4gJyc7XG4gICAgICAgIHJldHVybiBsaW5lO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbmV3IFdlYnBhY2tUZW1wbGF0ZSgpO1xuIl19