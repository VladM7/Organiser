"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Publisher {
  constructor(config, providedPlatforms) {
    this.config = config;
    this.providedPlatforms = providedPlatforms;

    _defineProperty(this, "name", void 0);

    _defineProperty(this, "defaultPlatforms", void 0);

    _defineProperty(this, "__isElectronForgePublisher", void 0);

    this.config = config;
    Object.defineProperty(this, '__isElectronForgePublisher', {
      value: true,
      enumerable: false,
      configurable: false
    });
  }

  get platforms() {
    if (this.providedPlatforms) return this.providedPlatforms;
    if (this.defaultPlatforms) return this.defaultPlatforms;
    return ['win32', 'linux', 'darwin', 'mas'];
  }
  /**
   * Publishers must implement this method to publish the artifacts returned from
   * make calls.  If any errors occur you must throw them, failing silently or simply
   * logging will not propagate issues up to forge.
   *
   * Please note for a given version publish will be called multiple times, once
   * for each set of "platform" and "arch".  This means if you are publishing
   * darwin and win32 artifacts to somewhere like GitHub on the first publish call
   * you will have to create the version on GitHub and the second call will just
   * be appending files to the existing version.
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  async publish(opts) {
    throw new Error(`Publisher ${this.name} did not implement the publish method`);
  }

}

exports.default = Publisher;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9QdWJsaXNoZXIudHMiXSwibmFtZXMiOlsiUHVibGlzaGVyIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJwcm92aWRlZFBsYXRmb3JtcyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwicGxhdGZvcm1zIiwiZGVmYXVsdFBsYXRmb3JtcyIsInB1Ymxpc2giLCJvcHRzIiwiRXJyb3IiLCJuYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQW9CZSxNQUFlQSxTQUFmLENBQXVEO0FBT3BFQyxFQUFBQSxXQUFXLENBQVFDLE1BQVIsRUFBNkJDLGlCQUE3QixFQUFrRTtBQUFBLFNBQTFERCxNQUEwRCxHQUExREEsTUFBMEQ7QUFBQSxTQUFyQ0MsaUJBQXFDLEdBQXJDQSxpQkFBcUM7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQzNFLFNBQUtELE1BQUwsR0FBY0EsTUFBZDtBQUNBRSxJQUFBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsNEJBQTVCLEVBQTBEO0FBQ3hEQyxNQUFBQSxLQUFLLEVBQUUsSUFEaUQ7QUFFeERDLE1BQUFBLFVBQVUsRUFBRSxLQUY0QztBQUd4REMsTUFBQUEsWUFBWSxFQUFFO0FBSDBDLEtBQTFEO0FBS0Q7O0FBRVksTUFBVEMsU0FBUyxHQUFvQjtBQUMvQixRQUFJLEtBQUtOLGlCQUFULEVBQTRCLE9BQU8sS0FBS0EsaUJBQVo7QUFDNUIsUUFBSSxLQUFLTyxnQkFBVCxFQUEyQixPQUFPLEtBQUtBLGdCQUFaO0FBQzNCLFdBQU8sQ0FBQyxPQUFELEVBQVUsT0FBVixFQUFtQixRQUFuQixFQUE2QixLQUE3QixDQUFQO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7OztBQUNhLFFBQVBDLE9BQU8sQ0FBQ0MsSUFBRCxFQUF3QztBQUNuRCxVQUFNLElBQUlDLEtBQUosQ0FBVyxhQUFZLEtBQUtDLElBQUssdUNBQWpDLENBQU47QUFDRDs7QUFwQ21FIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llc1xuaW1wb3J0IHsgRm9yZ2VQbGF0Zm9ybSwgRm9yZ2VDb25maWcsIEZvcmdlTWFrZVJlc3VsdCwgSUZvcmdlUHVibGlzaGVyIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL3NoYXJlZC10eXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHVibGlzaGVyT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBUaGUgYmFzZSBkaXJlY3Rvcnkgb2YgdGhlIGFwcHMgc291cmNlIGNvZGVcbiAgICovXG4gIGRpcjogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHJlc3VsdHMgZnJvbSBydW5uaW5nIHRoZSBtYWtlIGNvbW1hbmRcbiAgICovXG4gIG1ha2VSZXN1bHRzOiBGb3JnZU1ha2VSZXN1bHRbXTtcbiAgLyoqXG4gICAqIFRoZSByYXcgZm9yZ2VDb25maWcgdGhpcyBhcHAgaXMgdXNpbmcuXG4gICAqXG4gICAqIFlvdSBwcm9iYWJseSBzaG91bGRuJ3QgdXNlIHRoaXNcbiAgICovXG4gIGZvcmdlQ29uZmlnOiBGb3JnZUNvbmZpZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgUHVibGlzaGVyPEM+IGltcGxlbWVudHMgSUZvcmdlUHVibGlzaGVyIHtcbiAgcHVibGljIGFic3RyYWN0IG5hbWU6IHN0cmluZztcblxuICBwdWJsaWMgZGVmYXVsdFBsYXRmb3Jtcz86IEZvcmdlUGxhdGZvcm1bXTtcblxuICBfX2lzRWxlY3Ryb25Gb3JnZVB1Ymxpc2hlciE6IHRydWU7XG5cbiAgY29uc3RydWN0b3IocHVibGljIGNvbmZpZzogQywgcHJvdGVjdGVkIHByb3ZpZGVkUGxhdGZvcm1zPzogRm9yZ2VQbGF0Zm9ybVtdKSB7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdfX2lzRWxlY3Ryb25Gb3JnZVB1Ymxpc2hlcicsIHtcbiAgICAgIHZhbHVlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgIH0pO1xuICB9XG5cbiAgZ2V0IHBsYXRmb3JtcygpOiBGb3JnZVBsYXRmb3JtW10ge1xuICAgIGlmICh0aGlzLnByb3ZpZGVkUGxhdGZvcm1zKSByZXR1cm4gdGhpcy5wcm92aWRlZFBsYXRmb3JtcztcbiAgICBpZiAodGhpcy5kZWZhdWx0UGxhdGZvcm1zKSByZXR1cm4gdGhpcy5kZWZhdWx0UGxhdGZvcm1zO1xuICAgIHJldHVybiBbJ3dpbjMyJywgJ2xpbnV4JywgJ2RhcndpbicsICdtYXMnXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaXNoZXJzIG11c3QgaW1wbGVtZW50IHRoaXMgbWV0aG9kIHRvIHB1Ymxpc2ggdGhlIGFydGlmYWN0cyByZXR1cm5lZCBmcm9tXG4gICAqIG1ha2UgY2FsbHMuICBJZiBhbnkgZXJyb3JzIG9jY3VyIHlvdSBtdXN0IHRocm93IHRoZW0sIGZhaWxpbmcgc2lsZW50bHkgb3Igc2ltcGx5XG4gICAqIGxvZ2dpbmcgd2lsbCBub3QgcHJvcGFnYXRlIGlzc3VlcyB1cCB0byBmb3JnZS5cbiAgICpcbiAgICogUGxlYXNlIG5vdGUgZm9yIGEgZ2l2ZW4gdmVyc2lvbiBwdWJsaXNoIHdpbGwgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzLCBvbmNlXG4gICAqIGZvciBlYWNoIHNldCBvZiBcInBsYXRmb3JtXCIgYW5kIFwiYXJjaFwiLiAgVGhpcyBtZWFucyBpZiB5b3UgYXJlIHB1Ymxpc2hpbmdcbiAgICogZGFyd2luIGFuZCB3aW4zMiBhcnRpZmFjdHMgdG8gc29tZXdoZXJlIGxpa2UgR2l0SHViIG9uIHRoZSBmaXJzdCBwdWJsaXNoIGNhbGxcbiAgICogeW91IHdpbGwgaGF2ZSB0byBjcmVhdGUgdGhlIHZlcnNpb24gb24gR2l0SHViIGFuZCB0aGUgc2Vjb25kIGNhbGwgd2lsbCBqdXN0XG4gICAqIGJlIGFwcGVuZGluZyBmaWxlcyB0byB0aGUgZXhpc3RpbmcgdmVyc2lvbi5cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgYXN5bmMgcHVibGlzaChvcHRzOiBQdWJsaXNoZXJPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBQdWJsaXNoZXIgJHt0aGlzLm5hbWV9IGRpZCBub3QgaW1wbGVtZW50IHRoZSBwdWJsaXNoIG1ldGhvZGApO1xuICB9XG59XG4iXX0=